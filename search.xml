<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>github+hexo架設心得</title>
    <url>/2015/10/05/github-hexo%E6%9E%B6%E8%A8%AD%E5%BF%83%E5%BE%97/</url>
    <content><![CDATA[<p>其實很早就想將自己的學習心得放在網路上給高中的學弟妹看，不然大學畢業後就沒空教學弟妹了</p>
<p>這篇是紀錄我如何架設blog的過程，除了跟風(github.io的域名)，也是要給學弟妹的第一份筆記</p>
<h1 id="一、本機端安裝"><a href="#一、本機端安裝" class="headerlink" title="一、本機端安裝"></a>一、本機端安裝</h1><p>首先要先安裝<a href="https://nodejs.org/en/">node.js</a></p>
<p>最新版的node.js會自動加入環境變數，所以環境變數這邊就省了</p>
<p>接下來打開可愛的小黑窗安裝<a href="https://hexo.io/">hexo</a></p>
<pre><code>npm install -g hexo</code></pre>
<p>這樣hexo就安裝完成了</p>
<h1 id="二、github設定"><a href="#二、github設定" class="headerlink" title="二、github設定"></a>二、github設定</h1><p>到github開新的repository，命名為：<strong>用戶名.github.io</strong></p>
<h1 id="三、Hexo設定"><a href="#三、Hexo設定" class="headerlink" title="三、Hexo設定"></a>三、Hexo設定</h1><p>建立新的資料夾並且初始化</p>
<pre><code>mkdir hexo
hexo init</code></pre>
<p>產生頁面</p>
<pre><code>hexo generate</code></pre>
<p>啟動server(預設為localhost:4000)</p>
<pre><code>hexo server</code></pre>
<p>可以使用**-p**來調整port</p>
<pre><code>hexo server -p 8080</code></pre>
<h1 id="四、部署到github上面"><a href="#四、部署到github上面" class="headerlink" title="四、部署到github上面"></a>四、部署到github上面</h1><p>修改<strong>hexo</strong>資料夾底下的<strong>_config.yml</strong></p>
<p>到最底下修改</p>
<pre><code>deploy:
    type: git
    repository: git@github.com:github帳號/repository名稱.github.io.git
    branch: master</code></pre>
<p>記得要先建立SSH的Key喔，可以參考<a href="https://help.github.com/articles/generating-ssh-keys/">官方文件</a></p>
<p>最後輸入</p>
<pre><code>hexo clean
hexo generate
hexo deploy</code></pre>
<p>接著到<strong>http://{github帳號}.github.io</strong>就可以看到成果囉</p>
<h1 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h1><p>Well，用Markdown寫文章寫起來真的很爽，之後來找插件加強網站的功能囉</p>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p>1.<a href="http://code.kpman.cc/2013/04/26/hexo%E6%9E%B6blog%E5%88%9D%E9%AB%94%E9%A9%97/">hexo架blog初體驗</a> </p>
<p>2.<a href="https://help.github.com/articles/generating-ssh-keys/">Generating SSH keys</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo留言與主題設定</title>
    <url>/2015/10/06/hexo%E7%95%99%E8%A8%80%E8%88%87%E4%B8%BB%E9%A1%8C%E8%A8%AD%E5%AE%9A/</url>
    <content><![CDATA[<p>覺得官方預設的主題有點不符合需求，只好找其他主題來玩</p>
<p>這邊還是要記錄一下換主題還有新增留言版過程</p>
<h1 id="更換主題"><a href="#更換主題" class="headerlink" title="更換主題"></a>更換主題</h1><p>到可以到<a href="https://github.com/hexojs/hexo/wiki/Themes">這裡</a>找你喜歡的主題</p>
<p>然後使用git安裝主題</p>
<pre><code>git clone &lt;repository&gt; themes/&lt;theme-name&gt;</code></pre>
<p>然後修改<strong>_config.yml</strong></p>
<pre><code># Extensions
theme: &lt;theme-name&gt;</code></pre>
<p>如果覺得這個主題有些小地方不滿意</p>
<p>可以到theme資料夾裡面修改<strong>_config.yml</strong></p>
<h2 id="主題設定"><a href="#主題設定" class="headerlink" title="主題設定"></a>主題設定</h2><p>以下都在_config.yml修改</p>
<h3 id="大頭貼設定"><a href="#大頭貼設定" class="headerlink" title="大頭貼設定"></a>大頭貼設定</h3><p>新增avatar</p>
<ol>
<li>完整的URL：<a href="http://gundambox.github.io/avatar/avatar.jpg">http://gundambox.github.io/avatar/avatar.jpg</a></li>
<li>站內地址：/avatar/avatar.jpg(在source/avatar目錄下)</li>
</ol>
<p>例：avatar: /avatar/avatar.jpg</p>
<h3 id="菜單設定"><a href="#菜單設定" class="headerlink" title="菜單設定"></a>菜單設定</h3><p>在menu裡面可以設定</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Value</th>
<th>Comment</th>
</tr>
</thead>
<tbody><tr>
<td>home</td>
<td>home: /</td>
<td>首頁</td>
</tr>
<tr>
<td>archives</td>
<td>archives: /archives</td>
<td>歸檔</td>
</tr>
<tr>
<td>categories</td>
<td>categories: /categories</td>
<td>分類(需手動建立）</td>
</tr>
<tr>
<td>tags</td>
<td>tags: /tags</td>
<td>標籤(需手動建立）</td>
</tr>
<tr>
<td>about</td>
<td>about: /about</td>
<td>關於(需手動建立）</td>
</tr>
<tr>
<td>commonweal</td>
<td>commonweal: /404.html</td>
<td>404頁面(需手動建立）</td>
</tr>
</tbody></table>
<p>菜單範例</p>
<pre><code>menu:
  home: /
  categories: /categories
  about: /about
  archives: /archives
  tags: /tags
  #commonweal: /404.html</code></pre>
<h3 id="標籤頁面"><a href="#標籤頁面" class="headerlink" title="標籤頁面"></a>標籤頁面</h3><ol>
<li><p>新建頁面</p>
<p> hexo new page “tags”</p>
</li>
<li><p>編輯頁面</p>
</li>
</ol>
<p>編輯剛剛產生的頁面，將類型設為tags</p>
<pre><code>title: index
date: 2014-12-22 12:39:04
type: &quot;tags&quot;
---</code></pre>
<p>像我有使用Disqus功能，預設頁面也會評論，如果不想要的話</p>
<p>要加入comments: false</p>
<pre><code>title: index
date: 2014-12-22 12:39:04
type: &quot;tags&quot;
comments: false
---</code></pre>
<ol start="3">
<li>加入頁面</li>
</ol>
<p>最後編輯_config.yml，添加tags到menu底下</p>
<pre><code>menu:
  home: /
  archives: /archives
  tags: /tags</code></pre>
<h3 id="分類頁面"><a href="#分類頁面" class="headerlink" title="分類頁面"></a>分類頁面</h3><ol>
<li><p>新建頁面</p>
<p> hexo new page “categories”</p>
</li>
<li><p>編輯頁面</p>
</li>
</ol>
<p>編輯剛剛產生的頁面，將類型設為tags</p>
<pre><code>title: index
date: 2014-12-22 12:39:04
type: &quot;categories&quot;
---</code></pre>
<p>像我有使用Disqus功能，預設頁面也會評論，如果不想要的話</p>
<p>要加入comments: false</p>
<pre><code>title: index
date: 2014-12-22 12:39:04
type: &quot;categories&quot;
comments: false
---</code></pre>
<ol start="3">
<li>加入頁面</li>
</ol>
<p>最後編輯_config.yml，添加categories到menu底下</p>
<pre><code>menu:
  home: /
  categories: /categories
  archives: /archives
  tags: /tags</code></pre>
<h3 id="關於頁面"><a href="#關於頁面" class="headerlink" title="關於頁面"></a>關於頁面</h3><ol>
<li><p>新建頁面</p>
<p> hexo new page “about”</p>
</li>
<li><p>加入頁面</p>
</li>
</ol>
<p>最後編輯_config.yml，添加categories到menu底下</p>
<pre><code>menu:
  home: /
  archives: /archives
  tags: /tags
  about: /about</code></pre>
<h3 id="側邊欄社交連結"><a href="#側邊欄社交連結" class="headerlink" title="側邊欄社交連結"></a>側邊欄社交連結</h3><p>新增social，然後添加站點與地址即可</p>
<pre><code># Social links
social:
  github: https://github.com/your-user-name
  twitter: https://twitter.com/your-user-name
  weibo: http://weibo.com/your-user-name
  douban: http://douban.com/people/your-user-name
  zhihu: http://www.zhihu.com/people/your-user-name</code></pre>
<h1 id="新增留言板"><a href="#新增留言板" class="headerlink" title="新增留言板"></a>新增留言板</h1><p>首先先到<a href="https://disqus.com/">Disqus</a>官方網站註冊帳號</p>
<p>然後新增頁面</p>
<p><img src="/2015/10/06/hexo%E7%95%99%E8%A8%80%E8%88%87%E4%B8%BB%E9%A1%8C%E8%A8%AD%E5%AE%9A/hexo%E7%95%99%E8%A8%80%E8%88%87%E4%B8%BB%E9%A1%8C%E8%A8%AD%E5%AE%9A-1.PNG" alt="新增頁面1"></p>
<p><img src="/2015/10/06/hexo%E7%95%99%E8%A8%80%E8%88%87%E4%B8%BB%E9%A1%8C%E8%A8%AD%E5%AE%9A/hexo%E7%95%99%E8%A8%80%E8%88%87%E4%B8%BB%E9%A1%8C%E8%A8%AD%E5%AE%9A-2.PNG" alt="新增頁面2"></p>
<p><img src="/2015/10/06/hexo%E7%95%99%E8%A8%80%E8%88%87%E4%B8%BB%E9%A1%8C%E8%A8%AD%E5%AE%9A/hexo%E7%95%99%E8%A8%80%E8%88%87%E4%B8%BB%E9%A1%8C%E8%A8%AD%E5%AE%9A-3.PNG" alt="新增頁面3"></p>
<p><img src="/2015/10/06/hexo%E7%95%99%E8%A8%80%E8%88%87%E4%B8%BB%E9%A1%8C%E8%A8%AD%E5%AE%9A/hexo%E7%95%99%E8%A8%80%E8%88%87%E4%B8%BB%E9%A1%8C%E8%A8%AD%E5%AE%9A-4.PNG" alt="記下shortname"></p>
<p>最後到<strong>_config.yml</strong>加入</p>
<pre><code># Disqus
    disqus_shortname: gundambox</code></pre>
<p>就大功告成囉</p>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><ol>
<li><p><a href="http://leapwing.github.io/2015/04/23/hexo-setting/">Hexo相關設定</a></p>
</li>
<li><p><a href="http://bbandydd.github.io/hexoBlog/2015/05/13/Hexo-add-Comments/">Hexo 留言板 - Disqus</a></p>
</li>
<li><p><a href="http://theme-next.iissnan.com/five-minutes-setup.html">5 分钟快速安装</a></p>
</li>
<li><p><a href="http://theme-next.iissnan.com/theme-settings.html">主题设定</a></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>安裝數學公式插件</title>
    <url>/2015/10/07/%E5%AE%89%E8%A3%9D%E6%95%B8%E5%AD%B8%E5%85%AC%E5%BC%8F%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p>因為之後可能會用到數學公式，所以就先來安裝囉</p>
<h1 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h1><p>首先是安裝</p>
<pre><code>npm install hexo-math --save</code></pre>
<p>然後在<strong>_config.yml</strong>中加入</p>
<pre><code>plugins:
- hexo-math</code></pre>
<p>話說新版的不需要執行下面這行指令</p>
<pre><code>hexo math install</code></pre>
<p>接下來就來試試看效果如何</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="單行"><a href="#單行" class="headerlink" title="單行"></a>單行</h2><pre><code>$a = b + c$</code></pre>
<p>效果：</p>
<p>$a = b + c$</p>
<h2 id="多行"><a href="#多行" class="headerlink" title="多行"></a>多行</h2><pre><code>$$\frac&#123;\partial u&#125;&#123;\partial t&#125;
= h^2 \left( \frac&#123;\partial^2 u&#125;&#123;\partial x^2&#125; +
\frac&#123;\partial^2 u&#125;&#123;\partial y^2&#125; +
\frac&#123;\partial^2 u&#125;&#123;\partial z^2&#125;\right)$$</code></pre>
<p>效果：</p>
<p>$$\frac{\partial u}{\partial t}<br>= h^2 \left( \frac{\partial^2 u}{\partial x^2} +<br>\frac{\partial^2 u}{\partial y^2} +<br>\frac{\partial^2 u}{\partial z^2}\right)$$</p>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p>1.<a href="http://catx.me/2014/03/09/hexo-mathjax-plugin/">Hexo MathJax插件</a></p>
<p>2.<a href="http://hijiangtao.github.io/2014/09/08/MathJaxinHexo/">Hexo上使用MathJax来实现数学公式的表达</a></p>
<p>3.<a href="http://iori.sinaapp.com/17.html/comment-page-1?replytocom=2">MathJax使用LaTeX语法编写数学公式教程</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>計算機概論-數字系統</title>
    <url>/2015/10/08/%E8%A8%88%E7%AE%97%E6%A9%9F%E6%A6%82%E8%AB%96-%E6%95%B8%E5%AD%97%E7%B3%BB%E7%B5%B1/</url>
    <content><![CDATA[<p>在寫C語言筆記之前，我覺得要先建立一些數字的概念</p>
<p>所以我就挑了大學時候的<a href="http://www.books.com.tw/products/F011353305">計算機概論</a>，擷取一些我覺得重要的地方來講囉</p>
<p>之後會按照順序講</p>
<ul>
<li>數字系統</li>
<li>資料儲存</li>
<li>邏輯運算</li>
</ul>
<p>這篇是講關於數字系統之間的轉換</p>
<h1 id="定義"><a href="#定義" class="headerlink" title="定義"></a>定義</h1><p>這邊只講進位制(positional number system)</p>
<p>一個數字表示為 $ \pm(S_{k-1} \cdots S_{0}.S_{-1} \cdots S_{-l})_{b} $</p>
<p>表示值為 $ N = \pm(S_{k-1}*b^{k-1}+\cdots+S_0*b^0+S_{-1}*b^{-1}+\cdots+S_{-l}*b^{-l}) $</p>
<p>其中<strong>S</strong>表示為數字的集合，<strong>b</strong>是基底(base or radix)</p>
<h1 id="十進位系統"><a href="#十進位系統" class="headerlink" title="十進位系統"></a>十進位系統</h1><p>十進位系統是以10為基底，由0、1、2、3、4、5、6、7、8、9等十個數字組成，逢10就進位</p>
<p>寫法為：$ (5487)_{10} $，但一般會省略基底表示為：$ 5487 $</p>
<h2 id="整數"><a href="#整數" class="headerlink" title="整數"></a>整數</h2><p>十進位整數 $ N $ 可以表示為 $ \pm(S_{k-1}*10^{k-1}+\cdots+S_0*10^0) $</p>
<p>例如 $ 5487 $ 可以表示為 $ 5*10^3+4*10^2+8*10^1+7*10^0 $</p>
<h2 id="浮點數"><a href="#浮點數" class="headerlink" title="浮點數"></a>浮點數</h2><p>十進位浮點數 $ R $ </p>
<p>可以表示為 $ \pm(\overbrace{S_{k-1}*10^{k-1}+\cdots+S_0*10^0}^{Integer\ part}+\overbrace{S_{-1}*10^{-1}+\cdots+S_{-l}*10^{-l}}^{fractional\ part}) $</p>
<p>例如 $ 42689.2 $ 可以表示為 $ 4*10^4+2*10^3+6*10^2+8*10^1+9*10^0+2*10^{-1} $</p>
<h1 id="二進位系統"><a href="#二進位系統" class="headerlink" title="二進位系統"></a>二進位系統</h1><p>二進位系統是以2為基底，由0、1所組成，逢2進位</p>
<p>寫法為$ (101)_2 $</p>
<h2 id="整數-1"><a href="#整數-1" class="headerlink" title="整數"></a>整數</h2><p>二進位整數 $ N $ 可以表示為 $ \pm(S_{k-1}*2^{k-1}+\cdots+S_0*2^0) $</p>
<p>例如 $ (1011)_2 $ 可以表示為 $ 1*2^3+0*2^2+1*2^1+1*2^0 $</p>
<h2 id="浮點數-1"><a href="#浮點數-1" class="headerlink" title="浮點數"></a>浮點數</h2><p>二進位浮點數 $ R $ 可以表示為 $ \pm(\overbrace{S_{k-1}*2^{k-1}+\cdots+S_0*2^0}^{Integer\ part}+\overbrace{S_{-1}*2^{-1}+\cdots+S_{-l}*2^{-l}}^{fractional\ part}) $</p>
<p>例如 $ (101.01)_2 $ 可以表示為 $ 1*2^3+0*2^2+1*2^0+0*2^{-1}+1*2^{-2} $</p>
<h1 id="八進位系統"><a href="#八進位系統" class="headerlink" title="八進位系統"></a>八進位系統</h1><p>八進位系統是以8為基底，由0、1、2、3、4、5、6、7、所組成，逢8進位</p>
<p>寫法為$ (755)_8 $，也可以寫成$ 0755 $</p>
<h2 id="整數-2"><a href="#整數-2" class="headerlink" title="整數"></a>整數</h2><p>八進位整數 $ N $ 可以表示為 $ \pm(S_{k-1}*8^{k-1}+\cdots+S_0*8^0) $</p>
<p>例如 $ (1234)_8 $ 可以表示為 $ 1*8^3+2*8^2+3*8^1+4*8^0 $</p>
<h2 id="浮點數-2"><a href="#浮點數-2" class="headerlink" title="浮點數"></a>浮點數</h2><p>八進位浮點數 $ R $ 可以表示為 $ \pm(\overbrace{S_{k-1}*8^{k-1}+\cdots+S_0*8^0}^{Integer\ part}+\overbrace{S_{-1}*8^{-1}+\cdots+S_{-l}*8^{-l}}^{fractional\ part}) $</p>
<p>例如 $ (765.67)_8 $ 可以表示為 $ 7*8^3+6*8^2+5*8^0+6*8^{-1}+7*8^{-2} $</p>
<h1 id="十六進位系統"><a href="#十六進位系統" class="headerlink" title="十六進位系統"></a>十六進位系統</h1><p>十六進位系統是以16為基底</p>
<p>由0、1、2、3、4、5、6、7、8、9、A(10)、B(11)、C(12)、D(13)、E(14)、F(15)所組成，逢16進位</p>
<p>寫法為$ (FF)_{16} $，也可以寫成$ 0xFF $</p>
<h2 id="整數-3"><a href="#整數-3" class="headerlink" title="整數"></a>整數</h2><p>十六進位整數 $ N $ 可以表示為 $ \pm(S_{k-1}*16^{k-1}+\cdots+S_0*16^0) $</p>
<p>例如 $ (FE98)_{16} $ 可以表示為 $ 15*16^3+14*16^2+9*16^1+8*16^0 $</p>
<h2 id="浮點數-3"><a href="#浮點數-3" class="headerlink" title="浮點數"></a>浮點數</h2><p>十六進位浮點數 $ R $ 可以表示為 </p>
<p>$ \pm(\overbrace{S_{k-1}*16^{k-1}+\cdots+S_0*16^0}^{Integer\ part}+\overbrace{S_{-1}*16^{-1}+\cdots+S_{-l}*16^{-l}}^{fractional\ part}) $</p>
<p>例如 $ (ABC.DEF)_{16} $ 可以表示為 </p>
<p>$ 10*16^3+11*16^2+12*16^0+13*16^{-1}+14*16^{-2}+15*16{-3} $</p>
<h1 id="進制轉換"><a href="#進制轉換" class="headerlink" title="進制轉換"></a>進制轉換</h1><h2 id="其他進位轉十進位"><a href="#其他進位轉十進位" class="headerlink" title="其他進位轉十進位"></a>其他進位轉十進位</h2><p>任何進位要轉成十進位很簡單，轉換方法為</p>
<p>$ N = S_{k-1}*b^{k-1}+\cdots+S_0*b^0+S_{-1}*b^{-1}+\cdots+S_{-l}*b^{-l} $ </p>
<p>例1<br>$$ \begin{split}<br>&amp;(110.11)_{2} \\<br>&amp;= 1*2^2+1*2^1+0*2^0+1*2^{-1}+1*2^{-2} \\<br>&amp;= 4+2+0+0.5+0.25 = 0.75<br>\end{split} $$</p>
<p>例2<br>$$ \begin{split}<br>&amp;(1A.23)_{16} \\<br>&amp;= 1*16^1+10*16^0+2*16^{-1}+3*16^{-2} \\<br>&amp;= 16+10+0.125+0.012 = 26.137 \\<br>\end{split} $$</p>
<h2 id="十進位轉其他進位"><a href="#十進位轉其他進位" class="headerlink" title="十進位轉其他進位"></a>十進位轉其他進位</h2><h3 id="整數部分"><a href="#整數部分" class="headerlink" title="整數部分"></a>整數部分</h3><ol>
<li>轉二進位</li>
</ol>
<p>$$ \begin{split}<br>2|\underline{35}&amp; \rightarrow 餘數 1 \\<br>2|\underline{17}&amp; \rightarrow 餘數 1 \\<br>2|\underline{8}&amp; \rightarrow 餘數 0 \\<br>2|\underline{4}&amp; \rightarrow 餘數 0 \\<br>2|\underline{2}&amp; \rightarrow 餘數 0 \\<br>1&amp; \rightarrow 餘數 1<br>\end{split} $$</p>
<p>然後由下到上取出餘數，也就是100011，就可以得到$ (35)_{10} = (100011)_{2} $了 </p>
<ol start="2">
<li>轉八進位<br>$$ \begin{split}<br>8|\underline{126}&amp; \rightarrow 餘數 6 $ \\<br>8|\underline{15}&amp; \rightarrow 餘數 7 $ \\<br>1&amp; \rightarrow 餘數 1<br>\end{split} $$</li>
</ol>
<p>然後由下到上取出餘數，也就是176，就可以得到$ (126)_{10} = (176)_{8} $了 </p>
<ol start="3">
<li>轉十六進位<br>$$ \begin{split}<br>16|\underline{126}&amp; \rightarrow 餘數 E(14) \\<br>16|\underline{7}&amp; \rightarrow 餘數 7 \\<br>0&amp;<br>\end{split} $$</li>
</ol>
<p>然後由下到上取出餘數，也就是E7，就可以得到$ (126)_{10} = (E7)_{16} $了 </p>
<h3 id="浮點數部分"><a href="#浮點數部分" class="headerlink" title="浮點數部分"></a>浮點數部分</h3><ol>
<li>轉二進位<br>$$ \begin{split}<br>&amp;0.625 \\<br>*&amp;\underline{\ \ \ \ \ \ \ 2} \\<br>&amp;1.250 \rightarrow 取出1 \\<br>&amp;0.250 \\<br>*&amp;\underline{\ \ \ \ \ \ \ 2} \\<br>&amp;0.500 \rightarrow 取出0 \\<br>*&amp;\underline{\ \ \ \ \ \ \ 2} \\<br>&amp;1.000 \rightarrow 取出1<br>\end{split} $$</li>
</ol>
<p>然後由上到下取出數字，也就是101，就可以得到$ (0.625)_{10} = (0.101)_2 $了</p>
<ol start="2">
<li>轉八進位<br>$$ \begin{split}<br>&amp;0.171875 \\<br>*&amp;\underline{\ \ \ \ \ \ \ \ \ \ \ \ \ 8} \\<br>&amp;1.375000 \rightarrow 取出1 \\<br>&amp;0.375000 \\<br>*&amp;\underline{\ \ \ \ \ \ \ \ \ \ \ \ \ 8} \\<br>&amp;3.000000 \rightarrow 取出3 \\<br>\end{split} $$</li>
</ol>
<p>然後由上到下取出數字，也就是13，就可以得到$ (0.171875)_{10} = (0.13)_8 $了</p>
<ol start="3">
<li>轉十六進位<br>$$ \begin{split}<br>&amp;\ \ 0.89453125 \\<br>*&amp;\underline{\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 16} \\<br>&amp;14.31250000 \rightarrow 取出E(14) \\<br>&amp;0.312500000 \\<br>*&amp;\underline{\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 16} \\<br>&amp;5.000000000 \rightarrow 取出5 \\<br>\end{split} $$</li>
</ol>
<p>然後由上到下取出數字，也就是E5，就可以得到$ (0.89453125)_{10} = (0.E5)_16 $了</p>
<p><strong>小數從十進位轉到其他進位有可能會產生無限循環的小數，例如</strong> $ (0.1)_{10} = (0.1\overline{99})_{16} $</p>
<h2 id="二進位轉十六進位"><a href="#二進位轉十六進位" class="headerlink" title="二進位轉十六進位"></a>二進位轉十六進位</h2><h3 id="整數-4"><a href="#整數-4" class="headerlink" title="整數"></a>整數</h3><p>由右往左，每四個位元轉成十六進位，如果位數不是四的倍數，則在數字前面補零</p>
<p>例如$ (1010101010)_2 $：$ (\overbrace{0010}^{2}\overbrace{1010}^{A}\overbrace{1010}^{A})_2 $</p>
<p>反過來就是將每位數字從十六進位轉為二進位，然後將結果連接起來</p>
<p>例如$ (12)_{16} $：$ (\overbrace{1}^{0001}\overbrace{2}^{0010})_{16} $</p>
<h3 id="浮點數-4"><a href="#浮點數-4" class="headerlink" title="浮點數"></a>浮點數</h3><p>由左往右，每四個位元轉成十六進位，如果位數不是四的倍數，則在數字後面補零</p>
<p>例如$ (0.01111)_2 $：$ (0.\overbrace{0111}^{7}\overbrace{1000}^{8})_2 $</p>
<p>反過來就是將每位數字從十六進位轉為二進位，然後將結果連接起來</p>
<p>例如$ (0.5A)_{16} $：$ (\overbrace{5}^{0101}\overbrace{A}^{1010})_{16} $</p>
<h2 id="二進位轉八進位"><a href="#二進位轉八進位" class="headerlink" title="二進位轉八進位"></a>二進位轉八進位</h2><h3 id="整數-5"><a href="#整數-5" class="headerlink" title="整數"></a>整數</h3><p>由右往左，每三個位元轉成八進位，如果位數不是三的倍數，則在數字前面補零</p>
<p>例如$ (1010101)_2 $：$ (\overbrace{001}^{1}\overbrace{010}^{2}\overbrace{101}^{5})_8 $</p>
<p>反過來就是將每位數字從八進位轉為二進位，然後將結果連接起來</p>
<p>例如$ (34)_{8} $：$ (\overbrace{3}^{011}\overbrace{4}^{100})_{8} $</p>
<h3 id="浮點數-5"><a href="#浮點數-5" class="headerlink" title="浮點數"></a>浮點數</h3><p>由左往右，每三個位元轉成八進位，如果位數不是三的倍數，則在數字後面補零</p>
<p>例如$ (0.0111)_2 $：$ (0.\overbrace{011}^{3}\overbrace{100}^{4})_2 $</p>
<p>反過來就是將每位數字從十六進位轉為二進位，然後將結果連接起來</p>
<p>例如$ (0.57)_{8} $：$ (\overbrace{5}^{101}\overbrace{7}^{111})_{8} $</p>
<h2 id="八進位轉十六進位"><a href="#八進位轉十六進位" class="headerlink" title="八進位轉十六進位"></a>八進位轉十六進位</h2><p>其實就把八進位轉成二進位再轉成十六進位而已XD</p>
]]></content>
      <categories>
        <category>計算機概論</category>
      </categories>
      <tags>
        <tag>計算機概論</tag>
      </tags>
  </entry>
  <entry>
    <title>計算機概論-資料儲存</title>
    <url>/2015/10/13/%E8%A8%88%E7%AE%97%E6%A9%9F%E6%A6%82%E8%AB%96-%E8%B3%87%E6%96%99%E5%84%B2%E5%AD%98/</url>
    <content><![CDATA[<p>講完了數字系統，這一篇是講關於資料儲存，我挑了數字來講，其他的我覺得書本看過去就好。</p>
<h1 id="在電腦裡面的資料"><a href="#在電腦裡面的資料" class="headerlink" title="在電腦裡面的資料"></a>在電腦裡面的資料</h1><p>位元(bit)是電腦儲存資料的最小單位，數值為0或1</p>
<p>每八個位元為一個位元組(byte)</p>
<h1 id="儲存數字"><a href="#儲存數字" class="headerlink" title="儲存數字"></a>儲存數字</h1><h2 id="整數"><a href="#整數" class="headerlink" title="整數"></a>整數</h2><h3 id="無號整數"><a href="#無號整數" class="headerlink" title="無號整數"></a>無號整數</h3><p>無號整數是大於等於零的整數，範圍是零到無限大</p>
<p>但是電腦的儲存空間有限，所以數字會有表達範圍</p>
<p>假如電腦能儲存的空間有n位元，那就表示電腦能表達的最大數字為 $ 2^n-1 $</p>
<p>那麼在電腦中是如何儲存n位元的無號整數的呢</p>
<ul>
<li>將數字轉為二進位</li>
<li>如果不滿n位元，則在前面補零</li>
</ul>
<p>例如：將7儲存為8位元的無號整數</p>
<ul>
<li>轉為二進位為 $ (111)_2 $</li>
<li>在前面補零到八個位元為止 $ (00000111)_2 $</li>
</ul>
<p>如果將兩個整數相加但相加結果超出n位元的表達範圍(邊界)，稱之為<strong>overflow</strong></p>
<p>例如在8位元下</p>
<p>$ (11111111)_2+(00000001)_2 $ 應該等於 $ (100000000)_2 $</p>
<p>但是空間只有8位元的情況下</p>
<p>第九個位元會被捨去</p>
<p>就會使結果變成 $ (00000000)_2 $</p>
<h3 id="有號整數-sign-and-magnitude"><a href="#有號整數-sign-and-magnitude" class="headerlink" title="有號整數(sign-and-magnitude)"></a>有號整數(sign-and-magnitude)</h3><p>那怎麼表達正負號呢</p>
<p>於是就定義了最前面(最左邊)的位元來表示正負號</p>
<p>0表示正號，1表示負號</p>
<p>雖然在n位元下，能表達的數字範圍少了一半，但總算能表達正負號了</p>
<p>例1：28存為8位元有號整數時</p>
<ul>
<li>先轉為二進位 $ (11100)_2 $</li>
<li>補零補到七位元 $ (0011100)_2 $</li>
<li>視正負號補上第八位元 $ (00011100)_2 $</li>
</ul>
<p>例2：-28存為8位元有號整數時</p>
<ul>
<li>先轉為二進位 $ (11100)_2 $</li>
<li>補零補到七位元 $ (0011100)_2 $</li>
<li>視正負號補上第八位元 $ (10011100)_2 $</li>
</ul>
<p>在這邊overflow仍然是存在的</p>
<p><strong>注意</strong>：這種做法會有正零跟負零喔出現喔</p>
<h3 id="二補數"><a href="#二補數" class="headerlink" title="二補數"></a>二補數</h3><p>雖然解決了表達正負號的問題，但電路上的實作卻遇到一個問題</p>
<p>加法跟減法需要分開實作，於是就有人想了，能不能兼具實作方便又能表達正負數</p>
<p>於是就有了二補數，做法為：</p>
<ul>
<li>將數字做一補數</li>
<li>將數字加1</li>
</ul>
<p>何謂一補數呢？只要將原數字的二進位反轉就是一補數了</p>
<p>例如8位元下， $ (00000101)_2 $ 的一補數是 $ (11111010)_2 $</p>
<p>而 $ (5)_{10} = (00000101)_2 $ 的二補數就是 $ (11111010)_2 $ 再加1，變成 $ (-5)_{10} = (11111011)_2 $</p>
<p>到底為什麼二補數可以讓減法用加法解決呢</p>
<p>例如 $ 1-1=0 $，我們可以將減法當作加上一個負值，變成 $ 1+(-1)=0 $</p>
<p>來檢驗一下這條算式是不是對的</p>
<p>1為 $ (00000001)_2 $，-1為 $ (11111111)_2 $</p>
<p>兩個相加等於 $ (100000000)_2 $，但是第九個位元會被捨去</p>
<p>所以就變成了 $ (00000000)_2 $</p>
<p>又例如 $ 5-4=5+(-4)=(00000101)_2+(11111100)_2=(100000001)_2 $</p>
<p>去掉第九位元之後就變成 $ (00000001)_2=(1)_{10} $</p>
<h2 id="浮點數"><a href="#浮點數" class="headerlink" title="浮點數"></a>浮點數</h2><h3 id="正規化與IEEE標準"><a href="#正規化與IEEE標準" class="headerlink" title="正規化與IEEE標準"></a>正規化與IEEE標準</h3><p>在儲存浮點數前，要先將二進位數字化為適當的科學記號，也就是正規化，然後按照IEEE訂的標準儲存</p>
<p>正規化就是將數字轉為 $ 1.xxxxx*2^{exp} $ 的形式</p>
<p>例如 $ (0.000000101001)_2 $ 要化為 $ 1.01001*2^7 $</p>
<p>然後我們可以得到三個部分</p>
<ul>
<li>Sign (正負號)</li>
<li>Exponent (指數)</li>
<li>Mantissa (尾數)</li>
</ul>
<p>舉 $ 1.01001*2^7 $ 為例，Sign就是+，Exponent為7，Mantissa為01001</p>
<p>取出這三個部分後，就可以按照IEEE標準儲存浮點數了</p>
<p>IEEE規定32位元浮點數的Sign為1位元，Exponent為8位元，Mantissa為23位元</p>
<p>64位元浮點數的Sign為1位元，Exponent為11位元，Mantissa為52位元</p>
<p>其中Exponent不是用二補數儲存，而是採用無號整數</p>
<p>負數均位移 $ 2^{Exponent-1}-1 $，也就是加 $ 2^{Exponent-1}-1 $</p>
<p>例如1位移之後變128，-1位移之後變126</p>
<p>儲存浮點數的步驟：</p>
<ul>
<li>確認正負號 (0 or 1)</li>
<li>將數字轉成二進位</li>
<li>正規化</li>
<li>找出Exponent與Mantissa</li>
<li>將結果連接起來</li>
</ul>
<p>例如-0.0234375：</p>
<ul>
<li>確認正負號：1</li>
<li>將數字轉為二進位：$ (0.0000011)_2 $</li>
<li>正規化：$ (1.1)_2*2^{-6} $ </li>
<li>找出Exponent與Mantissa：$ E=-6+127=121=(01111001)_2 $ 且 $ M=(1)_2 $</li>
<li>將結果連接起來：$ \overbrace{1}^{Sign}\overbrace{01111001}^{Exponent}\overbrace{10000000000000000000000}^{Mantissa} $</li>
</ul>
<p>有一個特別情況是數字為0的時候</p>
<p>不是00111111100000000000000000000000</p>
<p>也不是10111111100000000000000000000000喔XD</p>
<p>IEEE有特別規定所有位元為0的時候表示數字為0</p>
<h3 id="overflow-and-underflow"><a href="#overflow-and-underflow" class="headerlink" title="overflow and underflow"></a>overflow and underflow</h3><p>overflow之前就談過了</p>
<p>如果你試圖存取超過 $ \pm(1.11111111111111111111111)_2*2^{128} $ 的數字</p>
<p>記憶體就會炸裂給你看www</p>
<p>underflow是指試圖存取比範圍更小的數字</p>
<p>也就是 $ \pm(0.00000000000000000000001)_2*2^{-127} $</p>
<h3 id="截斷誤差"><a href="#截斷誤差" class="headerlink" title="截斷誤差"></a>截斷誤差</h3><p>如果你試圖將一個極大一個極小的數字相加就會產生截斷誤差</p>
<p>例如 $ (11111111111111111111.11)_2+(0.00000000000000000000001)_2 $</p>
<p>結果應該是 $ (11111111111111111111.11000000000000000000001)_2 $</p>
<p>正規化後變成 $ (1.111111111111111111111000000000000000000001)_2*2^{19} $</p>
<p>但是在儲存的時候，尾數只有23位元</p>
<p>也就是11111111111111111111100會被儲存，最後的1卻不見了</p>
<p>所以在做浮點數運算的時候要非常小心</p>
]]></content>
      <categories>
        <category>計算機概論</category>
      </categories>
      <tags>
        <tag>計算機概論</tag>
      </tags>
  </entry>
  <entry>
    <title>計算機概論-邏輯運算</title>
    <url>/2015/10/15/%E8%A8%88%E7%AE%97%E6%A9%9F%E6%A6%82%E8%AB%96-%E9%82%8F%E8%BC%AF%E9%81%8B%E7%AE%97/</url>
    <content><![CDATA[<p>這篇是講關於邏輯運算的一些觀念</p>
<h1 id="邏輯運算"><a href="#邏輯運算" class="headerlink" title="邏輯運算"></a>邏輯運算</h1><h2 id="NOT"><a href="#NOT" class="headerlink" title="NOT"></a>NOT</h2><p>NOT運算子是一元運算子，只有一個輸入，輸出與輸入相反的值</p>
<p>輸入0就會輸出1，輸入1就會輸出0</p>
<p>truth table：</p>
<table>
<thead>
<tr>
<th>x</th>
<th>NOT x</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
</tr>
</tbody></table>
<p>擴展到n bits之後就可以做一補數運算了www</p>
<p>例如：NOT 10011000 = 01100111</p>
<h2 id="AND"><a href="#AND" class="headerlink" title="AND"></a>AND</h2><p>AND運算子是二元運算子，有兩個輸入</p>
<p>只有兩個輸入同時為1的時候才會輸出1，其他輸出0</p>
<p>truth table：</p>
<table>
<thead>
<tr>
<th>x</th>
<th>y</th>
<th>x AND y</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody></table>
<p>擴展到n bits之後可以用來做unset(強制設為0)</p>
<p>例如10100110 AND 00000111 = 00000110</p>
<h2 id="OR"><a href="#OR" class="headerlink" title="OR"></a>OR</h2><p>OR運算子是二元運算子，有兩個輸入</p>
<p>只要其中一個輸入為1就會輸出1，其他輸出0</p>
<p>truth table：</p>
<table>
<thead>
<tr>
<th>x</th>
<th>y</th>
<th>x OR y</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody></table>
<p>擴展到n bits之後可以設定特定位元為1</p>
<p>例如10100110 OR 11111000 = 11111110</p>
<h2 id="XOR"><a href="#XOR" class="headerlink" title="XOR"></a>XOR</h2><p>XOR運算子是二元運算子(念作exclusive-or)，有兩個輸入</p>
<p>兩個輸入不一樣的時候才會輸出1，其他輸出0</p>
<p>XOR其實是由前三個運算組合起來的</p>
<p>$ x\ XOR\ y\leftrightarrow[x\ AND\ (NOT\ y)]\ OR\ [(NOT\ x)\ AND\ y] $</p>
<p>truth table：</p>
<table>
<thead>
<tr>
<th>x</th>
<th>y</th>
<th>x XOR y</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
</tbody></table>
<p>擴展到n bits之後可以用來反轉特定位元</p>
<p>例如10100110 OR 11111000 = 01011110</p>
<h1 id="位移運算"><a href="#位移運算" class="headerlink" title="位移運算"></a>位移運算</h1><h2 id="邏輯位移"><a href="#邏輯位移" class="headerlink" title="邏輯位移"></a>邏輯位移</h2><ul>
<li>右移</li>
</ul>
<p>所有位元都往右移一位，捨棄最右邊的位元，最左邊的位元填上0</p>
<p>例如10011000右移一位之後變成01001100</p>
<ul>
<li>左移</li>
</ul>
<p>所有位元都往左移一位，捨棄最左邊的位元，最右邊的位元填上0</p>
<p>例如10011000左移一位之後變成00110000</p>
<h2 id="循環位移"><a href="#循環位移" class="headerlink" title="循環位移"></a>循環位移</h2><ul>
<li>右移</li>
</ul>
<p>所有位元都往右移一位，最右邊的位元補到最左邊的位元</p>
<p>例如10011001右移一位之後變成11001100</p>
<ul>
<li>左移</li>
</ul>
<p>所有位元都往左移一位，捨棄最左邊的位元補到最右邊的位元</p>
<p>例如10011001左移一位之後變成00110011</p>
<h2 id="算術位移"><a href="#算術位移" class="headerlink" title="算術位移"></a>算術位移</h2><ul>
<li>右移</li>
</ul>
<p>所有位元都往右移一位，捨棄最右邊的位元，最左邊的位元填上原本的位元(保持原本的正負號)</p>
<p>例如10011000右移一位之後變成11001100</p>
<ul>
<li>左移</li>
</ul>
<p>所有位元都往左移一位，捨棄最左邊的位元，最右邊的位元填上0</p>
<p>例如10011000左移一位之後變成00110000</p>
<h1 id="算術運算"><a href="#算術運算" class="headerlink" title="算術運算"></a>算術運算</h1><h2 id="整數-二補數-的加減法"><a href="#整數-二補數-的加減法" class="headerlink" title="整數(二補數)的加減法"></a>整數(二補數)的加減法</h2><p>整數(二補數)運算的過程：</p>
<p>$ A \pm B=? $</p>
<ol>
<li>判斷是加法或減法</li>
<li>若為減法則做二補數</li>
<li>相加</li>
</ol>
<p>例1：A=$ (00010001)_2 $,B=$ (00010110)_2 $</p>
<p>A+B=?</p>
<ol>
<li>判斷是加法或減法：加法</li>
<li>若為減法則做二補數：跳過</li>
<li>相加<br>$$ \begin{split}<br>&amp;\ \ \ \ 1\ \ \ \ \ \ \ \ \ \ \ \ Carry(進位) \\<br>&amp;00010001\ A \\</li>
</ol>
<p>+&amp;\underline{00010110}\ B \\<br>&amp;00100111\ R(結果)<br>\end{split} $$</p>
<p>我們得到 (+17) + (+22) = (+39)</p>
<p>例2：A=$ (11011101)_2 $,B=$ (00010100)_2 $</p>
<p>A-B=?</p>
<ol>
<li>判斷是加法或減法：減法</li>
<li>若為減法則做二補數：$ (00010100)_2 $ 的二補數 $ (11101100)_2 $</li>
<li>相加<br>$$ \begin{split}<br>1&amp;11111\ \ \ \ \ \ \ Carry(進位) \\<br>&amp;11011101\ A \\</li>
</ol>
<p>+&amp;\underline{00010100}\ (\overline{B}+1) \\<br>&amp;11001001\ R(結果)<br>\end{split} $$</p>
<p>我們得到 (-35) - (+20) = (-55)</p>
<h2 id="整數-sign-and-magnitude-的加減法"><a href="#整數-sign-and-magnitude-的加減法" class="headerlink" title="整數(sign-and-magnitude)的加減法"></a>整數(sign-and-magnitude)的加減法</h2><p>整數(sign-and-magnitude)運算的過程：</p>
<p>$ A \pm B=? $</p>
<ol>
<li>判斷是加法或減法</li>
<li>若為減法則將 $ B_{Sign} $ 做NOT運算</li>
<li>指定S為 $ A_{Sign}\ XOR\ B_{Sign} $</li>
<li>若S等於1跳到第5步驟，否則跳到第6步驟</li>
<li><ol>
<li>$ R_{Magnitude} \leftarrow A_{Magnitude}+(\overline{B_{Magnitude}}+1) $</li>
<li>檢查是否overflow</li>
<li>如果overflow，$ R_{Sign} \leftarrow A_{Sign} $，然後結束，如果沒有跳到下一步驟</li>
<li>$ R_{Magnitude} \leftarrow (\overline{R_{Magnitude}}+1) $</li>
<li>$ R_{Sign} \leftarrow B_{Sign} $</li>
</ol>
</li>
<li><ol>
<li>$ R_{Magnitude} \leftarrow A_{Magnitude}+B_{Magnitude} $</li>
<li>檢查是否overflow</li>
<li>如果overflow，回到overflow然後結束，如果沒有跳到下一步驟</li>
<li>$ R_{Sign} \leftarrow A_{Sign} $</li>
</ol>
</li>
</ol>
<p>例1：A=$ (00010001)_2 $,B=$ (00010110)_2 $</p>
<p>A+B=?</p>
<ol>
<li>判斷是加法或減法：加法</li>
<li>若為減法則將 $ B_{Sign} $ 做NOT運算：跳過</li>
<li>指定S為 $ A_{Sign}\ XOR\ B_{Sign} $：S=0</li>
<li><ol>
<li>$ R_{Magnitude} \leftarrow A_{Magnitude}+B_{Magnitude} $：$ R_{Magnitude}=0100111 $</li>
<li>檢查是否overflow</li>
<li>如果overflow，回到overflow然後結束，如果沒有跳到下一步驟</li>
<li>$ R_{Sign} \leftarrow A_{Sign} $：$ R_{Sign}=0 $</li>
</ol>
</li>
</ol>
<p>這樣就得到結果 $ (+17)+(22)=(00100111)_2=(+39) $</p>
<p>例2：A=$ (00010001)_2 $,B=$ (10010110)_2 $</p>
<p>A+B=?</p>
<ol>
<li>判斷是加法或減法：加法</li>
<li>若為減法則將 $ B_{Sign} $ 做NOT運算：跳過</li>
<li>指定S為 $ A_{Sign}\ XOR\ B_{Sign} $：S=1</li>
<li>$ R_{Magnitude} \leftarrow A_{Magnitude}+(\overline{B_{Magnitude}}+1) $：$$ \begin{split}<br>No\ overflow\ \ \ \ \ \ &amp;\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Carry(進位) \\<br>A_{Sign}\ 0\ \ \ \ \ \ &amp;0010001\ A_{Magnitude} \\<br>B_{Sign}\ 1\ \ +&amp;\underline{1101010}\ (\overline{B_{Magnitude}}+1) \\<br>&amp;1111011\ R_{Magnitude} \\<br>R_{Sign}\ 1\ \ \ \ \ \ &amp;0000101\ R_{Magnitude}= (\overline{R_{Magnitude}}+1) \\<br>\end{split} $$</li>
</ol>
<p>這樣就得到結果 $ (+17)+(-22)=(10000101)_2=(-5) $</p>
<p>例3：A=$ (11010001)_2 $,B=$ (10010110)_2 $</p>
<p>A-B=?</p>
<ol>
<li>判斷是加法或減法：減法</li>
<li>若為減法則將 $ B_{Sign} $ 做NOT運算</li>
<li>指定S為 $ A_{Sign}\ XOR\ B_{Sign} $：S=1</li>
<li><ol>
<li>$ R_{Magnitude} \leftarrow A_{Magnitude}+(\overline{B_{Magnitude}}+1) $：$ R_{Magnitude}=(0111011)_2 $</li>
<li>檢查是否overflow</li>
<li>如果overflow，$ R_{Sign} \leftarrow A_{Sign} $，然後結束：$ R_{Sign}=1 $</li>
</ol>
</li>
</ol>
<p>這樣就得到結果 $ (-81)+(-22)=(10111011)_2=(-59) $</p>
<h2 id="浮點數的加減法"><a href="#浮點數的加減法" class="headerlink" title="浮點數的加減法"></a>浮點數的加減法</h2><p>$ A \pm B=? $</p>
<p>浮點數運算的過程：</p>
<ol>
<li>如果其中一個數字為0，運算結果就為另一個數字</li>
<li>檢查是加法或減法</li>
<li>如果是減法，把 $ B_{Sign} $ 做NOT運算</li>
<li>將兩個數字去正規化(在尾數前面加個1 www)</li>
<li>將指數較小的數字累乘，並向右位移</li>
<li>將兩數相加(sign-and-magnitude)</li>
<li>檢查有沒有overflow</li>
<li>如果有overflow就將尾數右移，指數加一</li>
<li>正規化</li>
<li>如果需要捨去尾數則捨去</li>
</ol>
<p>例1：</p>
<p>A=$ (0\ 10000001\ 01110000000000000000000)_2 $<br>B=$ (0\ 10000110\ 01000011110000000000000)_2 $</p>
<p>A+B=?</p>
<ol>
<li>如果其中一個數字為0，運算結果就為另一個數字：跳過</li>
<li>檢查是加法或減法：加法</li>
<li>如果是減法，把 $ B_{Sign} $ 做NOT運算：跳過</li>
<li>將兩個數字去正規化(在尾數前面加個1 www)：</li>
</ol>
<p>$ A_{Mantissa}=(101110000000000000000000)_2 $<br>$ B_{Mantissa}=(101000011110000000000000)_2 $</p>
<ol start="5">
<li>將指數較小的數字累乘，並向右位移</li>
</ol>
<p>A較小，指數加五，尾數右移五位</p>
<p>A_{Mantissa}=(000001011100000000000000) $</p>
<ol start="6">
<li>將兩數相加(sign-and-magnitude)</li>
</ol>
<p>R_{Mantissa}=(101001111010000000000000)_2</p>
<ol start="7">
<li>檢查有沒有overflow</li>
<li>如果有overflow就將尾數右移，指數加一：沒有</li>
<li>正規化</li>
</ol>
<p>$ R=(0\ 10000110\ 101001111010000000000000)_2 $</p>
<ol start="10">
<li>如果需要捨去尾數則捨去：跳過</li>
</ol>
<p>這樣就得到結果$ R=(010000110101001111010000000000000)_2 $</p>
<p>例2：</p>
<p>A=$ (0\ 10000001\ 01110000000000000000000)_2 $<br>B=$ (1\ 10000001\ 11000001100000000000000)_2 $</p>
<p>A-B=?</p>
<ol>
<li>如果其中一個數字為0，運算結果就為另一個數字：跳過</li>
<li>檢查是加法或減法：減法</li>
<li>如果是減法，把 $ B_{Sign} $ 做NOT運算</li>
<li>將兩個數字去正規化(在尾數前面加個1 www)</li>
</ol>
<p>$ A_{Mantissa}=(101110000000000000000000)_2 $<br>$ B_{Mantissa}=(111000001100000000000000)_2 $</p>
<ol start="5">
<li>將指數較小的數字累乘，並向右位移：兩數指數一樣，跳過</li>
<li>將兩數相加(sign-and-magnitude)：</li>
</ol>
<p>$ R_{Sign}=(1)_2 $<br>$ R_{Mantissa}=(1010100011000000000000000)_2 $</p>
<ol start="7">
<li>檢查有沒有overflow：有</li>
<li>如果有overflow就將尾數右移，指數加一</li>
</ol>
<p>$ R_{Exponent}={10000010}_2 $<br>$ R_{Mantissa}=(0010100011000000000000000)_2 $</p>
<ol start="9">
<li>正規化</li>
</ol>
<p>$ R=(1\ 10000010\ 001010001100000000000000)_2 $</p>
<ol start="10">
<li>如果需要捨去尾數則捨去</li>
</ol>
<p>$ R=(1\ 10000010\ 00101000110000000000000)_2 $</p>
]]></content>
      <categories>
        <category>計算機概論</category>
      </categories>
      <tags>
        <tag>計算機概論</tag>
      </tags>
  </entry>
  <entry>
    <title>C語言-Hello World</title>
    <url>/2015/10/17/C%E8%AA%9E%E8%A8%80-Hello-World/</url>
    <content><![CDATA[<h1 id="C語言歷史"><a href="#C語言歷史" class="headerlink" title="C語言歷史"></a>C語言歷史</h1><p>以下資料均出自維基百科</p>
<ul>
<li><p>1969 ~ 1973年：C語言最早由丹尼斯·里奇（Dennis Ritchie）為了在PDP-11電腦上運行的Unix系統所設計出來的程式語言。C源於BCPL語言，後者由馬丁·理察德（Martin Richards）於1967年左右設計實作。BCPL是一門”沒有資料類性”的程式語言：它僅能操作一種資料類型，即機器字（machine word）。</p>
</li>
<li><p>1970年，肯·湯普遜為執行在PDP-7上的首個Unix系統設計了一個精簡版的BCPL，這個語言被稱為B語言，它也是沒有資料類性的。Unix最早運行在PDP-7上，是以組合語言寫成。在PDP-11出現後，丹尼斯·里奇與肯·湯普遜著手將Unix移植到PDP-11上，無類型的語言在PDP-11上愈發顯得合適。PDP-11提供了多種不同規格大小的基本物件：一位元組長的字符，兩位元組長的整型數以及四位元組長的浮點數。B語言無法處理這些不同規格大小的物件，也沒有提供單獨的操作符去操作它們。C語言最初嘗試通過向B語言中增加資料類型的想法來處理那些不同類型的資料。和大多數語言一樣，在C中，每個物件都有一個類型以及一個值；類型決定了可用於值的操作的含義，以及物件占用的儲存空間大小。</p>
</li>
<li><p>1973年，Unix作業系統的核心正式用C語言改寫，這是C語言第一次應用在作業系統的核心編寫上。</p>
</li>
<li><p>1975年C語言開始移植到其他機器上使用。史蒂芬·強生實作了一套「可移植編譯器」，這套編譯器修改起來相對容易，並且可以為不同的機器生成代碼。從那時起，C在大多數電腦上被使用，從最小的微型電腦到與CRAY-2超級電腦。C語言很規範，即使沒有一份正式的標準，你也可以寫出C程式，這些程式無須修改就可以執行在任何支援C語言和最小執行時環境的電腦上。C最初在小型機器上實作，並且繼承了一系列小語種程式語言的特點；與功能相比，C的設計者更傾向於簡單和優雅。此外，從一開始，C語言就是為系統級編程而設計，程式的執行效率至關重要，因此，C語言與真實機器能力的良好匹配也就不足為奇。例如，C語言為典型硬體所直接支援的物件：字符，整數（也許有多種大小），以及浮點數（同樣可能有多種大小）提供了相應的基本資料類型。</p>
</li>
<li><p>1978年，丹尼斯·里奇和布萊恩·柯林漢合作出版了《C程式設計語言》的第一版。書中介紹的C語言標準也被C語言程式設計師稱作「K&amp;R C」，第二版的書中也包含了一些ANSI C的標準。即使在後來ANSI C標準被提出的許多年後，K&amp;R C仍然是許多編譯器的最低標準要求，許多老舊的編譯仍然運行K&amp;R C的標準。</p>
</li>
<li><p>1989年，C語言被美國國家標準協會（ANSI）標準化，編號為ANSI X3.159-1989。這個版本又稱為C89。標準化的一個目的是擴充功能K&amp;R C，增加了一些新特性。</p>
</li>
<li><p>1990年，國際標準化組織（ISO）成立 ISO/IEC JTC1/SC22/WG14 工作群組，來規定國際標準的C語言，通過對ANSI標準的少量修改，最終製定了 ISO 9899:1990，又稱為C90。隨後，ANSI亦接受國際標準C，並不再發展新的C標準。</p>
</li>
<li><p>2000年，採用1999年ISO 9899:1999的發表，稱為C99</p>
</li>
<li><p>2011年，ISO正式發行了新的C語言的新標準C11，之前被稱為C1X，官方名稱為ISO/IEC 9899:2011。</p>
</li>
</ul>
<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><p>學一個語言就是要先學它的髒話，所以我們要講說C語言的髒話。</p>
<p>讓我們來看<del>Hell World</del>Hello World範例程式。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//這是單行註解</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">這是</span></span><br><span class="line"><span class="comment">    多行</span></span><br><span class="line"><span class="comment">        註解</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, world!\n&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>讓我們來好好解釋這些程式碼</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//這是單行註解</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">這是</span></span><br><span class="line"><span class="comment">    多行</span></span><br><span class="line"><span class="comment">        註解</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>註解是不會被執行的，註解主要目的為解釋程式碼，以便後人接手你的程式碼的時候不會看不懂，以提高程式碼的可維護性。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>#include是巨集前置處理器(Macro Preprocessor)，會告訴編譯器這支程式會使用到 stdio.h 標頭檔，標頭檔通常定義了一些常用的東西讓我們使用，例如 printf 就是在螢幕上顯示文字。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>main為程式的主體，也是程式的進入點，為程式開始的地方。</p>
<p>return 是程式的回傳值，通常為 0。</p>
<p>為什麼回傳值為零請參考此<a href="https://www.ptt.cc/bbs/C_and_CPP/M.1316185874.A.C43.html">連結</a>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello, world!\n&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>所有陳述(Statement)結尾都要加 ;</p>
<p>printf 是將雙引號內的文字顯示到螢幕上</p>
<p>\n是跳脫字元，表示換行</p>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/C%E8%AF%AD%E8%A8%80">C語言</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/HelloWorld.html">Hello! World!</a></li>
</ol>
]]></content>
      <categories>
        <category>C語言</category>
      </categories>
      <tags>
        <tag>C語言</tag>
      </tags>
  </entry>
  <entry>
    <title>C語言-資料型態與變數運算</title>
    <url>/2015/10/19/C%E8%AA%9E%E8%A8%80-%E8%B3%87%E6%96%99%E5%9E%8B%E6%85%8B%E8%88%87%E8%AE%8A%E6%95%B8%E9%81%8B%E7%AE%97/</url>
    <content><![CDATA[<h1 id="資料型態"><a href="#資料型態" class="headerlink" title="資料型態"></a>資料型態</h1><p>程式在執行的過程中需要許多的資訊，而這些資訊都儲存在記憶體空間中</p>
<p>而根據資訊的用途與所需空間的不同，所以訂定了<strong>資料型態</strong>的規範</p>
<p>資料型態分為</p>
<ul>
<li><p>整數：用來表示整數，其所佔的記憶體空間有可能因為編譯器而有所不同，可以使用unsigned修飾字讓有號整數變成無號整數</p>
<ul>
<li>short (短整數，佔2位元組)</li>
<li>int (整數，佔4位元組)</li>
<li>unsigned (無號整數，佔4位元組)</li>
<li>long (長整數，佔4位元組)</li>
<li>long long int (長長整數，佔8位元組)</li>
</ul>
</li>
<li><p>浮點數：可以用來表示小數</p>
<ul>
<li>float (單精度浮點數，佔4位元組，精度只到小數點以下7位)</li>
<li>double (雙精度浮點數，佔8位元組，精度只到小數點以下15位)</li>
<li>long double (長雙精度浮點數，佔16位元組)</li>
</ul>
</li>
<li><p>字元：字元編碼依ASCII表編成，因為所佔有空間小，也可以表達小範圍的整數</p>
<ul>
<li>char (字元，佔1位元組)</li>
</ul>
</li>
</ul>
<p>以下為示範程式，用TDM-GCC 4.9.2編譯的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;型態\t\t大小（bytes）\n&quot;</span>);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;short\t\t%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">short</span>));    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;int\t\t%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;unsigned\t\t%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;long\t\t%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">long</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;long long\t%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">long</span> <span class="keyword">long</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;float\t\t%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">float</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;double\t\t%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">double</span>));  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;long double\t%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">long</span> <span class="keyword">double</span>));    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;char\t\t%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">char</span>));    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>\t為跳脫字元，用來對齊下一個顯示位置</p>
<p>%d為格式指定碼，表示這個位置要放入整數，然後被後面sizeof的運算結果取代</p>
<p>sizeof的功能是取得該型態所佔的記憶體大小</p>
<p>以下為執行結果</p>
<pre><code>型態            大小（bytes）
short           2
int             4
unsigned        4
long            4
long long       8
float           4
double          8
long double     16
char            1</code></pre>
<p>以下為型別的範圍大小</p>
<table>
<thead>
<tr>
<th>型別</th>
<th>最大值</th>
<th>最小值</th>
</tr>
</thead>
<tbody><tr>
<td>char</td>
<td>127</td>
<td>-128</td>
</tr>
<tr>
<td>short</td>
<td>32767</td>
<td>-32768</td>
</tr>
<tr>
<td>int</td>
<td>2147483647</td>
<td>-2147483648</td>
</tr>
<tr>
<td>unsigned</td>
<td>4294967296</td>
<td>0</td>
</tr>
<tr>
<td>long</td>
<td>2147483647</td>
<td>-2147483648</td>
</tr>
<tr>
<td>long long</td>
<td>9223372036854775807</td>
<td>-9223372036854775808</td>
</tr>
<tr>
<td>float</td>
<td>$3.40282*10^{38}$</td>
<td>$1.17549*10^{-38}$</td>
</tr>
<tr>
<td>double</td>
<td>$1.79769*10^{308}$</td>
<td>$2.22507*10^{-308}$</td>
</tr>
<tr>
<td>long double</td>
<td>$1.18973*10^{4932}$</td>
<td>$3.3621*10^{-4932}$</td>
</tr>
</tbody></table>
<h1 id="變數"><a href="#變數" class="headerlink" title="變數"></a>變數</h1><p>有了資料型態之後要怎麼把資料存在記憶體呢？答案是變數</p>
<p>變數簡單說就是一個代表某種資料型態且有名稱的記憶體空間</p>
<p>要使用變數之前，必須先宣告變數名稱跟資料型態，以下是變數宣告的範例</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> num; <span class="comment">// 宣告一個整數變數</span></span><br></pre></td></tr></table></figure>

<p>‘=’是指定符號，也就是將某個變數代入某個值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">score = <span class="number">100</span>;</span><br><span class="line">level = <span class="string">&#x27;A&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>有些名稱是不能拿來當變數名稱的，稱為<strong>保留字</strong>，以下為保留字</p>
<table>
<thead>
<tr>
<th>保留字</th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>char</td>
<td>short</td>
<td>int</td>
<td>unsigned</td>
</tr>
<tr>
<td>long</td>
<td>float</td>
<td>double</td>
<td>struct</td>
</tr>
<tr>
<td>union</td>
<td>void</td>
<td>enum</td>
<td>signed</td>
</tr>
<tr>
<td>const</td>
<td>volatile</td>
<td>typedef</td>
<td>auto</td>
</tr>
<tr>
<td>register</td>
<td>static</td>
<td>extern</td>
<td>break</td>
</tr>
<tr>
<td>case</td>
<td>continue</td>
<td>default</td>
<td>do</td>
</tr>
<tr>
<td>else</td>
<td>for</td>
<td>goto</td>
<td>if</td>
</tr>
<tr>
<td>return</td>
<td>switch</td>
<td>while</td>
<td>sizeof</td>
</tr>
</tbody></table>
<p>通常變數命名都建議使用有意義的文字表明變數作用</p>
<p>例如age_of_student、price_of_goods，而不是a、b、c這種無意義的變數名稱</p>
<p>以下是變數宣告的示範程式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> NT_dollar;</span><br><span class="line">    <span class="keyword">float</span> discount;</span><br><span class="line">    <span class="keyword">char</span> member_level;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;價錢\t\t折扣\t\t會員等級\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\t\t%f\t%c\n&quot;</span>,NT_dollar,discount,member_level);</span><br><span class="line">    </span><br><span class="line">    NT_dollar = <span class="number">1000</span>;</span><br><span class="line">    discount = <span class="number">0.2</span>;</span><br><span class="line">    member_level = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;價錢\t\t折扣\t\t會員等級\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\t\t%f\t%c\n&quot;</span>,NT_dollar,discount,member_level);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>價錢            折扣            會員等級
0               0.000000                
價錢            折扣            會員等級
1000            0.200000       A</code></pre>
<p>現在的編譯器會很好心的在你宣告變數的時候指定初始值為0</p>
<p>就像上面的例子一樣，在變數剛宣告卻未指定內容的情況下，NT_dollar的內容為0</p>
<p>若使用老舊的編譯器有可能會出現以下結果</p>
<pre><code>價錢            折扣            會員等級
2147315712        2293592        4199430
價錢            折扣            會員等級
1000            0.200000       A</code></pre>
<p>可以看到未指定初始值的變數內容是不可預測的</p>
<p>初始值的設定就是在變數宣告的時候指定一個值給變數，例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> score = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">char</span> level = <span class="string">&#x27;A&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>有時候你希望變數宣告之後就再不會變更內容，這時候就要在前面加關鍵字<strong>const</strong>，例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> PI = <span class="number">3.14159</span>;</span><br></pre></td></tr></table></figure>

<p>如果你試圖修改PI的值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">PI = <span class="number">3.14</span>; </span><br></pre></td></tr></table></figure>

<p>你就會得到以下錯誤訊息</p>
<p><font color="red">assignment of read-only variable ‘PI’</font></p>
<h1 id="運算"><a href="#運算" class="headerlink" title="運算"></a>運算</h1><h2 id="算術運算"><a href="#算術運算" class="headerlink" title="算術運算"></a>算術運算</h2><p>C語言除了提供加(+)、減(-)、乘(*)、除(/)以外，還提供餘除運算子(%)或者稱為模數運算子</p>
<p>這五個以數學運算為主的運算子稱為算術運算子</p>
<p>運算順序基本上是由左而右，先乘除後加減，可以加上括號表示運算的先後順序，例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="number">1</span>+<span class="number">2</span><span class="number">-3</span>*<span class="number">4</span>);</span><br></pre></td></tr></table></figure>

<p>這樣結果是-9</p>
<p>而%這個運算子的功能是取出計算除法之後的餘數，例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="number">9</span>%<span class="number">6</span>);</span><br></pre></td></tr></table></figure>

<p>這樣結果是3</p>
<p>雖然數學運算簡單，但有一個情況要注意</p>
<p>就是計算結果會產生不同型態的時候，例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="number">10</span>/<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<p>這樣結果並不是3.333333，而是3，因為10跟3都是整數，小數會被捨去</p>
<p>而為了顯示正確結果，還要使用%f格式(表示浮點數)以外，這是C的隱式型態轉換(Implicit type conversion)</p>
<p>在型態混雜算式中，長度較長的型態會變成目標型態，其他型態都會轉為目標型態，轉換過程稱為算術轉換(Arithmetic conversion)</p>
<p>也就是說，只要改成下列例子，結果就可以變成3.333333</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>, <span class="number">10.0</span>/<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<p>而在指定動作中，左邊的數值會成為目標型態</p>
<p>也就是說，如果右邊的資料型態比目標型態的長度來得小，轉換過程不會有問題，例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">double</span> number = num;</span><br></pre></td></tr></table></figure>

<p>但是如果右邊的資料型態長度比較大，超出範圍的部分就會被捨去，例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> pi = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">int</span> PI = pi; <span class="comment">// 小數點會被捨去，只留下3</span></span><br></pre></td></tr></table></figure>

<p>另外你也可以將變數轉換為指定型態，稱為強制轉型，例如</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> number = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>, (<span class="keyword">float</span>)number / <span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<h2 id="關係運算"><a href="#關係運算" class="headerlink" title="關係運算"></a>關係運算</h2><p>數學中有比較的觀念，在C語言裡面則稱為關係運算子</p>
<p>有大於(&gt;)、不小於(&gt;=)、小於(&lt;)、不大於(&lt;=)、等於(==)以及不等於(!=)</p>
<p>以下是關係運算子的範例程式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;10 &gt; 5\t\t%d\n&quot;</span>, <span class="number">10</span> &gt; <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;10 &gt;= 5\t\t%d\n&quot;</span>, <span class="number">10</span> &gt;= <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;10 &lt; 5\t\t%d\n&quot;</span>, <span class="number">10</span> &lt; <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;10 &lt;= 5\t\t%d\n&quot;</span>, <span class="number">10</span> &lt;= <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;10 == 5\t\t%d\n&quot;</span>, <span class="number">10</span> == <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;10 != 5\t\t%d\n&quot;</span>, <span class="number">10</span> != <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以下是執行結果，0表示False，1表示True</p>
<pre><code>10 &gt; 5          1
10 &gt;= 5         1
10 &lt; 5          0
10 &lt;= 5         0
10 == 5         0
10 != 5         1</code></pre>
<h2 id="邏輯運算"><a href="#邏輯運算" class="headerlink" title="邏輯運算"></a>邏輯運算</h2><p>在邏輯上有AND，OR、NOT運算</p>
<p>C也有提供邏輯運算子分別為AND(&amp;&amp;)、OR(||)及NOT(!)三個運算子</p>
<p>以下是邏輯運算的範例程式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">75</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (num &gt; <span class="number">70</span> &amp;&amp; num &lt; <span class="number">80</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (num &gt; <span class="number">80</span> || num &lt; <span class="number">75</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, !(num &gt; <span class="number">80</span> || num &lt; <span class="number">75</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果分別為1、0、1</p>
<p>值得注意的是在&amp;&amp;運算中，如果左邊的式子被判斷為False，即可判斷整個式子為False</p>
<p>||運算中，如果左邊的式子被判斷為True，即可判斷整個式子為True，則不判斷右邊的式子</p>
<h2 id="位元與位移運算"><a href="#位元與位移運算" class="headerlink" title="位元與位移運算"></a>位元與位移運算</h2><p>在數位邏輯設計中，有AND、OR、NOT、XOR等運算，在C語言裡面稱為位元運算子</p>
<p>C語言提供AND(&amp;)、OR(|)、NOT(!)、XOR(^)與一補數(~)等運算</p>
<p>以下為位元運算子範例程式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;AND運算：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;0 AND 0\t\t%d\n&quot;</span>, <span class="number">0</span> &amp; <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;0 AND 1\t\t%d\n&quot;</span>, <span class="number">0</span> &amp; <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1 AND 0\t\t%d\n&quot;</span>, <span class="number">1</span> &amp; <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1 AND 1\t\t%d\n\n&quot;</span>, <span class="number">1</span> &amp; <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;OR運算：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;0 OR 0\t\t%d\n&quot;</span>, <span class="number">0</span> | <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;0 OR 1\t\t%d\n&quot;</span>, <span class="number">0</span> | <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1 OR 0\t\t%d\n&quot;</span>, <span class="number">1</span> | <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1 OR 1\t\t%d\n\n&quot;</span>, <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;XOR運算：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;0 XOR 0\t\t%d\n&quot;</span>, <span class="number">0</span> ^ <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;0 XOR 1\t\t%d\n&quot;</span>, <span class="number">0</span> ^ <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1 XOR 0\t\t%d\n&quot;</span>, <span class="number">1</span> ^ <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1 XOR 1\t\t%d\n\n&quot;</span>, <span class="number">1</span> ^ <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NOT運算：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NOT 0\t\t%d\n&quot;</span>, !<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NOT 1\t\t%d\n&quot;</span>, !<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;一補數運算：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;~0\t\t%d\n&quot;</span>, ~<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以下為執行結果</p>
<pre><code>AND運算：
0 AND 0         0
0 AND 1         0
1 AND 0         0
1 AND 1         1

OR運算：
0 OR 0          0
0 OR 1          1
1 OR 0          1
1 OR 1          1

XOR運算：
0 XOR 0         0
0 XOR 1         1
1 XOR 0         1
1 XOR 1         0

NOT運算：
NOT 0           1
NOT 1           0

一補數運算：
~0              -1</code></pre>
<p>另外位移運算在計算機概論的<a href="http://gundambox.github.io/2015/10/15/%E9%82%8F%E8%BC%AF%E9%81%8B%E7%AE%97/#%E4%BD%8D%E7%A7%BB%E9%81%8B%E7%AE%97">邏輯運算</a>中有提到</p>
<p>C語言提供的語法為&lt;&lt;(左移)、&gt;&gt;(右移)，採算術位移</p>
<p>以下為位移運算子的範例程式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"> 	<span class="built_in">printf</span>(<span class="string">&quot;10&gt;&gt;1\t%d\n&quot;</span>,<span class="number">10</span>&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;10&lt;&lt;1\t%d\n&quot;</span>,<span class="number">10</span>&lt;&lt;<span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-20&gt;&gt;1\t%d\n&quot;</span>,<span class="number">-20</span>&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-20&lt;&lt;1\t%d\n&quot;</span>,<span class="number">-20</span>&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以下為執行結果</p>
<pre><code>10&gt;&gt;1   5
10&lt;&lt;1   20
-20&gt;&gt;1  -10
-20&lt;&lt;1  -40</code></pre>
<h2 id="遞增、遞減運算"><a href="#遞增、遞減運算" class="headerlink" title="遞增、遞減運算"></a>遞增、遞減運算</h2><p>程式在運算裡面最常做的事情是+1或-1，例如數東西</p>
<p>而C語言提供了遞增(++)跟遞減(–)運算子方便撰寫程式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ++i);<span class="comment">// ++i 等同於 i = i + 1 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, --i);<span class="comment">// --i 等同於 i = i - 1</span></span><br></pre></td></tr></table></figure>

<p>以上三行的執行結果是1與0</p>
<p>但是這兩個運算子有個特性要注意，變數放在前後會影響運算順序</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">num = ++i;   <span class="comment">// 相當於i = i + 1; num = i;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span> ,num);</span><br><span class="line">num = --i;    <span class="comment">// 相當於i = i - 1; num = i;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span> ,num);</span><br></pre></td></tr></table></figure>

<p>上面這段程式碼的執行結果是1與0</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">num = i++;    <span class="comment">// 相當於num = i; i = i + 1;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, num);</span><br><span class="line">num = i--;     <span class="comment">// 相當於 num = i; i = i - 1;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, num);</span><br></pre></td></tr></table></figure>

<p>上面這段程式碼的執行結果是0與1</p>
<p>也就是說如果變數在左邊，遞增的運算順序會小於指定</p>
<p>變數如果在右邊，遞增的運算順序會大於指定</p>
<h2 id="指定運算"><a href="#指定運算" class="headerlink" title="指定運算"></a>指定運算</h2><p>除了我們看過的’=’以外，還有下列幾個運算子，都是為了方便撰寫程式而產生的</p>
<table>
<thead>
<tr>
<th>運算子</th>
<th>例子</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>+=</td>
<td>a += b</td>
<td>a = a + b</td>
</tr>
<tr>
<td>-=</td>
<td>a -= b</td>
<td>a = a - b</td>
</tr>
<tr>
<td>*=</td>
<td>a *= b</td>
<td>a = a * b</td>
</tr>
<tr>
<td>/=</td>
<td>a /= b</td>
<td>a = a / b</td>
</tr>
<tr>
<td>%=</td>
<td>a %= b</td>
<td>a = a % b</td>
</tr>
<tr>
<td>&amp;=</td>
<td>a &amp;= b</td>
<td>a = a &amp; b</td>
</tr>
<tr>
<td>&#124;=</td>
<td>a &#124;= b</td>
<td>a = a &#124; b</td>
</tr>
<tr>
<td>^=</td>
<td>a ^= b</td>
<td>a = a ^ b</td>
</tr>
<tr>
<td>&lt;&lt;=</td>
<td>a &lt;&lt;= b</td>
<td>a = a &lt;&lt; b</td>
</tr>
</tbody></table>
<blockquote>
<blockquote>
<p>=        |    a &gt;&gt;= b        |    a = a &gt;&gt; b </p>
</blockquote>
</blockquote>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/C%E8%AF%AD%E8%A8%80">C語言</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/Datatype.html">資料型態（Data type</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/LiteralConstant.html">字面常量（Literal Constant）</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/Variable.html">變數（Variable）</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/ArithmeticType%20conversion.html">算術（Arithmetic）運算、型態轉換（Type conversion）</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/RelationalConditional.html">關係（Relational）運算、條件（Conditional）運算</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/LogicalBitwise.html">邏輯（Logical）運算、位元（Bitwise）運算</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/IncrementDecrementAssignment.html">遞增（Increment）、遞減（Decrement）、指定（Assignment）運算</a></li>
</ol>
]]></content>
      <categories>
        <category>C語言</category>
      </categories>
      <tags>
        <tag>C語言</tag>
      </tags>
  </entry>
  <entry>
    <title>C語言-輸入與輸出</title>
    <url>/2015/10/19/C%E8%AA%9E%E8%A8%80-%E8%BC%B8%E5%85%A5%E8%88%87%E8%BC%B8%E5%87%BA/</url>
    <content><![CDATA[<h1 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h1><p>在C語言裡面，標準的輸入輸出是由標頭檔stdio所提供的</p>
<p>這也是為什麼程式最開始都要寫#include&lt;stdio.h&gt;的原因</p>
<p>stdio是standard input/output的縮寫</p>
<p>裡面規範了所有關於輸入輸出的函數與規定</p>
<h1 id="getchar、putchar"><a href="#getchar、putchar" class="headerlink" title="getchar、putchar"></a>getchar、putchar</h1><p>如果只想取得使用者輸入的字元，可以使用getchar()，這函數會直接取得使用者的輸入並回傳</p>
<p>如果只要輸出一個字元，可以使用putchar()，這函數會將一個字元顯示在螢幕上</p>
<p>以下是getchar、putchar範例程式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;請輸入一個字元：&quot;</span>);</span><br><span class="line">    c = getchar();</span><br><span class="line">    <span class="built_in">putchar</span>(c);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>請輸入一個字元：X
X</code></pre>
<h1 id="gets、puts"><a href="#gets、puts" class="headerlink" title="gets、puts"></a>gets、puts</h1><p>如果你輸入超過兩個字元，getchar()只會讀取第一個字元，並將其餘字元留在緩衝區，只到下一次的getchar()</p>
<p>如果一次輸入多個字元，也就是<strong>字串</strong>，可以使用gets()，這函數會取得使用者輸入的字串，不包括按下enter的換行符號</p>
<p>而想將輸入的字串一次輸出的話，可以使用puts()，這函數會輸出文字後並且換行</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">20</span>];<span class="comment">// 宣告可以輸入20字以內的字串，在之後的章節會介紹</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;請輸入字串：&quot;</span>);</span><br><span class="line">    gets(str);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;輸入的字串為：&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(str);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>請輸入字串：
Hello
輸入的字串為：
Hello</code></pre>
<h1 id="scanf、printf"><a href="#scanf、printf" class="headerlink" title="scanf、printf#"></a>scanf、printf#</h1><p>如果你想輸入其他型態的數值，那就需要使用scanf，搭配格式指定字與取址運算子(&amp;)指定數值給變數</p>
<p>以下是格式指定字跟說明</p>
<table>
<thead>
<tr>
<th>格式指定字</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>%c</td>
<td>字元</td>
</tr>
<tr>
<td>%d</td>
<td>整數(10進位)</td>
</tr>
<tr>
<td>%o</td>
<td>整數(8進位)</td>
</tr>
<tr>
<td>%u</td>
<td>無號整數</td>
</tr>
<tr>
<td>%x, %X</td>
<td>整數(16進位)</td>
</tr>
<tr>
<td>%f</td>
<td>單精度浮點數</td>
</tr>
<tr>
<td>%lf</td>
<td>雙精度浮點數</td>
</tr>
<tr>
<td>%s</td>
<td>字串</td>
</tr>
</tbody></table>
<p>以下是輸入的範例程式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> input;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;請輸入數字：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;您輸入的數字：%d\n&quot;</span>, input);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>請輸入數字：100
您輸入的數字：100</code></pre>
<p>scanf可以一次指定多個值，也可以指定輸入的格式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> number1, number2;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;請輸入兩個數字，中間使用空白區隔）：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;number1, &amp;number2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;您輸入的數字總和：%d + %d = %d\n&quot;</span>, number1, number2,number1+number2);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;請輸入兩個數字，中間使用*號區隔）：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d*%d&quot;</span>, &amp;number1, &amp;number2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;您輸入的數字相乘為：%d * %d = %d\n&quot;</span>, number1, number2,number1*number2);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>請輸入兩個數字，中間使用空白區隔）：10 1
您輸入的數字總和：10 + 1 = 11
請輸入兩個數字，中間使用*號區隔）：5*2
您輸入的數字相乘為：5 * 2 = 10</code></pre>
<p>如果想輸入字串以外的數值，就需要使用printf來顯示，函數執行過後會回傳輸出的字元數</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> count = <span class="built_in">printf</span>(<span class="string">&quot;Hello World!\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, count);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>Hello World!
13</code></pre>
<p>包括空白與換行總共13個字元被顯示在螢幕上</p>
<p>printf也需要格式指令碼來幫忙輸出</p>
<table>
<thead>
<tr>
<th>格式指定字</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>%c</td>
<td>字元</td>
</tr>
<tr>
<td>%d</td>
<td>整數(10進位)</td>
</tr>
<tr>
<td>%o</td>
<td>整數(8進位)</td>
</tr>
<tr>
<td>%u</td>
<td>無號整數</td>
</tr>
<tr>
<td>%x, %X</td>
<td>整數(16進位)</td>
</tr>
<tr>
<td>%f</td>
<td>浮點數輸出</td>
</tr>
<tr>
<td>%e, %E</td>
<td>使用科學記號顯示浮點數</td>
</tr>
<tr>
<td>%g, %G</td>
<td>浮點數輸出，取%f或%e(%f或%E)，看哪個表示精簡</td>
</tr>
<tr>
<td>%%</td>
<td>顯示 %</td>
</tr>
<tr>
<td>%s</td>
<td>字串</td>
</tr>
</tbody></table>
<p>基本上什麼型態就需要對應的格式指令碼，以下是格式指令碼範例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;字元 %c\n&quot;</span>, <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;字元編碼 %d\n&quot;</span>, <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;字元編碼 %c\n&quot;</span>, <span class="number">65</span>);    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;十進位整數 %d\n&quot;</span>, <span class="number">15</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;八進位整數 %o\n&quot;</span>, <span class="number">15</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;十六進位整數 %X\n&quot;</span>, <span class="number">15</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;十六進位整數 %x\n&quot;</span>, <span class="number">15</span>);    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;科學記號 %f\n&quot;</span>, <span class="number">0.001234</span>);    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;科學記號 %e\n&quot;</span>, <span class="number">0.001234</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;科學記號 %g\n&quot;</span>, <span class="number">0.000000001234</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;科學記號 %g\n&quot;</span>, <span class="number">0.1234</span>);    </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>字元 A
字元編碼 65
字元編碼 A
十進位整數 15
八進位整數 17
十六進位整數 F
十六進位整數 f
科學記號 0.001234
科學記號 1.234000e-003
科學記號 1.234e-009
科學記號 0.1234</code></pre>
<p>另外輸出的細節，例如指定小數點輸出到第幾位，就要寫%.2f，表示輸出到小數點以下第二位</p>
<p>若在前面加個數字表示要輸出多少寬度，例如%10.2f表示預留10個字元寬度，不足部分補上空白</p>
<p>如果在前面加上負號，表示向左對齊，否則向右對齊，例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;example:%10.2f\n&quot;</span>, <span class="number">3.14159</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;example:%-10.2f\n&quot;</span>, <span class="number">3.14159</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>example:      3.14
example:3.14</code></pre>
<p>字元寬度也可以由變數指定，例如%*d，而之後的第一個引數就會成為字元寬度</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> width,num;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;請輸入字元寬度：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;width);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;請輸入數字：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num = %*d\n&quot;</span>, width, num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>請輸入字元寬度：5
請輸入數字：100
num =   100</code></pre>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/C%E8%AF%AD%E8%A8%80">C語言</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/PutcharGetcharPutsGets.html">putchar()、getchar()、puts()、gets()</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/PrintfScanf.html">printf() 與 scanf()</a></li>
</ol>
]]></content>
      <categories>
        <category>C語言</category>
      </categories>
      <tags>
        <tag>C語言</tag>
      </tags>
  </entry>
  <entry>
    <title>C語言-選擇結構</title>
    <url>/2015/10/20/C%E8%AA%9E%E8%A8%80-%E9%81%B8%E6%93%87%E7%B5%90%E6%A7%8B/</url>
    <content><![CDATA[<h1 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h1><p>程式在運算過程中需要應付各種狀況，而為了應付各種狀況，C語言提供了條件判斷陳述句</p>
<h1 id="if、else"><a href="#if、else" class="headerlink" title="if、else"></a>if、else</h1><p>if條件判斷陳述語法如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(條件式)</span><br><span class="line">    陳述句<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    陳述句<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>這個語法的意思就是如果條件式成立的話，就執行的陳述句1，否則就執行陳述句2</p>
<p>如果想要在條件式不符合的時候不做任何事，可以省略else</p>
<p>如果想要執行的陳述句不只一句，就需要使用成對的大括號將陳述句包起來，例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(條件式)&#123;</span><br><span class="line">    陳述句<span class="number">1</span>;</span><br><span class="line">    陳述句<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    陳述句<span class="number">3</span>;</span><br><span class="line">    陳述句<span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以下範例程式的作用是判斷整數是否為三的倍數</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> input = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">int</span> remain = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;輸入整數：&quot;</span>); </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input); </span><br><span class="line"></span><br><span class="line">    remain = input % <span class="number">3</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(remain == <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d 為三的倍數\n&quot;</span>, input);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d 不是三的倍數\n&quot;</span>, input);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>輸入整數：5
5 不是三的倍數</code></pre>
<p>在C語言裡面，任何非零的數字都會判斷為True，零才會判斷為False，所以程式可以這樣改</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> input = <span class="number">0</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;輸入整數：&quot;</span>); </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input); </span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(input % <span class="number">3</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d 不是三的倍數\n&quot;</span>, input);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d 為三的倍數\n&quot;</span>, input);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>if陳述句可以判斷多個條件，例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(條件<span class="number">1</span>)&#123;</span><br><span class="line">    陳述句<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    <span class="keyword">if</span>(條件<span class="number">2</span>)&#123;</span><br><span class="line">        陳述句<span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        陳述句<span class="number">3</span></span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure>

<p>但是C語言是格式自由的語言，所以我們可以改成：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(條件<span class="number">1</span>)&#123;</span><br><span class="line">    陳述句<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(條件<span class="number">2</span>)&#123;</span><br><span class="line">        陳述句<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    陳述句<span class="number">3</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>這樣比較方便閱讀，以下是多個條件式的範例程式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> score = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;輸入分數：&quot;</span>); </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;score); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(score &gt;= <span class="number">90</span>) </span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Level : S&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(score &gt;= <span class="number">80</span> &amp;&amp; score &lt; <span class="number">90</span>) </span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Level : A&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(score &gt;= <span class="number">70</span> &amp;&amp; score &lt; <span class="number">80</span>) </span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Level : B&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(score &gt;= <span class="number">60</span> &amp;&amp; score &lt; <span class="number">70</span>) </span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Level : C&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Level : D&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>輸入分數：100
Level : S</code></pre>
<p>值得注意的是，else的配對是找離它最近的if，所以以下程式碼</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (條件<span class="number">1</span>) </span><br><span class="line">    <span class="keyword">if</span>(條件<span class="number">2</span>) </span><br><span class="line">        陳述句<span class="number">1</span>; </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    陳述句<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>實際上等同於</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (條件<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(條件<span class="number">2</span>) </span><br><span class="line">        陳述句<span class="number">1</span>; </span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        陳述句<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以括號有加有保佑^.&lt;</p>
<h1 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h1><p>switch只能判斷字元或數字，在某些時候比if更具效率跟可讀性，條件判斷的語法如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (變數名稱或運算式) &#123; </span><br><span class="line">    <span class="keyword">case</span> 符合的數字或字元: </span><br><span class="line">        陳述句<span class="number">1</span>; </span><br><span class="line">        <span class="keyword">break</span>; </span><br><span class="line">    <span class="keyword">case</span> 符合的數字或字元: </span><br><span class="line">        陳述句<span class="number">2</span>; </span><br><span class="line">        <span class="keyword">break</span>; </span><br><span class="line">    <span class="keyword">default</span>: </span><br><span class="line">        陳述<span class="number">3</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>default跟else語句一樣，不一定需要，可以省略。</p>
<p>其中要注意的是<strong>符合的數字或字元</strong>後面寫的冒號’:’，而不是分號’;’</p>
<p>以下是上面的程式改成switch語法的範例</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> score = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">int</span> level = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;輸入分數：&quot;</span>); </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;score); </span><br><span class="line"></span><br><span class="line">    level = score / <span class="number">10</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(level) &#123; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>: </span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>: </span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Level : S&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>: </span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Level : A&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>: </span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Level : B&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>: </span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Level : C&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">default</span>: </span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Level : D&quot;</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>輸入分數：89
Level : A</code></pre>
<p>其中陳述句要遇到break才會停止並離開switch，如果忘了加例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> score = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">int</span> level = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;輸入分數：&quot;</span>); </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;score); </span><br><span class="line"></span><br><span class="line">    level = score / <span class="number">10</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(level) &#123; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>: </span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>: </span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Level : S&quot;</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>: </span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Level : A&quot;</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>: </span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Level : B&quot;</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>: </span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Level : C&quot;</span>);</span><br><span class="line">        <span class="keyword">default</span>: </span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Level : D&quot;</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>就會得到下列的執行結果</p>
<pre><code>輸入分數：100
Level : S
Level : A
Level : B
Level : C
Level : D</code></pre>
<p>如果是單純比較數字或字元，建議使用switch語法，效率才會被凸顯出來，因為switch只會取出數值一次</p>
<p>但是if卻是每次比較都取出一次，例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(ch)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;E&#x27;</span>:</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這樣會取出數值一次，比較五次</p>
<p>但是下面這個語法卻是取出數值五次，比較五次</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(ch == <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">&#x27;E&#x27;</span>)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p>在取出數值的過程中，就可以看到效率明顯的差異</p>
<p>但是switch無法比較複雜語法，算是各有優缺點</p>
<p>另外在gcc的C語言編譯器中提供比較連續數值的語法，例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> score = <span class="number">0</span>; </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;輸入分數：&quot;</span>); </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;score); </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(score) &#123; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">90</span> ... <span class="number">100</span>: </span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Level : S&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">80</span> ... <span class="number">89</span>: </span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Level : A&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">70</span> ... <span class="number">79</span>: </span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Level : B&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">60</span> ... <span class="number">69</span>: </span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Level : C&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">default</span>: </span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Level : D&quot;</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>輸入分數：89
Level : A</code></pre>
<h1 id="條件運算子"><a href="#條件運算子" class="headerlink" title="條件運算子"></a>條件運算子</h1><p>條件運算子的語法如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">條件式 ? 成立時的陳述句 : 不成立時的陳述句</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> score = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;輸入分數：&quot;</span>); </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;score); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;是否及格？%c\n&quot;</span>, (score &gt;= <span class="number">60</span> ? <span class="string">&#x27;Y&#x27;</span> : <span class="string">&#x27;N&#x27;</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>輸入分數：60
是否及格？Y</code></pre>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/C%E8%AF%AD%E8%A8%80">C語言</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/ifStatement.html">if 條件判斷</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/switchStatement.html">switch 條件判斷</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/RelationalConditional.html">關係（Relational）運算、條件（Conditional）運算</a></li>
</ol>
]]></content>
      <categories>
        <category>C語言</category>
      </categories>
      <tags>
        <tag>C語言</tag>
      </tags>
  </entry>
  <entry>
    <title>C語言-重複結構</title>
    <url>/2015/10/21/C%E8%AA%9E%E8%A8%80-%E9%87%8D%E8%A4%87%E7%B5%90%E6%A7%8B/</url>
    <content><![CDATA[<h1 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h1><p>程式在運算過程中，難免會需要做重複的事情，例如計數</p>
<p>在C語言裡面就提供兩種寫法讓程式可以做重複的事情</p>
<h1 id="while迴圈"><a href="#while迴圈" class="headerlink" title="while迴圈"></a>while迴圈</h1><p>while迴圈的語法如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(條件式)&#123;</span><br><span class="line">    陳述句<span class="number">1</span>;</span><br><span class="line">    陳述句<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在滿足條件式的情況下，迴圈就會不斷執行括號內的陳述句</p>
<p>通常用於停止條件不知道何時發生的情況下使用</p>
<p>例如下面這個程式，使用者什麼時候輸入小於0的數字是未知的，這時候就需要while迴圈</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>; </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;輸入數字(小於0則結束)：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(num &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">    </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;你輸入了：%d\n&quot;</span>,num);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;輸入數字(小於等於0則結束)：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">    </span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>輸入數字(小於0則結束)：1
你輸入了：1
輸入數字(小於0則結束)：0</code></pre>
<p>如果在條件式內填入1，由於任何非零的數字都會判斷為True，就會形成無窮迴圈</p>
<p>無窮迴圈有很多應用，例如輪詢(Polling)</p>
<p>while迴圈分為前測式迴圈跟後測式迴圈，上面介紹的是前測式迴圈</p>
<p>接下來要介紹的語法是後測式迴圈</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    陳述句<span class="number">1</span>;</span><br><span class="line">    陳述句<span class="number">2</span>;</span><br><span class="line">&#125;<span class="keyword">while</span>(條件式);</span><br></pre></td></tr></table></figure>

<p>後測式迴圈會先執行一次迴圈本體再作條件判斷，也就是說同樣條件下，結果可能不一樣</p>
<p>下面這個程式示範了前測式跟後測式的差別</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">while</span>(num--)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,num);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    num = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,num);</span><br><span class="line">    &#125;<span class="keyword">while</span>(num--);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>9 8 7 6 5 4 3 2 1 0
10 9 8 7 6 5 4 3 2 1 0</code></pre>
<p>前面switch有使用到break以外，break放在迴圈裡面就會使程式跳離迴圈</p>
<p>而除了break以外，還有continue語法</p>
<p>continue是忽略到目前為止之後的陳述句，直接回到條件式執行判斷</p>
<p>以下是範例程式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;請輸入數字(輸入0結束)：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(num == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(num % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d是2的倍數\n&quot;</span>,num);</span><br><span class="line">            <span class="keyword">continue</span>;	</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(num % <span class="number">3</span> ==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d是3的倍數\n&quot;</span>,num);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d不是2跟3的倍數\n&quot;</span>,num);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>請輸入數字(輸入0結束)：4
4是2的倍數
請輸入數字(輸入0結束)：6
6是2的倍數
請輸入數字(輸入0結束)：5
5不是2跟3的倍數
請輸入數字(輸入0結束)：0</code></pre>
<p>可以很清楚的看到輸入2跟3的倍數都會進入continue，然後直接回到迴圈的開頭</p>
<p>輸入0之後就離開迴圈了</p>
<h1 id="for迴圈"><a href="#for迴圈" class="headerlink" title="for迴圈"></a>for迴圈</h1><p>for迴圈的語法如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始條件; 條件式; 遞增式) &#123; </span><br><span class="line">    陳述句一; </span><br><span class="line">    陳述句二; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>初始條件執行完之後，每次執行完迴圈本體，檢查條件是否符合，若符合就執行遞增式，再繼續執行迴圈</p>
<p>讓我們看一個簡單的範例程式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;<span class="number">10</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>0 1 2 3 4 5 6 7 8 9
0 1 2 3 4 5 6 7 8 9</code></pre>
<p>其實可以很明顯的看出來，for迴圈是把while迴圈裡面多個陳述句結合在一起而已</p>
<p>迴圈跟if-else一樣可以使用巢狀結構，下面這段程式碼是常見的九九乘法表</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)&#123; </span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt; <span class="number">10</span>; j++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d*%d=%d\t&quot;</span>, i,j,i*j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>1*1=1   1*2=2   1*3=3   1*4=4   1*5=5   1*6=6   1*7=7   1*8=8   1*9=9
2*1=2   2*2=4   2*3=6   2*4=8   2*5=10  2*6=12  2*7=14  2*8=16  2*9=18
3*1=3   3*2=6   3*3=9   3*4=12  3*5=15  3*6=18  3*7=21  3*8=24  3*9=27
4*1=4   4*2=8   4*3=12  4*4=16  4*5=20  4*6=24  4*7=28  4*8=32  4*9=36
5*1=5   5*2=10  5*3=15  5*4=20  5*5=25  5*6=30  5*7=35  5*8=40  5*9=45
6*1=6   6*2=12  6*3=18  6*4=24  6*5=30  6*6=36  6*7=42  6*8=48  6*9=54
7*1=7   7*2=14  7*3=21  7*4=28  7*5=35  7*6=42  7*7=49  7*8=56  7*9=63
8*1=8   8*2=16  8*3=24  8*4=32  8*5=40  8*6=48  8*7=56  8*8=64  8*9=72
9*1=9   9*2=18  9*3=27  9*4=36  9*5=45  9*6=54  9*7=63  9*8=72  9*9=81</code></pre>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/C%E8%AF%AD%E8%A8%80">C語言</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/whileStatement.html">while 迴圈</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/forStatement.html">for 迴圈</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/BreakContinueGoto.html">break、 continue、goto</a></li>
</ol>
]]></content>
      <categories>
        <category>C語言</category>
      </categories>
      <tags>
        <tag>C語言</tag>
      </tags>
  </entry>
  <entry>
    <title>C語言-函數與遞迴</title>
    <url>/2015/10/22/C%E8%AA%9E%E8%A8%80-%E5%87%BD%E6%95%B8%E8%88%87%E9%81%9E%E8%BF%B4/</url>
    <content><![CDATA[<h1 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h1><p>當程式發展越來越大時，數千數萬行的main函數是不實際的</p>
<p>所以我們將重複的細節做切割，將其模組化，讓main函數可以重複使用</p>
<p>模組化的好處就是容易除錯且較有彈性，對於程式未來的發展是有益的</p>
<h1 id="函數定義"><a href="#函數定義" class="headerlink" title="函數定義"></a>函數定義</h1><p>函數分為回傳值、函數名稱、參數列與函數主體，前三項被合稱為函數原型(Function prototype)</p>
<p>宣告語法如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">回傳值 函數名稱(參數列);</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br></pre></td></tr></table></figure>

<p>如果函數不回傳任何值的話，回傳值則寫void，如果不傳入任何參數，參數列保持空白就行</p>
<p>函數原型事先定義了該函數只接受什麼，會回傳什麼，如果在呼叫過程中不符合函數原型</p>
<p>編譯器將會告知有錯誤產生，例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">max(num1,ch); <span class="comment">// ch是字元</span></span><br></pre></td></tr></table></figure>

<p>接著就可以根據函數原型實作函數本體了，函數本體的語法如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">回傳值 函數名稱(參數列)&#123;</span><br><span class="line">    函數主體</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (num1 &gt; num2? num1: num2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以下是呼叫函數的範例程式：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> num1 = <span class="number">100</span>,num2 = <span class="number">200</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最大值為：%d\n&quot;</span>,max(num1,num2));</span><br><span class="line">             </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (num1 &gt; num2? num1: num2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>最大值為：200</code></pre>
<p>函數是可以互相呼叫的，範例如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    fun1();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello &quot;</span>);</span><br><span class="line">    fun2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;world\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>hello world</code></pre>
<h1 id="變數可視範圍與生命週期"><a href="#變數可視範圍與生命週期" class="headerlink" title="變數可視範圍與生命週期"></a>變數可視範圍與生命週期</h1><p>變數可視範圍指的是能夠使用變數的區塊</p>
<p>可視範圍分為全域變數、區域變數跟區塊變數</p>
<p>變數生命週期指的是變數有效的時間</p>
<p>全域變數是指宣告在(main)函數以外的變數，當下整段程式都看得到該變數的存在並呼叫使用</p>
<p>例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="number">3.14159</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">area</span><span class="params">(<span class="keyword">double</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">double</span> radius;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;請輸入半徑：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;radius);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;圓面積：%.2f^2 * %f = %f\n&quot;</span>,radius,PI,area(radius));</span><br><span class="line">             </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">area</span><span class="params">(<span class="keyword">double</span> radius)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> radius*radius*PI;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>請輸入半徑：3
圓面積：3.00^2 * 3.141590 = 28.274310</code></pre>
<p>所有變數都設為全域變數是不應該的，這樣會發生變數名稱管理問題，造成維護困難</p>
<p>全域變數的生命週期開始於程式開始，結束於程式結束</p>
<p>區域變數指的是在(main)函數內或函數的參數列的變數</p>
<p>只有該函數可以使用，其他地方無法存取，範例如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;這邊看到的是區域變數\t%d\n&quot;</span>,x);</span><br><span class="line">    </span><br><span class="line">    fun1();</span><br><span class="line">    fun2();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    x*=<span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;這邊看到的是全域變數\t%d\n&quot;</span>,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;這邊看到的是區域變數\t%d\n&quot;</span>,x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>這邊看到的是區域變數    2
這邊看到的是全域變數    10
這邊看到的是區域變數    3</code></pre>
<p>區域變數的生命週期開始於函數開頭，結束於函數結尾</p>
<p>區塊變數指的是在while、if-else等在大括號內的變數，範例如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">200</span>;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;這邊看到的是區域變數\t%d\n&quot;</span>,x);</span><br><span class="line">    </span><br><span class="line">    fun1();</span><br><span class="line">    fun2();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> x = i*<span class="number">2</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;這邊看到的是區塊變數\t%d\n&quot;</span>,x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    x*=<span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;這邊看到的是全域變數\t%d\n&quot;</span>,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">300</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;這邊看到的是區域變數\t%d\n&quot;</span>,x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>這邊看到的是區域變數    200
這邊看到的是全域變數    1000
這邊看到的是區域變數    300
這邊看到的是區塊變數    2
這邊看到的是區塊變數    4
這邊看到的是區塊變數    6
這邊看到的是區塊變數    8
這邊看到的是區塊變數    10</code></pre>
<p>這邊要記住的是當可視範圍大的變數與可視範圍小的變數發生同名時</p>
<p>範圍小的變數會暫時覆蓋範圍大的變數，稱之為變數覆蓋</p>
<h1 id="遞迴"><a href="#遞迴" class="headerlink" title="遞迴"></a>遞迴</h1><p>函數除了可以呼叫別的函數，也可以呼叫自己，稱為遞迴</p>
<p>以下是Fibonacci數列作為使用遞迴例子</p>
<p>Fibonacci數列的第定義為</p>
<p>$$ Fibonacci(N) =<br>\begin{cases}<br>1,                                  &amp; \mbox{if }N\mbox{ = 1 or }N\mbox{ = 2}\\<br>fibonacci(N-1) + fibonacci(N-2),        &amp; \mbox{if }N \ge 3<br>\end{cases} $$</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fibonacci</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> N = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;請輸入第幾項：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;fibonacci數列第%d項為：%d&quot;</span>,N,fibonacci(N)); </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fibonacci</span><span class="params">(<span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(N == <span class="number">1</span> || N ==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//終止條件</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> fibonacci(N<span class="number">-1</span>) + fibonacci(N<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>請輸入第幾項：7
fibonacci數列第7項為：13</code></pre>
<p>遞迴看起來似乎可以當作迴圈來用，但迴圈跟遞迴哪個好並沒有一定的答案</p>
<p>迴圈寫起來較複雜，但沒有記憶體堆疊的問題</p>
<p>遞迴較容易理解，但有執行效率上的問題</p>
<p>選用哪個都要看需求如何再決定</p>
<p>關於堆疊在資料結構會提到</p>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/C%E8%AF%AD%E8%A8%80">C語言</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/FunctionABC.html">函式簡介</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/ArgReturn.html">引數傳遞、傳回值</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/Scope.html">變數、函式可視範圍（static 與 extern）</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/Recursion.html">遞迴（Recursion）</a></li>
</ol>
]]></content>
      <categories>
        <category>C語言</category>
      </categories>
      <tags>
        <tag>C語言</tag>
      </tags>
  </entry>
  <entry>
    <title>C語言-陣列與字串</title>
    <url>/2015/10/23/C%E8%AA%9E%E8%A8%80-%E9%99%A3%E5%88%97%E8%88%87%E5%AD%97%E4%B8%B2/</url>
    <content><![CDATA[<h1 id="陣列"><a href="#陣列" class="headerlink" title="陣列"></a>陣列</h1><p>如果是需要使用到多個變數的場合，例如統計全班成績，宣告這麼多的變數儲存成績是不實際的</p>
<p>所以C語言提供陣列，方便你宣告一個以索引為識別的資料結構</p>
<h2 id="一維陣列"><a href="#一維陣列" class="headerlink" title="一維陣列"></a>一維陣列</h2><p>陣列的宣告方式如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">資料型態 變數名稱[陣列長度];</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> score[<span class="number">10</span>]; <span class="comment">// 宣告10個元素的整數陣列</span></span><br><span class="line"><span class="keyword">float</span> weight[<span class="number">5</span>]; <span class="comment">// 宣告5個元素的浮點數陣列</span></span><br></pre></td></tr></table></figure>

<p>陣列的長度必須事先決定，原因是因為編譯器在編譯過程中，陣列所需的空間必須是靜態的</p>
<p>如果長度不確定，編譯器就無法保留空間給陣列</p>
<p>下一個章節會提到如果陣列空間不確定時，如何宣告一個動態長度的陣列</p>
<p>而之前在<a href="http://gundambox.github.io/2015/10/19/%E8%B3%87%E6%96%99%E5%9E%8B%E6%85%8B%E8%88%87%E8%AE%8A%E6%95%B8%E9%81%8B%E7%AE%97/#%E8%AE%8A%E6%95%B8">資料型態與變數運算</a>有提過，變數宣告後</p>
<p>變數的內容是不確定的，所以你可以這樣初始化陣列</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> score[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 這樣裡面10個元素都會初始化為0</span></span><br><span class="line"><span class="keyword">float</span> weight[<span class="number">5</span>] = &#123;<span class="number">0.0</span>&#125;; <span class="comment">// 這樣裡面5個元素都會初始化為0.0</span></span><br></pre></td></tr></table></figure>

<p>你也可以在宣告陣列的時候指定初始值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> score[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="keyword">float</span> weight[<span class="number">5</span>] = &#123;<span class="number">1.0</span>,<span class="number">2.0</span>,<span class="number">3.0</span>,<span class="number">4.0</span>,<span class="number">5.0</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>當你需要存取某個元素的時候，只要</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> first = score[<span class="number">0</span>];</span><br></pre></td></tr></table></figure>

<p>這樣就可以取得第一個元素的值了，這邊要注意的是</p>
<p>陣列的索引值是從0開始，從0到9總共10個元素</p>
<p>而為什麼索引值從0開始，是因為陣列名稱是指向陣列第一個元素的</p>
<p>索引值就是往後偏移量，因為開頭已經指向第一個元素，所以偏移量是零</p>
<p>陣列的每個元素可以直接當作變數使用，也可以直接做輸入輸出</p>
<p>下面是一個簡單的範例程式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    	<span class="built_in">printf</span>(<span class="string">&quot;請輸入第%d個元素：&quot;</span>,i+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;<span class="built_in">array</span>[i]); </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;你輸入了：&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, <span class="built_in">array</span>[i]); </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>請輸入第1個元素：10
請輸入第2個元素：9
請輸入第3個元素：8
請輸入第4個元素：7
請輸入第5個元素：6
請輸入第6個元素：5
請輸入第7個元素：4
請輸入第8個元素：3
請輸入第9個元素：2
請輸入第10個元素：1
你輸入了：10 9 8 7 6 5 4 3 2 1</code></pre>
<p>使用陣列時有以下幾點要注意</p>
<ol>
<li><p>如果你在初始化的時候未定義陣列大小，編譯器將會幫你決定陣列大小</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">array</span>[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;陣列長度：%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="built_in">array</span>) / <span class="keyword">sizeof</span>(<span class="built_in">array</span>[<span class="number">0</span>]));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 執行結果</p>
<pre><code> 陣列長度：5</code></pre>
</li>
<li><p>不能存取超過陣列長度的元素，這會造成無法預期的錯誤</p>
<p>小則取得無法預期的值，大則程式爆炸</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">array</span>[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第八個元素：%d\n&quot;</span>,<span class="built_in">array</span>[<span class="number">7</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<pre><code>執行結果

    第八個元素：0</code></pre>
<ol start="3">
<li><p>陣列是不能直接指定的，必須一個元素一個元素指定</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> array1[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> array2[<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;; </span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    	array2[i] = array1[i];</span><br><span class="line">    	</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    	<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,array2[i]);</span><br><span class="line">    	</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 執行結果</p>
<pre><code> 1 2 3 4 5</code></pre>
</li>
<li><p>想要比較陣列是否相同，也必須一個元素一個元素比較</p>
</li>
<li><p>如果傳陣列到函數裡面，在函數裡面的改變會保留回到主函數，原因會在下一章說明</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify_array</span><span class="params">(<span class="keyword">int</span>[],<span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">array</span>[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;改變前：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line"> 		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,<span class="built_in">array</span>[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    modify_array(<span class="built_in">array</span>,<span class="number">5</span>); </span><br><span class="line">         </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;改變後：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line"> 		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,<span class="built_in">array</span>[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify_array</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[],<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line"> 		<span class="built_in">array</span>[i] *= <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 執行結果</p>
<pre><code> 改變前：1 2 3 4 5
 改變後：2 4 6 8 10</code></pre>
</li>
</ol>
<h2 id="二維陣列"><a href="#二維陣列" class="headerlink" title="二維陣列"></a>二維陣列</h2><p>如果你想統計全校成績，就需要使用二維陣列，宣告語法如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">變數型態 變數名稱[ROW][COLUMN];</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> score[<span class="number">5</span>][<span class="number">40</span>]; <span class="comment">// 5個班級，每班40個人</span></span><br></pre></td></tr></table></figure>

<p>二維陣列在宣告的時候指定初始值如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">2</span>][<span class="number">3</span>] = &#123;</span><br><span class="line">    &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>以下是二維陣列的範例程式，宣告了5列9行的二維陣列，num[i-1][j-1]表示取出第i-1列j-1行的元素</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">5</span>][<span class="number">9</span>] = &#123;&#125;;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; <span class="number">6</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt; <span class="number">10</span>; j++)&#123;</span><br><span class="line">            num[i<span class="number">-1</span>][j<span class="number">-1</span>] = i*j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; <span class="number">6</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt; <span class="number">10</span>; j++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,num[i<span class="number">-1</span>][j<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>1       2       3       4       5       6       7       8       9
2       4       6       8       10      12      14      16      18
3       6       9       12      15      18      21      24      27
4       8       12      16      20      24      28      32      36
5       10      15      20      25      30      35      40      45</code></pre>
<p>二維陣列實際上是一維陣列的變形，以下二維陣列的宣告實際上跟一維陣列的宣告是一樣的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> num[<span class="number">2</span>][<span class="number">3</span>] = &#123;</span><br><span class="line">        &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, </span><br><span class="line">        &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num[<span class="number">2</span>][<span class="number">3</span>] = &#123;	<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, </span><br><span class="line">                        <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以上兩個是一樣的</span></span><br></pre></td></tr></table></figure>

<p>而行與列是我們為了理解陣列元素的存取想像而來的，在記憶體中，二維陣列仍然是線性配置的</p>
<p>兩個索引值代表的意義都是跟陣列開頭偏移的量，只是第一個偏移量是以一維陣列計算</p>
<p>例如num[1][0]表示往後偏移一個長度為3的一維陣列</p>
<p>而num[1][2]則代表往後偏移一個長度為3的一維陣列，再往後偏移2個元素</p>
<p>如果想傳二維陣列到函數，不像一維陣列這麼簡單，以下是範例程式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_array</span><span class="params">(<span class="keyword">int</span>[][<span class="number">3</span>])</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">2</span>][<span class="number">3</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br><span class="line">    print_array(num);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一個索引值是可以不用填的</span></span><br><span class="line"><span class="comment">// 但是第二個索引值就必須要填</span></span><br><span class="line"><span class="comment">// 編譯器至少要知道二維陣列有幾行</span></span><br><span class="line"><span class="comment">// 這樣偏移才能準確偏移 N 個單位的一維陣列 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_array</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[][<span class="number">3</span>])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,<span class="built_in">array</span>[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>1       2       3
4       5       6</code></pre>
<h1 id="字串"><a href="#字串" class="headerlink" title="字串"></a>字串</h1><h2 id="宣告與使用"><a href="#宣告與使用" class="headerlink" title="宣告與使用"></a>宣告與使用</h2><p>在C語言裡面，字元陣列又稱為字串，由’\0’做結尾，宣告語法如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> str[<span class="number">20</span>]; <span class="comment">// 宣告可以輸入20字以內的字串</span></span><br></pre></td></tr></table></figure>

<p>你也可以像初始化陣列一樣初始化字串</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> str[] = <span class="string">&quot;Hello World!&quot;</span></span><br></pre></td></tr></table></figure>

<p>這邊要注意的是字串結尾’\0’也算是字元，所以上面這個字串的長度為13，而不是12</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> str[] = <span class="string">&quot;Hello World!&quot;</span>; </span><br><span class="line">    <span class="keyword">int</span> length = <span class="keyword">sizeof</span>(str)/<span class="keyword">sizeof</span>(str[<span class="number">0</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s的長度為：%d\n&quot;</span>,str,length);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; length; i++) &#123; </span><br><span class="line">        <span class="keyword">if</span>(str[i] == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;\\0&quot;</span>); </span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, str[i]); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>Hello World!的長度為：13
H e l l o   W o r l d ! \0</code></pre>
<p>也就是說，你宣告50個字元，實際上只有49個字元可以使用，如果超過上限會導致不可預期的爆炸XD</p>
<p>字串跟陣列一樣，除了初始化可以指定以外，其他時機是不能指定的，必須一個元素一個元素指定</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">15</span>] = &#123;<span class="string">&#x27;\0&#x27;</span>&#125;; </span><br><span class="line">    str[<span class="number">0</span>] = <span class="string">&#x27;W&#x27;</span>; </span><br><span class="line">    str[<span class="number">1</span>] = <span class="string">&#x27;h&#x27;</span>; </span><br><span class="line">    str[<span class="number">2</span>] = <span class="string">&#x27;a&#x27;</span>; </span><br><span class="line">    str[<span class="number">3</span>] = <span class="string">&#x27;t&#x27;</span>; </span><br><span class="line">    str[<span class="number">4</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    str[<span class="number">5</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    str[<span class="number">6</span>] = <span class="string">&#x27;t&#x27;</span>;</span><br><span class="line">    str[<span class="number">7</span>] = <span class="string">&#x27;h&#x27;</span>;</span><br><span class="line">    str[<span class="number">8</span>] = <span class="string">&#x27;e&#x27;</span>;</span><br><span class="line">    str[<span class="number">9</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    str[<span class="number">10</span>] = <span class="string">&#x27;f&#x27;</span>;</span><br><span class="line">    str[<span class="number">11</span>] = <span class="string">&#x27;u&#x27;</span>;</span><br><span class="line">    str[<span class="number">12</span>] = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">    str[<span class="number">13</span>] = <span class="string">&#x27;k&#x27;</span>;</span><br><span class="line">    str[<span class="number">14</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="built_in">puts</span>(str);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這邊要注意，上面只會顯示What，因為str[4]就會被認為是字串結尾，之後不管有什麼都不管</p>
<p>執行結果</p>
<pre><code>What</code></pre>
<p>字串其實就是一維陣列，所以傳參數到函數的方式跟陣列一樣，以下是示範程式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">char</span> str[])</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> str[] = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;反轉前：%s\n&quot;</span>,str);</span><br><span class="line">    </span><br><span class="line">    reverse(str);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;反轉後：%s\n&quot;</span>,str);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">char</span> str[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> length = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">int</span> i,j=length/<span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; j; i++)&#123;</span><br><span class="line">        <span class="keyword">char</span> c=str[i];</span><br><span class="line">        str[i] = str[length-i<span class="number">-1</span>];</span><br><span class="line">        str[length-i<span class="number">-1</span>] = c;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>反轉前：Hello World!
反轉後：!dlroW olleH</code></pre>
<h2 id="常用函數"><a href="#常用函數" class="headerlink" title="常用函數"></a>常用函數</h2><p>C語言提供了很多函數來操作字串，以下舉幾個常用例子</p>
<table>
<thead>
<tr>
<th>函數名稱</th>
<th>標頭檔</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>strlen</td>
<td>string.h</td>
<td>取得字串長度(不含’\0’)</td>
</tr>
<tr>
<td>strcpy</td>
<td>string.h</td>
<td>複製字串</td>
</tr>
<tr>
<td>strcat</td>
<td>string.h</td>
<td>連接字串</td>
</tr>
<tr>
<td>strcmp</td>
<td>string.h</td>
<td>比對字串</td>
</tr>
<tr>
<td>strstr</td>
<td>string.h</td>
<td>找出符合的子字串</td>
</tr>
<tr>
<td>atoi</td>
<td>stdlib.h</td>
<td>將字串轉為int</td>
</tr>
<tr>
<td>atol</td>
<td>stdlib.h</td>
<td>將字串轉為long</td>
</tr>
<tr>
<td>atof</td>
<td>stdlib.h</td>
<td>將字串轉為double</td>
</tr>
<tr>
<td>isalnum</td>
<td>ctype.h</td>
<td>是否為字母或數字</td>
</tr>
<tr>
<td>isalpha</td>
<td>ctype.h</td>
<td>是否為字母</td>
</tr>
<tr>
<td>isdigit</td>
<td>ctype.h</td>
<td>是否為數字</td>
</tr>
<tr>
<td>islower</td>
<td>ctype.h</td>
<td>是否為小寫字母</td>
</tr>
<tr>
<td>isupper</td>
<td>ctype.h</td>
<td>是否為大寫字母</td>
</tr>
</tbody></table>
<p>以下是幾個範例程式</p>
<ol>
<li><p>strlen範例程式</p>
<p> size_t是string.h所定義的資料型態，大部分為unsigned int</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line">                                                                                </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> input[] = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">size_t</span> length;</span><br><span class="line">    </span><br><span class="line">    length = <span class="built_in">strlen</span>(input);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;字串長度：%u\n&quot;</span>, length);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 執行結果</p>
<pre><code> 字串長度：12</code></pre>
</li>
<li><p>strcpy範例程式</p>
<p> 第一個參數是目標變數，第二個參數是你要複製的變數</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line">                                                                                </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> input[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">char</span> tmp[<span class="number">50</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;請輸入字串：&quot;</span>);</span><br><span class="line">    gets(input);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">strcpy</span>(tmp, input);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;複製後：%s\n&quot;</span>, tmp);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 執行結果</p>
<pre><code> 請輸入字串：
 Hello
 複製後：Hello</code></pre>
</li>
<li><p>strcat範例程式</p>
<p> 第一個參數是要被連接的變數，第二個參數是要連接上去的變數</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line">                                                                                </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> str1[<span class="number">50</span>] = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span> str2[] = <span class="string">&quot;World&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;串接前：%s\n&quot;</span>, str1);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">strcat</span>(str1, str2);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;串接後：%s\n&quot;</span>, str1);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 執行結果</p>
<pre><code> 串接前：Hello
 串接後：HelloWorld</code></pre>
</li>
<li><p>strcmp範例程式</p>
<p> 參數是兩個要比較的字串str1,str2，傳回-1代表str1&lt;str2，傳回0表示相等，傳回1表示str1&gt;str2</p>
<p> 比較方法是字典順序，字典順序就像字典在編排單字一樣，例如b大於a，ab大於aa</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line">                                                                                </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> str1[] = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span> str2[] = <span class="string">&quot;ab&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;str1 &lt; str2 %d\n&quot;</span>,<span class="built_in">strcmp</span>(str1, str2));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;str1 == str2 %d\n&quot;</span>,<span class="built_in">strcmp</span>(str1, str1));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;str1 &gt; str2 %d\n&quot;</span>,<span class="built_in">strcmp</span>(str2, str1));</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 執行結果</p>
<pre><code> a &lt; ab  -1
 a == a  0
 ab &gt; a  1</code></pre>
</li>
</ol>
<p>更多範例可以上<a href="http://www.cplusplus.com/reference/cstring/">string.h</a>還有<a href="http://www.cplusplus.com/reference/cctype/">ctype.h</a>查詢www</p>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/C%E8%AF%AD%E8%A8%80">C語言</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/OneDimArray.html">一維陣列</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/TwoDimArray.html">二維陣列</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/String.html">字串（字元陣列）</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/StringLengthCopyCat.html">字串長度、複製、串接</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/StringCmpSearch.html">字串比較、搜尋</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/StringParseTest.html">字串轉換、字元測試</a></li>
<li><a href="http://dhcp.tcgs.tc.edu.tw/c/p008.htm">陣列</a></li>
<li><a href="http://www.cplusplus.com/reference/cctype/">ctype.h</a></li>
<li><a href="http://www.cplusplus.com/reference/cstring/">string.h</a></li>
</ol>
]]></content>
      <categories>
        <category>C語言</category>
      </categories>
      <tags>
        <tag>C語言</tag>
      </tags>
  </entry>
  <entry>
    <title>C語言-指標</title>
    <url>/2015/10/27/C%E8%AA%9E%E8%A8%80-%E6%8C%87%E6%A8%99/</url>
    <content><![CDATA[<h1 id="指標與運算"><a href="#指標與運算" class="headerlink" title="指標與運算"></a>指標與運算</h1><p>變數除了它儲存的數值以外，還有記憶體位址，下面是示範程式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> var = <span class="number">10</span>; </span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;var 的值：%d\n&quot;</span>, var);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;var 的記憶體位址：%X\n&quot;</span>, &amp;var);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>var 的值：10
var 的記憶體位址：22FE4C</code></pre>
<p>一般變數提供對記憶體空間的直接存取，指標變數則提供間接存取</p>
<p>指標可以指向特定的記憶體位址而不直接操作到變數</p>
<p>指標變數的宣告語法如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">變數型態 *變數名稱;</span><br></pre></td></tr></table></figure>

<p>指標變數可以透過取址運算子&amp;來指定，下面是示範程式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> var = <span class="number">10</span>; </span><br><span class="line">    <span class="keyword">int</span> *ptr = &amp;var; <span class="comment">// 取得var的記憶體位址，讓ptr指向這位址</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;var 的位址：%X\n&quot;</span>, &amp;var);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;var 的值：%d\n&quot;</span>, var);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ptr 指向的位址：%X\n&quot;</span>, ptr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ptr 指向的位址的值：%d\n&quot;</span>, *ptr); </span><br><span class="line">    <span class="comment">// &#x27;*&#x27;運算子除了乘法以外，也當作取值運算子，負責取出記憶體位址裡的值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>var 的位址：22FE44
var 的值：10
ptr 指向的位址：22FE44
ptr 指向的位址的值：10</code></pre>
<p>當指標指向每個記憶體位址之後，如果你指定某個值給*ptr，被指向的值也會被改變</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> var = <span class="number">100</span>; </span><br><span class="line">    <span class="keyword">int</span> *ptr = &amp;var ; </span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;var = %d\n&quot;</span>, var);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*ptr = %d\n&quot;</span>, *ptr);</span><br><span class="line"></span><br><span class="line">    *ptr = <span class="number">200</span>; </span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;var = %d\n&quot;</span>, var);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*ptr = %d\n&quot;</span>, *ptr);</span><br><span class="line">             </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>var = 100
*ptr = 100
var = 200
*ptr = 200</code></pre>
<p>指標如果指向不明的記憶體位址是危險的，有可能造成程式爆炸，所以指定初始值是安全的作法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *ptr = <span class="literal">NULL</span>; <span class="comment">// 指向空指標</span></span><br></pre></td></tr></table></figure>

<p>NULL是透過#define定義為0的常數</p>
<p>#define會在之後的章節提到</p>
<p>另外新手可能會以為以下語法是宣告兩個指標變數</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>* ptr1,ptr2;</span><br></pre></td></tr></table></figure>

<p>而實際上要宣告兩個指標變數要這樣寫</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *ptr1,*ptr2;</span><br></pre></td></tr></table></figure>

<p>如果只打算拿記憶體位址做運算，不會牽涉到型態問題，可以使用void指標</p>
<pre><code>void *ptr;</code></pre>
<p>因為void指標只儲存位址資訊，所以不能直接提取資料，必須先轉換型態，例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">10</span>; </span><br><span class="line">    <span class="keyword">void</span> *ptr = &amp;num ; </span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 下面這句不可行，void型態指標不可取值 </span></span><br><span class="line">    <span class="comment">// printf(&quot;%d\n&quot;, *ptr);</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 轉型為int型態指標並指定給iptr </span></span><br><span class="line">    <span class="keyword">int</span> *iptr = (<span class="keyword">int</span>*) ptr;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *iptr);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>10</code></pre>
<p>除了指定運算子、取址運算子與取值運算子，指標還可以使用+、-、++、–、+=與-=等運算子</p>
<p>指標的加減法與一般數值的加減法不同，指標加1代表往後一個資料型態的長度</p>
<p>例如int指標加1表示記憶體位址加4位元組，double指標則加8位元組</p>
<p>減法則是往前N個資料型態的長度，下面是double指標的範例程式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">double</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">double</span> *ptr = &amp;num;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ptr 位置：%d\n&quot;</span>, ptr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ptr + 1：%d\n&quot;</span>, ptr + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ptr + 2：%d\n&quot;</span>, ptr + <span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>ptr 位置：2293312
ptr + 1：2293320
ptr + 2：2293328</code></pre>
<h1 id="傳指標給函數"><a href="#傳指標給函數" class="headerlink" title="傳指標給函數"></a>傳指標給函數</h1><p>C語言的函數呼叫都是傳值呼叫(Call by value)，也就是每次呼叫時都複製一份給函數</p>
<p>但是因為區域變數的關係，變數離開當前區域就失去效力了</p>
<p>如果想要傳參數給函數並且真正修改到變數的值的話，就必須靠傳址呼叫(Call by address)了</p>
<p>下面將透過交換兩個數字的函數說明傳值呼叫</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> num1 = <span class="number">10</span>,num2 = <span class="number">20</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交換前：%d %d\n&quot;</span>,num1,num2);</span><br><span class="line">    swap(num1,num2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交換後：%d %d\n&quot;</span>,num1,num2);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>交換前：10 20
交換後：10 20</code></pre>
<p>下面將透過交換兩個數字的函數說明傳址呼叫</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>*,<span class="keyword">int</span>*)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> num1 = <span class="number">10</span>,num2 = <span class="number">20</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交換前：%d %d\n&quot;</span>,num1,num2);</span><br><span class="line">    swap(&amp;num1,&amp;num2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交換後：%d %d\n&quot;</span>,num1,num2);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> *b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>交換前：10 20
交換後：20 10</code></pre>
<h1 id="指標與陣列"><a href="#指標與陣列" class="headerlink" title="指標與陣列"></a>指標與陣列</h1><p>其實陣列就是指標的應用，陣列名稱就是指向陣列第一個元素的指標，以下是範例程式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;; </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;arr :\t\t%X\n&quot;</span>, arr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;arr[0] :\t%X\n&quot;</span>, &amp;arr[<span class="number">0</span>]);</span><br><span class="line">             </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>arr :           22FE20
&amp;arr[0] :       22FE20</code></pre>
<p>陣列的索引值其實是相對於開頭的位移量，所以第一個元素是0，表示位移量是0</p>
<p>以下是索引值的範例程式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;; </span><br><span class="line">    <span class="keyword">int</span> *ptr = arr; </span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123; </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&amp;arr[%d]: %X&quot;</span>, i ,&amp;arr[i]); </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\tptr + %d: %X\n&quot;</span>, i, ptr + i);</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>&amp;arr[0]: 22FE10         ptr + 0: 22FE10
&amp;arr[1]: 22FE14         ptr + 1: 22FE14
&amp;arr[2]: 22FE18         ptr + 2: 22FE18
&amp;arr[3]: 22FE1C         ptr + 3: 22FE1C
&amp;arr[4]: 22FE20         ptr + 4: 22FE20
&amp;arr[5]: 22FE24         ptr + 5: 22FE24
&amp;arr[6]: 22FE28         ptr + 6: 22FE28
&amp;arr[7]: 22FE2C         ptr + 7: 22FE2C
&amp;arr[8]: 22FE30         ptr + 8: 22FE30
&amp;arr[9]: 22FE34         ptr + 9: 22FE34</code></pre>
<p>以下範例程式用來說明陣列跟指標的關係</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;; </span><br><span class="line">    <span class="keyword">int</span> *ptr = arr; </span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以指標方式存取資料 </span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;*(ptr + %d): %d\n&quot;</span>, i , *(ptr + i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以陣列方式存取資料 </span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ptr[%d]: %d\n&quot;</span>, i, ptr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以指標方式存取資料 </span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;*(arr + %d): %d\n&quot;</span>, i , *(arr + i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 以陣列方式存取資料 </span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;arr[%d]: %d\n&quot;</span>, i, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>*(ptr + 0): 10
*(ptr + 1): 20
*(ptr + 2): 30
*(ptr + 3): 40
*(ptr + 4): 50

ptr[0]: 10
ptr[1]: 20
ptr[2]: 30
ptr[3]: 40
ptr[4]: 50

*(arr + 0): 10
*(arr + 1): 20
*(arr + 2): 30
*(arr + 3): 40
*(arr + 4): 50

arr[0]: 10
arr[1]: 20
arr[2]: 30
arr[3]: 40
arr[4]: 50</code></pre>
<h1 id="指標與字串"><a href="#指標與字串" class="headerlink" title="指標與字串"></a>指標與字串</h1><p>字元指標可以指向一個字串常數，該字串常數會佔有一個記憶體空間，以下是示範程式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> *str = <span class="string">&quot;hell&quot;</span>; </span><br><span class="line">    <span class="keyword">char</span> *add = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">    add = str;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\t%X\n&quot;</span>, str, add);</span><br><span class="line"></span><br><span class="line">    str = <span class="string">&quot;world&quot;</span>; </span><br><span class="line">    add = str; </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\t%X\n&quot;</span>, str, add);</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>hell    404000
world    40400C</code></pre>
<p>可以看到兩個字串不同記憶體位址</p>
<p>但是要注意的是，如果使用陣列的方式宣告字串，是無法使用=指定運算子的</p>
<p>宣告陣列使用的空間是固定的，但是指標指定的字串長度可以不固定</p>
<h1 id="動態記憶體配置"><a href="#動態記憶體配置" class="headerlink" title="動態記憶體配置"></a>動態記憶體配置</h1><p>到目前為止，我們使用的都是先宣告好要使用什麼變數，程式執行時就配置好記憶體</p>
<p>但是有時候要程式執行到一半才知道需要多少記憶體，這時候就要使用malloc函數</p>
<p>下面這個語法會以動態的方式配置一個int型態大小的記憶體給ptr變數</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *ptr = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br></pre></td></tr></table></figure>

<p>但是這語法只配置空間，不會初始化變數的值</p>
<p>而動態配置的記憶體在程式結束前並不會<strong>自動</strong>歸還空間，所以必須需要使用free函數歸還記憶體</p>
<p>以下是陣列動態配置的範例程式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; // malloc跟free都定義在這 </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;請輸入陣列長度：&quot;</span>); </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;size); </span><br><span class="line">    <span class="keyword">int</span> *arr = <span class="built_in">malloc</span>(size * <span class="keyword">sizeof</span>(<span class="keyword">int</span>)); <span class="comment">// 配置記憶體 </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;顯示元素值：\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;arr[%d] = %d\n&quot;</span>, i, *(arr+i));</span><br><span class="line">    &#125; </span><br><span class="line">        </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;指定元素值：\n&quot;</span>); </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; size; i++) &#123; </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;arr[%d] = &quot;</span>, i); </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span> , arr + i); </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;顯示元素值：\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;arr[%d] = %d\n&quot;</span>, i, *(arr+i));</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(arr); <span class="comment">// 歸還空間 </span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>請輸入陣列長度：5
顯示元素值：
arr[0] = 7952432
arr[1] = 0
arr[2] = 7930200
arr[3] = 0
arr[4] = 0
指定元素值：
arr[0] = 1
arr[1] = 2
arr[2] = 3
arr[3] = 4
arr[4] = 5
顯示元素值：
arr[0] = 1
arr[1] = 2
arr[2] = 3
arr[3] = 4
arr[4] = 5</code></pre>
<h1 id="雙重指標"><a href="#雙重指標" class="headerlink" title="雙重指標"></a>雙重指標</h1><p>雙重指標簡單講就是指向指標的指標，指標指向一般變數，雙重指標則指向指標變數</p>
<p>以下是範例程式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">10</span>; </span><br><span class="line">    <span class="keyword">int</span> *ptr1 = &amp;p; </span><br><span class="line">    <span class="keyword">int</span> **ptr2 = &amp;ptr1; </span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p\t%d\n&quot;</span>, p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;p\t%X\n\n&quot;</span>, &amp;p); </span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*ptr1\t%d\n&quot;</span>, *ptr1); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ptr1\t%X\n&quot;</span>, ptr1); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;ptr1\t%X\n\n&quot;</span>, &amp;ptr1); </span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;**ptr2\t%d\n&quot;</span>, **ptr2); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*ptr2\t%X\n&quot;</span>, *ptr2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ptr2\t%X\n&quot;</span>, ptr2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;ptr2\t%X\n\n&quot;</span>, &amp;ptr2); </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>p       10
&amp;p      22FE4C

*ptr1   10
ptr1    22FE4C
&amp;ptr1   22FE40

**ptr2  10
*ptr2   22FE4C
ptr2    22FE40
&amp;ptr2   22FE38</code></pre>
<p>可以看得出來，ptr1指向了p的位址，而ptr2指向了ptr1的位址</p>
<p>雙重指標的使用時機通常用於傳回指標</p>
<p>例如想將函數裡面配置的記憶體空間取出來，以下是範例程式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">new_int_array</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>**)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span>* arr_ptr = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(new_int_array(<span class="number">5</span>,&amp;arr_ptr))&#123; <span class="comment">// 如果有配置成功的話 </span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">        	arr_ptr[i] = i+<span class="number">1</span>;</span><br><span class="line">        	</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">        	<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,arr_ptr[i]);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">new_int_array</span><span class="params">(<span class="keyword">int</span> length, <span class="keyword">int</span>** arr_ptr)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">int</span>* pData = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*length);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span> (pData == <span class="literal">NULL</span>)&#123; <span class="comment">// malloc配置失敗會回傳NULL</span></span><br><span class="line">   	</span><br><span class="line">     *arr_ptr = <span class="literal">NULL</span>;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//配置失敗</span></span><br><span class="line">     </span><br><span class="line">   &#125;</span><br><span class="line">   *arr_ptr = pData;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 配置成功</span></span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>1 2 3 4 5</code></pre>
<h1 id="函數指標"><a href="#函數指標" class="headerlink" title="函數指標"></a>函數指標</h1><p>程式在執行時，函數本身也在記憶體中佔有一段空間，而函數名稱則指向該記憶體空間</p>
<p>當呼叫函數的時候，程式就會去執行所指向的記憶體空間中的指令</p>
<p>指標也可以指向函數，語法如下</p>
<pre><code>回傳值型態 (*指標名稱)(參數列);</code></pre>
<p>函數型態由回傳值型態與參數列決定，不包括函式名稱</p>
<p>一個函數指標可指向具有相同型態的函式，也就是具有相同回傳值型態和參數列的函數</p>
<p>下面示範程式裡面，ptr指向func函數，可以看到ptr跟func有相同功效</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> (*ptr)() = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">    ptr = func; </span><br><span class="line"></span><br><span class="line">    func(<span class="number">5</span>); </span><br><span class="line">    ptr(<span class="number">5</span>); </span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;address of foo:%X\n&quot;</span>, (<span class="keyword">int</span>) func);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;address of foo:%X\n&quot;</span>, (<span class="keyword">int</span>) ptr);</span><br><span class="line">           </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Print:%d\n&quot;</span>,num); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>Print:5
Print:5
address of foo:401597
address of foo:401597</code></pre>
<p>函數指標的優點在於彈性</p>
<p>例如以下程式碼使用了函數指標，省去了switch的麻煩</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func3</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func4</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func5</span><span class="params">()</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> (*key[<span class="number">5</span>])() = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    key[<span class="number">0</span>] = func1;</span><br><span class="line">    key[<span class="number">1</span>] = func2;</span><br><span class="line">    key[<span class="number">2</span>] = func3;</span><br><span class="line">    key[<span class="number">3</span>] = func4;</span><br><span class="line">    key[<span class="number">4</span>] = func5;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">char</span> c = getch();</span><br><span class="line">        <span class="keyword">if</span>(c&gt;=<span class="string">&#x27;1&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;5&#x27;</span>) key[c-<span class="string">&#x27;1&#x27;</span>]();</span><br><span class="line">    &#125;</span><br><span class="line">   	</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;你按了1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;你按了2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;你按了3&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;你按了4&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;你按了5&quot;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/C%E8%AF%AD%E8%A8%80">C語言</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/Pointer.html">指標與記憶體位址</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/PointerArithmetic.html">指標的運算</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/PointerAndArray.html">指標與陣列</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/PointerAndString.html">指標與字串</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/MallocFree.html">malloc()、free()、calloc() 與 realloc()</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/DoublePointer.html">雙重指標</a></li>
<li><a href="http://imil.au.edu.tw/~hsichcl/TurboC/C_Unit10.htm">陣 列 與 指 標</a></li>
</ol>
]]></content>
      <categories>
        <category>C語言</category>
      </categories>
      <tags>
        <tag>C語言</tag>
      </tags>
  </entry>
  <entry>
    <title>C語言-struct、union、enum</title>
    <url>/2015/10/30/C%E8%AA%9E%E8%A8%80-struct%E3%80%81union%E3%80%81enum/</url>
    <content><![CDATA[<h1 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h1><h2 id="定義與使用"><a href="#定義與使用" class="headerlink" title="定義與使用"></a>定義與使用</h2><p>如果要使用多種資料型態做運算而且資料間又有關係</p>
<p>可以使用struct來包裝不同型態的資料</p>
<p>struct通常用來定義儲存檔案的紀錄，或者各種資料結構</p>
<p>struct宣告語法如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 結構名稱&#123;</span></span><br><span class="line">    資料型態 變數名稱;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>例如你可以這樣定義一個員工的資料，別忘了在最後加上分號’;’</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Employee</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">30</span>]; <span class="comment">// 名字</span></span><br><span class="line">    <span class="keyword">int</span> age; <span class="comment">//年齡</span></span><br><span class="line">    <span class="keyword">char</span> gender; <span class="comment">// 性別，&#x27;M&#x27; or &#x27;F&#x27;</span></span><br><span class="line">    <span class="keyword">double</span> salary; <span class="comment">// 薪水</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Employee</span> <span class="title">employee</span>;</span> <span class="comment">// 宣告變數employee，記得前面要加struct </span></span><br></pre></td></tr></table></figure>

<p>接下來就是初始化變數了，你可以這樣初始化變數</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Employee</span> <span class="title">employee</span> =</span> &#123;<span class="string">&quot;gundam&quot;</span>,<span class="number">20</span>,<span class="string">&#x27;M&#x27;</span>,<span class="number">81000</span>&#125;; </span><br></pre></td></tr></table></figure>

<p>如果想指定其中一個變數，在變數後面加上小數點再接上成員名稱就可以了，例如</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">employee.age = <span class="number">30</span>;</span><br></pre></td></tr></table></figure>

<p>struct可以直接透過指定運算子’=’來指定，以下是範例程式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Employee</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">30</span>]; <span class="comment">// 名字</span></span><br><span class="line">    <span class="keyword">int</span> age; <span class="comment">//年齡</span></span><br><span class="line">    <span class="keyword">char</span> gender; <span class="comment">// 性別，&#x27;M&#x27; or &#x27;F&#x27;</span></span><br><span class="line">    <span class="keyword">double</span> salary; <span class="comment">// 薪水</span></span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Employee</span> <span class="title">employee1</span> =</span> &#123;<span class="string">&quot;gundam&quot;</span>,<span class="number">20</span>,<span class="string">&#x27;M&#x27;</span>,<span class="number">81000</span>&#125;; </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Employee</span> <span class="title">employee2</span> =</span> &#123;<span class="string">&quot;提摩&quot;</span>,<span class="number">40</span>,<span class="string">&#x27;M&#x27;</span>,<span class="number">66000</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;name\t%s\n&quot;</span>,employee1.name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;age\t%d\n&quot;</span>,employee1.age);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;gender\t%c\n&quot;</span>,employee1.gender);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;salary\t%.2f\n&quot;</span>,employee1.salary);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">strcpy</span>(employee1.name, <span class="string">&quot;GGininder&quot;</span>);</span><br><span class="line">    employee1.age = <span class="number">30</span>;</span><br><span class="line">    employee1.salary = <span class="number">22000.0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;name\t%s\n&quot;</span>,employee1.name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;age\t%d\n&quot;</span>,employee1.age);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;gender\t%c\n&quot;</span>,employee1.gender);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;salary\t%.2f\n&quot;</span>,employee1.salary);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    employee1 = employee2;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;name\t%s\n&quot;</span>,employee1.name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;age\t%d\n&quot;</span>,employee1.age);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;gender\t%c\n&quot;</span>,employee1.gender);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;salary\t%.2f\n&quot;</span>,employee1.salary);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>name    gundam
age     20
gender  M
salary  81000.00

name    GGininder
age     30
gender  M
salary  22000.00

name    提摩
age     40
gender  M
salary  66000.00</code></pre>
<p>struct是不能用==跟!=來判斷是否相等的</p>
<p>因為struct的成員變數在記憶體空間裡面有可能是不連續的</p>
<h2 id="struct與指標"><a href="#struct與指標" class="headerlink" title="struct與指標"></a>struct與指標</h2><p>struct是不能含有自己的，但是可以包含指標，例如</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Employee</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">30</span>]; <span class="comment">// 名字</span></span><br><span class="line">    <span class="keyword">int</span> age; <span class="comment">//年齡</span></span><br><span class="line">    <span class="keyword">char</span> gender; <span class="comment">// 性別，&#x27;M&#x27; or &#x27;F&#x27;</span></span><br><span class="line">    <span class="keyword">double</span> salary; <span class="comment">// 薪水</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Employee</span> *<span class="title">ptr</span>;</span> <span class="comment">// 指標</span></span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure>

<p>這樣含有指標的struct稱為自我參考，這在後期的資料結構會提到</p>
<p>在使用指標的時候，C語言提供結構指標運算子’-&gt;’來存取成員變數</p>
<p>結構指標運算子’-&gt;’跟’(*指標).成員變數’是相等的，只是’-&gt;’比較方便使用</p>
<p>以下是範例程式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Employee</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">30</span>]; <span class="comment">// 名字</span></span><br><span class="line">    <span class="keyword">int</span> age; <span class="comment">//年齡</span></span><br><span class="line">    <span class="keyword">char</span> gender; <span class="comment">// 性別，&#x27;M&#x27; or &#x27;F&#x27;</span></span><br><span class="line">    <span class="keyword">double</span> salary; <span class="comment">// 薪水</span></span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initEmployee</span><span class="params">(struct Employee*,<span class="keyword">char</span>[],<span class="keyword">int</span>,<span class="keyword">char</span>,<span class="keyword">double</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Employee</span> <span class="title">employee</span>;</span></span><br><span class="line">    </span><br><span class="line">    initEmployee(&amp;employee,<span class="string">&quot;gundam&quot;</span>,<span class="number">20</span>,<span class="string">&#x27;M&#x27;</span>,<span class="number">81000</span>); </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;name\t%s\n&quot;</span>,employee.name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;age\t%d\n&quot;</span>,employee.age);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;gender\t%c\n&quot;</span>,employee.gender);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;salary\t%.2f\n&quot;</span>,employee.salary);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initEmployee</span><span class="params">(struct Employee *employee,<span class="keyword">char</span> name[],<span class="keyword">int</span> age,<span class="keyword">char</span> gender,<span class="keyword">double</span> salary)</span></span>&#123;</span><br><span class="line">    <span class="built_in">strcpy</span>(employee-&gt;name, name);</span><br><span class="line">    employee-&gt;age = age;</span><br><span class="line">    employee-&gt;gender = gender;</span><br><span class="line">    employee-&gt;salary = salary;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>name    gundam
age     20
gender  M
salary  81000.00</code></pre>
<h2 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h2><p>typedef保留字可以為資料型態建立別名，例如</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> uint;</span><br></pre></td></tr></table></figure>

<p>之後uint就會被當作unsigned來看待</p>
<p>所以以下語法可以讓我們用更簡單的語法宣告變數</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Employee</span> <span class="title">Emp</span>;</span></span><br><span class="line"></span><br><span class="line">Emp employee;</span><br></pre></td></tr></table></figure>

<p>這樣前面就可以不用加上struct了，程式的可讀性也可以提升</p>
<p>你也可以省略struct標籤直接寫別名</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">30</span>]; <span class="comment">// 名字</span></span><br><span class="line">    <span class="keyword">int</span> age; <span class="comment">//年齡</span></span><br><span class="line">    <span class="keyword">char</span> gender; <span class="comment">// 性別，&#x27;M&#x27; or &#x27;F&#x27;</span></span><br><span class="line">    <span class="keyword">double</span> salary; <span class="comment">// 薪水</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Employee</span> *<span class="title">ptr</span>;</span> <span class="comment">// 指標</span></span><br><span class="line">&#125;Emp; </span><br></pre></td></tr></table></figure>

<p>而特別要注意的是函數指標的別名，例如</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*CMP)</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br></pre></td></tr></table></figure>

<p>這樣是宣告一個別名叫CMP，型態是回傳值為int，參數列為(int,int)的函數指標</p>
<h2 id="位元欄位"><a href="#位元欄位" class="headerlink" title="位元欄位"></a>位元欄位</h2><p>位元欄位(Bit fields)使用時機在於記憶體空間跟配合硬體實作</p>
<p>位元欄位的宣告方式是在unsigned或int的成員後面加上冒號’:’以及欄位寬度</p>
<p>宣告語法如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">File</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> modified : <span class="number">1</span>; <span class="comment">// 使用1位元</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> mode : <span class="number">2</span>;  <span class="comment">// 使用2位元</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> owner : <span class="number">3</span>; <span class="comment">// 使用3位元</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> group : <span class="number">3</span>; <span class="comment">// 使用3位元</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>以下是範例程式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">File</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> modified : <span class="number">1</span>; <span class="comment">// 使用1位元</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> mode : <span class="number">2</span>;  <span class="comment">// 使用2位元</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> owner : <span class="number">3</span>; <span class="comment">// 使用3位元</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> group : <span class="number">3</span>; <span class="comment">// 使用3位元</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initFile</span><span class="params">(struct File*,<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">File</span> <span class="title">file</span>;</span></span><br><span class="line">    </span><br><span class="line">    initFile(&amp;file,<span class="number">0</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">7</span>); </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;modified\t%d\n&quot;</span>,file.modified);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;mode\t\t%d\n&quot;</span>,file.mode);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;owner\t\t%d\n&quot;</span>,file.owner);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;group\t\t%d\n&quot;</span>,file.group);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);	</span><br><span class="line">    </span><br><span class="line">    initFile(&amp;file,<span class="number">0</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">8</span>); </span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;modified\t%d\n&quot;</span>,file.modified);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;mode\t\t%d\n&quot;</span>,file.mode);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;owner\t\t%d\n&quot;</span>,file.owner);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;group\t\t%d\n&quot;</span>,file.group); <span class="comment">// overflow惹www </span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initFile</span><span class="params">(struct File* file,<span class="keyword">int</span> modified,<span class="keyword">int</span> mode,<span class="keyword">int</span> owner,<span class="keyword">int</span> group)</span></span>&#123;</span><br><span class="line">    file-&gt;modified = modified;</span><br><span class="line">    file-&gt;mode = mode;</span><br><span class="line">    file-&gt;owner = owner;</span><br><span class="line">    file-&gt;group = group;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>modified        0
mode            0
owner           7
group           7

modified        0
mode            0
owner           7
group           0</code></pre>
<h1 id="union"><a href="#union" class="headerlink" title="union"></a>union</h1><p>union跟struct一樣，都是產生一種新的資料型態，只是不同的是</p>
<p>struct是每個成員變數都配置一段空間，union則是共用一段記憶體空間</p>
<p>union所需的記憶體空間大小由最大的成員變數覺得，例如以下union的大小為8位元組</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">var</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">int</span> num1;</span><br><span class="line">    <span class="keyword">double</span> num2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>union能執行的操作跟struct一樣</p>
<p>例如指定、取址、使用結構成員運算子’.’跟使用結構指標運算子’-&gt;’</p>
<p>以下是union的範例程式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">Var</span>&#123;</span> </span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">int</span> num1;</span><br><span class="line">    <span class="keyword">double</span> num2;</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">Var</span> <span class="title">var</span> =</span> &#123;<span class="string">&#x27;x&#x27;</span>&#125;; <span class="comment">// 初始化只能指定第一個成員</span></span><br><span class="line">    <span class="comment">// union Var var = &#123;123&#125;; 這句是不行的</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;var.ch = %c\n&quot;</span>,var.ch); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;var.num1 = %d\n&quot;</span>,var.num1); <span class="comment">// 內容是無效的 </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;var.num2 = %.3f\n\n&quot;</span>,var.num2); <span class="comment">// 內容是無效的 </span></span><br><span class="line">    </span><br><span class="line">    var.num1 = <span class="number">123</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;var.ch = %c\n&quot;</span>,var.ch); <span class="comment">// 內容是無效的 </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;var.num1 = %d\n&quot;</span>,var.num1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;var.num2 = %.3f\n\n&quot;</span>,var.num2); <span class="comment">// 內容是無效的</span></span><br><span class="line">    </span><br><span class="line">    var.num2 = <span class="number">456.789</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;var.ch = %c\n&quot;</span>,var.ch); <span class="comment">// 內容是無效的 </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;var.num1 = %d\n&quot;</span>,var.num1); <span class="comment">// 內容是無效的</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;var.num2 = %.3f\n\n&quot;</span>,var.num2);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>var.ch = x
var.num1 = 120
var.num2 = 0.000

var.ch = &#123;
var.num1 = 123
var.num2 = 0.000

var.ch = ?
var.num1 = -1099511628
var.num2 = 456.789</code></pre>
<h1 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h1><p>C語言提供最後一種自定型態為enum，是一組由識別字所代表的整數常數</p>
<p>除非特別指定，不然都是由0開始，接下來遞增1，例如以下語法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">week</span>&#123;</span>Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday&#125;;</span><br></pre></td></tr></table></figure>

<p>以上從Sunday開始，各個識別字被依序設定為0到6，你也可以指定數值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">week</span>&#123;</span>Monday=<span class="number">1</span>,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday&#125;;</span><br></pre></td></tr></table></figure>

<p>這樣數字就會被指定1到7，以下是enum的範例程式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">week</span>&#123;</span>Monday=<span class="number">1</span>,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">week</span> <span class="title">w</span>;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *day_name[] = &#123;</span><br><span class="line">        <span class="string">&quot;&quot;</span>,<span class="string">&quot;Monday&quot;</span>,<span class="string">&quot;Tuesday&quot;</span>,<span class="string">&quot;Wednesday&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Thursday&quot;</span>,<span class="string">&quot;Friday&quot;</span>,<span class="string">&quot;Saturday&quot;</span>,<span class="string">&quot;Sunday&quot;</span> </span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(w=Monday; w &lt;= Sunday; w++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,day_name[w]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>Monday
Tuesday
Wednesday
Thursday
Friday
Saturday
Sunday</code></pre>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/C%E8%AF%AD%E8%A8%80">C語言</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/StructABC.html">struct 簡介</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/StructPoint.html">結構與指標</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/BitField.html">位元欄位</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/enum.html">enum</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/union.html">union</a></li>
</ol>
]]></content>
      <categories>
        <category>C語言</category>
      </categories>
      <tags>
        <tag>C語言</tag>
      </tags>
  </entry>
  <entry>
    <title>C語言-檔案I/O</title>
    <url>/2015/10/30/C%E8%AA%9E%E8%A8%80-%E6%AA%94%E6%A1%88I-O/</url>
    <content><![CDATA[<h1 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h1><p>儲存在變數的資料只是暫時的，想要在程式結束時儲存資料就必須靠檔案</p>
<p>這個章節要介紹的是如何操作檔案</p>
<h1 id="fopen-fclose"><a href="#fopen-fclose" class="headerlink" title="fopen,fclose"></a>fopen,fclose</h1><p>如果要處理檔案要用fopen來開啟檔案，fopen函數的原型宣告如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">FILE* <span class="title">fopen</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*, <span class="keyword">const</span> <span class="keyword">char</span>*)</span></span>;</span><br></pre></td></tr></table></figure>

<p>fopen的第一個參數是檔案名稱(路徑)，第二個參數是打開檔案的方式</p>
<p>以下表格是檔案打開的方式</p>
<table>
<thead>
<tr>
<th>模式</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>r</td>
<td>開啟檔案進行唯讀，若檔案不存在，則傳回NULL</td>
</tr>
<tr>
<td>w</td>
<td>開啟檔案進行唯寫，若檔案不存在，則建立新檔，若檔案存在則將之刪除，再建立新檔</td>
</tr>
<tr>
<td>a</td>
<td>開啟檔案進行附加，若檔案存在，則資料從檔案尾端寫入，若檔案不存在則建立新檔</td>
</tr>
<tr>
<td>rb</td>
<td>以二進位模式開啟檔案進行唯讀</td>
</tr>
<tr>
<td>wb</td>
<td>以二進位模式開啟檔案進行唯寫</td>
</tr>
<tr>
<td>ab</td>
<td>以二進位模式開啟檔案進行附加</td>
</tr>
<tr>
<td>r+</td>
<td>開啟檔案進行讀寫，若檔案不存在，則建立新檔，若檔案存在，資料將從檔案開頭進行覆寫</td>
</tr>
<tr>
<td>w+</td>
<td>開啟檔案進行讀寫，若檔案不存在，則建立新檔，若檔案存在則覆寫原有的資料</td>
</tr>
<tr>
<td>a+</td>
<td>開啟檔案進行附加、讀取，若檔案不存在則建立新檔，若檔案存在，則資料從檔案尾端寫入</td>
</tr>
<tr>
<td>r+b</td>
<td>以二進位方式開啟檔案進行讀寫</td>
</tr>
<tr>
<td>w+b</td>
<td>以二進位方式開啟檔案進行讀寫</td>
</tr>
<tr>
<td>a+b</td>
<td>以二進位方式開啟檔案進行附加、讀取</td>
</tr>
</tbody></table>
<p>fopen會使用緩衝區來減少I/O，以提高效率，所以在讀寫的過程中其實是對緩衝區做讀寫</p>
<p>使用檔案的好習慣就是不使用時就要使用fclose關閉，參數為檔案指標，以下為原型宣告</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fclose</span><span class="params">(FILE *fp)</span></span>;</span><br></pre></td></tr></table></figure>

<p>如果檔案正常關閉則回傳0，不正常關閉則回傳非0的數字</p>
<h2 id="fgetc-fputc-fgets-fputs"><a href="#fgetc-fputc-fgets-fputs" class="headerlink" title="fgetc,fputc,fgets,fputs"></a>fgetc,fputc,fgets,fputs</h2><p>開啟檔案後可以用fgetc讀取檔案的一個字元，用fputc輸出一個字元</p>
<p>函數宣告原型如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fgetc</span><span class="params">(FILE* fp)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fputc</span><span class="params">(<span class="keyword">int</span> ch, FILE *fp)</span></span>;</span><br></pre></td></tr></table></figure>

<p>fgetc傳檔案指標進去就可以取得該檔案的一個字元，直到檔案結尾EOF(End Of File)</p>
<p>可以像下面這樣判斷檔案結尾</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line">ch = fgetc(file);</span><br><span class="line"><span class="keyword">while</span>( ch != EOF ) &#123;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    ch = fgetc(file);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>fputc傳一個字元跟檔案指標就能寫一個字元進去</p>
<p>而如果想一次處理一行字串就要使用fgets、fputs，函數宣告原型如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">fgets</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">int</span> length, FILE *fp)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fputs</span><span class="params">(<span class="keyword">char</span> *str, FILE *fp)</span></span>;</span><br></pre></td></tr></table></figure>

<p>fgets第一個參數是要儲存的字串位址，第二個是要讀幾個字，由於最後一個字要是’\0’</p>
<p>所以真正的長度為length-1，第三個參數是檔案指標</p>
<p>fputs第一個參數是要輸出的字串，第二個參數是要輸出到哪個檔案</p>
<p>以下程式是示範用fgetc,fputc複製檔案</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line">                                                                                </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                  </span><br><span class="line">    FILE *file1 = fopen(<span class="string">&quot;source.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);                            </span><br><span class="line">    <span class="keyword">if</span>(!file1) &#123; </span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;來源檔案開啟失敗&quot;</span>); </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    FILE *file2 = fopen(<span class="string">&quot;target.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!file2) &#123; </span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;目的檔案開啟失敗&quot;</span>); </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    ch = fgetc(file1);                                      </span><br><span class="line">    <span class="keyword">while</span>(ch != EOF) &#123;</span><br><span class="line">     </span><br><span class="line">        fputc(ch, file2);</span><br><span class="line">        ch = fgetc(file1); </span><br><span class="line">        </span><br><span class="line">    &#125; </span><br><span class="line">          </span><br><span class="line">    fclose(file1);</span><br><span class="line">    fclose(file2);</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以下程式是示範用fgets,fputs複製檔案</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line">                                                                                </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                  </span><br><span class="line">    FILE *file1 = fopen(<span class="string">&quot;source.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);                            </span><br><span class="line">    <span class="keyword">if</span>(!file1) &#123; </span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;來源檔案開啟失敗&quot;</span>); </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    FILE *file2 = fopen(<span class="string">&quot;target.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!file2) &#123; </span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;目的檔案開啟失敗&quot;</span>); </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">while</span>(fgets(str, <span class="number">50</span>, file1) != <span class="literal">NULL</span>) &#123; </span><br><span class="line">        <span class="built_in">fputs</span>(str, file2);</span><br><span class="line">    &#125;</span><br><span class="line">          </span><br><span class="line">    fclose(file1);</span><br><span class="line">    fclose(file2);</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="fscanf-fprintf"><a href="#fscanf-fprintf" class="headerlink" title="fscanf,fprintf"></a>fscanf,fprintf</h2><p>檔案操作也可以做格式化，以下是原型宣告</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fprintf</span><span class="params">(FILE *fp, <span class="keyword">char</span> *formatstr, arg1, arg2, ...)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fscanf</span><span class="params">(FILE *fp, <span class="keyword">char</span> *formatstr, arg1, arg2, ...)</span></span>;</span><br></pre></td></tr></table></figure>

<p>除了第一個參數要給檔案指標以外，其餘跟scanf,printf一樣</p>
<p>以下是範例程式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line">                                                                                </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch; </span><br><span class="line"></span><br><span class="line">    FILE *file = fopen(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;w&quot;</span>); </span><br><span class="line">    <span class="keyword">if</span>(!file) &#123; </span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;無法寫入檔案&quot;</span>); </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(file, <span class="string">&quot;%s\t%d\r\n&quot;</span>, <span class="string">&quot;AAA&quot;</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(file, <span class="string">&quot;%s\t%d\r\n&quot;</span>, <span class="string">&quot;BBB&quot;</span>, <span class="number">90</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(file, <span class="string">&quot;%s\t%d\r\n&quot;</span>, <span class="string">&quot;CCC&quot;</span>, <span class="number">80</span>);    </span><br><span class="line"></span><br><span class="line">    fclose(file);</span><br><span class="line"></span><br><span class="line">    file = fopen(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);; </span><br><span class="line">    <span class="keyword">if</span>(!file) &#123; </span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;無法讀入檔案&quot;</span>); </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">10</span>]; </span><br><span class="line">    <span class="keyword">int</span> score; </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;名字\t分數&quot;</span>); </span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">fscanf</span>(file, <span class="string">&quot;%s\t%d&quot;</span>, name, &amp;score) != EOF) &#123; </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\t%d\n&quot;</span>, name, score); </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    fclose(file);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="fread-fwrite"><a href="#fread-fwrite" class="headerlink" title="fread,fwrite"></a>fread,fwrite</h2><p>使用二進位模式讀寫檔案就需要用fread,fwrite</p>
<p>讀寫二進位檔案都是使用位元組(Byte)為單位的區塊(Block)，以下為函數原型宣告</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fread</span><span class="params">(<span class="keyword">char</span> *buffer, <span class="keyword">int</span> size, <span class="keyword">int</span> count, FILE *fp)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fwrite</span><span class="params">(<span class="keyword">char</span> *buffer, <span class="keyword">int</span> size, <span class="keyword">int</span> count, FILE *fp)</span></span>;</span><br></pre></td></tr></table></figure>

<p>fread的意思是將count個元素從fp檔案中讀出到buffer，每個元素大小為size位元組</p>
<p>fwrite的意思是從buffer寫入count個元素到fp檔案中，每個元素大小為size位元組</p>
<p>以下為複製檔案的範例程式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line">                                                                                </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">    FILE *file1 = fopen(<span class="string">&quot;source.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>); </span><br><span class="line">    FILE *file2 = fopen(<span class="string">&quot;target.txt&quot;</span>, <span class="string">&quot;wb&quot;</span>); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!file1) &#123; </span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;檔案讀入失敗&quot;</span>); </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!file2) &#123; </span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;檔案輸出失敗&quot;</span>); </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> ch; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!feof(file1)) &#123; </span><br><span class="line">        fread(&amp;ch, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="number">1</span>, file1);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!feof(file1)) &#123; </span><br><span class="line">            fwrite(&amp;ch, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="number">1</span>, file2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    fclose(file1); </span><br><span class="line">    fclose(file2); </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="fseek"><a href="#fseek" class="headerlink" title="fseek"></a>fseek</h2><p>開啟檔案的時候，會有一個指標指向檔案開頭，每次讀取幾個字元，就會往後位移</p>
<p>C語言提供fseek來位移這個指標，方便我們要從任一地方讀取檔案</p>
<p>以下為fseek的函數原型宣告</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fseek</span><span class="params">(FILE *fp, <span class="keyword">long</span> offset, <span class="keyword">int</span> mode)</span></span>;</span><br></pre></td></tr></table></figure>

<p>第一個參數是檔案，第二個參數為偏移量，第三個參數是從哪裡位移</p>
<p>以下是位移模式的說明</p>
<table>
<thead>
<tr>
<th>位移模式</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>SEEK_SET</td>
<td>檔案開頭</td>
</tr>
<tr>
<td>SEEK_CUR</td>
<td>目前游標所在位置</td>
</tr>
<tr>
<td>SEEK_END</td>
<td>檔案結尾</td>
</tr>
</tbody></table>
<p>這種檔案操作稱為非循序的檔案存取，一般會使用二進位模式搭配自定的資料結構</p>
<p>以下是範例程式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line">     </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Employee</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">30</span>]; <span class="comment">// 名字</span></span><br><span class="line">    <span class="keyword">int</span> age; <span class="comment">//年齡</span></span><br><span class="line">    <span class="keyword">char</span> gender; <span class="comment">// 性別，&#x27;M&#x27; or &#x27;F&#x27;</span></span><br><span class="line">    <span class="keyword">double</span> salary; <span class="comment">// 薪水</span></span><br><span class="line">&#125;;</span><br><span class="line">             </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printPrompt</span><span class="params">()</span></span>;</span><br><span class="line">                                                                         </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 </span></span><br><span class="line">    FILE *file = fopen(<span class="string">&quot;data.bin&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> count; </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;要建立幾筆資料？ &quot;</span>); </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;count);</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Employee</span> <span class="title">employee</span> =</span> &#123;<span class="string">&quot;&quot;</span>,<span class="number">0</span>,<span class="string">&#x27;\0&#x27;</span>,<span class="number">0.0</span>&#125;;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; count; i++) </span><br><span class="line">        fwrite( &amp;employee, <span class="keyword">sizeof</span>(employee), <span class="number">1</span>, file); </span><br><span class="line">    </span><br><span class="line">    fclose(file);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 讀取 </span></span><br><span class="line">    count = <span class="number">0</span>; </span><br><span class="line">    </span><br><span class="line">    file = fopen(<span class="string">&quot;data.bin&quot;</span>, <span class="string">&quot;r+b&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!file) &#123; </span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;無法讀取檔案&quot;</span>); </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123; </span><br><span class="line">        fread(&amp;employee, <span class="keyword">sizeof</span>(employee), <span class="number">1</span>, file); </span><br><span class="line">        <span class="keyword">if</span>(!feof(file)) &#123;</span><br><span class="line">            count++; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    rewind(file); <span class="comment">// 等同於 fseek(file, 0, SEEK_SET); </span></span><br><span class="line">         </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;輸入序號(1-%d)\n&quot;</span>, count);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;輸入0離開&quot;</span>); </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123; </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n序號? &quot;</span>); </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;id); </span><br><span class="line">        <span class="keyword">if</span>(id == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;輸入名字 年齡 性別 薪水\n=&gt; &quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s %d %c %lf&quot;</span>, employee.name, &amp;(employee.age), &amp;(employee.gender), &amp;(employee.salary)); </span><br><span class="line"></span><br><span class="line">        fseek(file, (id - <span class="number">1</span>) * <span class="keyword">sizeof</span>(employee), SEEK_SET); </span><br><span class="line">        fwrite(&amp;employee, <span class="keyword">sizeof</span>(employee), <span class="number">1</span>, file);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;輸入序號(1-%d)\n&quot;</span>, count);</span><br><span class="line">    	<span class="built_in">puts</span>(<span class="string">&quot;輸入0離開&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    fclose(file); </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>要建立幾筆資料？ 5
現在開始輸入資料
輸入序號(1-5)
輸入0離開

序號? 1
輸入名字 年齡 性別 薪水
=&gt; Gundam 20 M 81000
輸入序號(1-5)
輸入0離開

序號? 5
輸入名字 年齡 性別 薪水
=&gt; Box 20 M 22000
輸入序號(1-5)
輸入0離開

序號? 0
現在輸出所有資料
名字    年齡    性別    薪水
Gundam  20      M       81000.00
        0       0       0.00
        0       0       0.00
        0       0       0.00
Box     20      M       22000.00</code></pre>
<h1 id="freopen"><a href="#freopen" class="headerlink" title="freopen"></a>freopen</h1><p>freopen跟fopen不一樣的地方是fopen是打開檔案</p>
<p>freopen是重新導向串流(stream)直到程式結束為止，以下是函數原型宣告</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">FILE * <span class="title">freopen</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> * filename, <span class="keyword">const</span> <span class="keyword">char</span> * mode, FILE * stream )</span></span>;</span><br></pre></td></tr></table></figure>

<p>第一個參數是檔案名稱，第二個是檔案模式，第三個則是要重新導向的串流</p>
<p>串流分為stdin(標準輸入)、stdout(標準輸出)、stderr(標準錯誤)</p>
<p>以下是範例程式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line">                                                                                </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                  </span><br><span class="line">    <span class="comment">// 把檔案導向到標準輸入 </span></span><br><span class="line">    freopen(<span class="string">&quot;source.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="comment">// 把標準輸出重新導向到檔案 </span></span><br><span class="line">    freopen(<span class="string">&quot;target.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>); </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">while</span>(gets(str) != <span class="literal">NULL</span>) &#123; </span><br><span class="line">        <span class="built_in">puts</span>(str);</span><br><span class="line">    &#125;</span><br><span class="line">          </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/C%E8%AF%AD%E8%A8%80">C語言</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/UnFormatFileIO.html">未格式化檔案 I/O</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/FormatFileIO.html">格式化檔案 I/O</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/BinaryFileIO.html">二進位檔案 I/O</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/StreamCursor.html">資料流游標</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/RandomAccessFile.html">隨機存取檔案</a></li>
</ol>
]]></content>
      <categories>
        <category>C語言</category>
      </categories>
      <tags>
        <tag>C語言</tag>
      </tags>
  </entry>
  <entry>
    <title>C語言-標頭檔與前置處理器</title>
    <url>/2015/10/31/C%E8%AA%9E%E8%A8%80-%E6%A8%99%E9%A0%AD%E6%AA%94%E8%88%87%E5%89%8D%E7%BD%AE%E8%99%95%E7%90%86%E5%99%A8/</url>
    <content><![CDATA[<h1 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h1><p>這一個章節要介紹如何撰寫標頭檔，以及如何使用前置處理器</p>
<p>前置處理是在程式編譯之前所做的事，包括引入標頭檔、定義符號常數以及巨集</p>
<p>所有前置處理都是由井字號’#’開始</p>
<h1 id="標頭檔與實作檔"><a href="#標頭檔與實作檔" class="headerlink" title="標頭檔與實作檔"></a>標頭檔與實作檔</h1><p>首先我們要先了解程式從撰寫到執行的過程，請看下圖</p>
<p><img src="/2015/10/31/C%E8%AA%9E%E8%A8%80-%E6%A8%99%E9%A0%AD%E6%AA%94%E8%88%87%E5%89%8D%E7%BD%AE%E8%99%95%E7%90%86%E5%99%A8/%E6%A8%99%E9%A0%AD%E6%AA%94%E8%88%87%E5%89%8D%E7%BD%AE%E8%99%95%E7%90%86%E5%99%A8-1.PNG" alt="程式執行過程"></p>
<p>程式原始碼在經過編譯器(Compiler)編譯之後會成為目的檔(Object file)</p>
<p>然後多個目的檔透過連結器(Linker)連結之後會形成可執行檔(Executable file)</p>
<p>之後可執行檔經過載入器(Loader)載入到記憶體中執行</p>
<p>當程式越來越龐大的時候，我們會為了保持彈性將單一功能切割為標頭檔跟實作檔</p>
<p>實作檔編譯成目的檔，要使用時再連結起來就行</p>
<p>這樣以後只要有錯誤只要處理小部分的程式</p>
<p>而標頭檔則提供介面，讓使用這段功能的人不用了解實作也能使用程式</p>
<p>以後實作檔改變了，只要重新編譯實作檔然後再連結一次就可以更改程式了</p>
<p>提高程式撰寫的彈性，而連結又分為靜態跟動態連結</p>
<p>這時候就要進入工商時間<del>(推坑時間)</del>啦</p>
<p>可以找<a href="http://www.books.com.tw/products/0010456858">程式設計師的自我修養：連結、載入、程式庫</a>這本書來看</p>
<p>可以更了解程式如何連結與執行</p>
<p>詳細可以參考這個<a href="https://www.ptt.cc/bbs/C_and_CPP/M.1303074820.A.905.html">連結</a></p>
<p>以下會寫一個標頭檔，一個實作檔，一個執行檔當作範例</p>
<p>標頭檔 calc.h</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//宣告函數原型</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br></pre></td></tr></table></figure>

<p>實作檔 calc.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;calc.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//實作函數</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a-b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行檔 main.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;calc.h&quot;</span></span></span><br><span class="line">                                                                        </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                  </span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">5</span>,b = <span class="number">3</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;b = %d\n&quot;</span>,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;add(a,b) = %d\n&quot;</span>,add(a,b));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sub(a,b) = %d\n&quot;</span>,sub(a,b)); </span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>a = 5
b = 3
add(a,b) = 8
sub(a,b) = 2</code></pre>
<p>這邊要注意的是，如果是用箭頭&lt;&gt;括起來的標頭檔</p>
<p>會從系統預設的路徑去找標頭檔</p>
<p>而用雙引號””括起來的標頭檔，系統會到被編譯的檔案所在的目錄去找</p>
<h1 id="define"><a href="#define" class="headerlink" title="#define"></a>#define</h1><p>#define的語法如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> 識別字 代換文字</span></span><br></pre></td></tr></table></figure>

<p>#define語法會在編譯過程中，將所有識別字都替換為代換文字，例如</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14159</span></span><br></pre></td></tr></table></figure>

<p>之後整個程式只要看到’PI’就會自動被替換成3.14159，例如</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">area</span><span class="params">(<span class="keyword">double</span> radius)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> radius * radius * PI;</span><br><span class="line">    <span class="comment">//會被代換成 radius * radius * 3.14159;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意這不是宣告常數，所以不要在代換文字前面加上等號’=’</p>
<p>以下是範例程式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14159</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">area</span><span class="params">(<span class="keyword">double</span>)</span></span>;	</span><br><span class="line">                                                                    </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                 </span><br><span class="line">    <span class="keyword">double</span> r; </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;請輸入半徑：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;r);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;圓面積：%f\n&quot;</span>,area(r));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">area</span><span class="params">(<span class="keyword">double</span> radius)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> radius * radius * PI;</span><br><span class="line">    <span class="comment">//會被代換成 radius * radius * 3.14159;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>請輸入半徑：4
圓面積：50.265440</code></pre>
<p>巨集是由#define所定義的運算，跟符號常數一樣都是在編譯的時候代換文字</p>
<p>不同的是巨集可以有引數，以下是計算圓面積的巨集</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14159</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AREA(r) ((PI * (x) * (x)))</span></span><br></pre></td></tr></table></figure>

<p>之後只要寫到AREA()就會自動展開為以下算式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> area = AREA(<span class="number">4</span>)</span><br><span class="line"><span class="comment">// 會被替換成 double area = (3.14159 * (4) * (4))</span></span><br></pre></td></tr></table></figure>

<p>這邊要小心的是括號問題</p>
<p>如果沒有寫好括號，寫成((PI * x * x))，會展開成以下結果</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> area = AREA(<span class="number">4</span> + <span class="number">2</span>)</span><br><span class="line"><span class="comment">// 會被替換成 double area = (3.14159*4 + 2*4 + 2)</span></span><br></pre></td></tr></table></figure>

<p>所以將引數用括號括起來是非常重要的</p>
<p>如果要代換的文字太長，可以使用反斜線\表示下一行還有代換文字</p>
<p>以下是兩整數交換寫成巨集的範例</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SWAP(a,b) int c = a; \ </span></span><br><span class="line">                  a = b; \</span><br><span class="line">                  b = c;</span><br></pre></td></tr></table></figure>

<p>這邊要強調的是，巨集並不是函數，只是在編譯過程中，將文字取代成代換文字</p>
<p>不使用巨集跟常數符號的時候，可以使用#undef來解除定義</p>
<h1 id="條件編譯"><a href="#條件編譯" class="headerlink" title="條件編譯"></a>條件編譯</h1><p>條件編譯可以讓設計者控制哪段程式要怎麼編譯</p>
<p>例如不同作業系統就編譯不同的程式碼，這樣就不用分開成兩個檔案去編譯了</p>
<p>以下是常看得的NULL的條件編譯</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(NULL)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> NULL 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>以上判斷NULL是否曾經定義為符號常數，若沒有就定義NULL為0</p>
<p>也可以簡寫成</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> NULL</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> NULL 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>只要是條件編譯都需要用#endif做結尾</p>
<p>另外還有指令#if defined(名稱)，可以簡寫成#ifdef</p>
<p>而如果有多個條件可以使用#elif跟#else，就像if-else一樣</p>
<p>條件編譯常用的用途可以在標頭檔前面看到</p>
<p>這邊再改寫上面標頭檔的實作當作範例</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _CALC_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CALC_H_</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//宣告函數原型</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>實作檔 calc.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;calc.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//實作函數</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a-b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行檔 main.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;calc.h&quot;</span></span></span><br><span class="line">                                                                        </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                  </span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">5</span>,b = <span class="number">3</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;b = %d\n&quot;</span>,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;add(a,b) = %d\n&quot;</span>,add(a,b));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sub(a,b) = %d\n&quot;</span>,sub(a,b)); </span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>為什麼這樣寫是為了避免重複引入，例如A標頭檔有引入stdio</p>
<p>B標頭檔也有引入stdio，如果沒有使用條件編譯</p>
<p>這樣會在編譯過程中產生重複宣告的錯誤</p>
<p>所以為了避免重複宣告，利用條件編譯，只要有定義過就不用再定義</p>
<p>以避免錯誤</p>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/C%E8%AF%AD%E8%A8%80">C語言</a></li>
<li><a href="http://pydoing.blogspot.tw/2010/06/c-header.html">C 語言快速導覽 - 標頭檔</a></li>
<li><a href="http://pydoing.blogspot.tw/2010/09/c-ch0614.html">C 語言初學教材 - 第六章 設計自己的標頭檔</a></li>
<li><a href="https://www.ptt.cc/bbs/C_and_CPP/M.1303074820.A.905.html">Re: [問題] 環境設定</a></li>
<li><a href="https://www.ptt.cc/bbs/C_and_CPP/M.1238929260.A.494.html">Re: [問題] C語言—要怎麼寫標頭檔阿??</a></li>
</ol>
]]></content>
      <categories>
        <category>C語言</category>
      </categories>
      <tags>
        <tag>C語言</tag>
      </tags>
  </entry>
  <entry>
    <title>C語言-進階探討</title>
    <url>/2015/11/01/C%E8%AA%9E%E8%A8%80-%E9%80%B2%E9%9A%8E%E6%8E%A2%E8%A8%8E/</url>
    <content><![CDATA[<h1 id="不定長度參數"><a href="#不定長度參數" class="headerlink" title="不定長度參數"></a>不定長度參數</h1><p>有時候函數不知道會有幾個參數要傳進來，例如printf跟scanf</p>
<p>這時候就需要用到不定長度參數，必須引入stdarg.h標頭檔</p>
<p>不定長度引數使用幾個識別字來建立不定長度引數</p>
<ul>
<li>va_list<br>  一種特殊的型態，在va_start、va_arg與va_end裡當作參數使用。</li>
<li>va_start<br>  啟始不定長度引數</li>
<li>va_arg<br>  讀取不定長度引數</li>
<li>va_end<br>  終止不定長度引數</li>
</ul>
<p>要宣告不定長度參數時，要在函數定義時使用’…’，表示要使用不定長度參數，而且告知要傳遞幾個參數</p>
<pre><code>void func(int, ...);</code></pre>
<p>然後在函數裡面使用va_arg取出參數時必須指定用什麼型態取出</p>
<pre><code>va_arg(num_list, double); </code></pre>
<p>以下為範例程式</p>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdarg.h&gt;

void func(int, ...);  

int main(void) &#123;
    double x = 1.1, y = 2.2, z = 3.3; 
    double a = 0.1, b = 0.2, c = 0.3; 

    puts(&quot;三個參數：&quot;); 
    func(3, x, y, z); 

    puts(&quot;六個參數：&quot;); 
    func(6, x, y, z, a, b, c); 

    return 0;
&#125;

void func(int length, ...) &#123; 

    double tmp; 

    va_list num_list; 

    va_start(num_list, length); 

    int i;
    for(i = 0; i &lt; length; i++) &#123;
        printf(&quot;%.2f\n&quot;, va_arg(num_list, double)); 
    &#125;

    va_end(num_list); 
&#125;</code></pre>
<p>執行結果</p>
<pre><code>三個參數：
1.10
2.20
3.30
六個參數：
1.10
2.20
3.30
0.10
0.20
0.30</code></pre>
<h1 id="命令列參數"><a href="#命令列參數" class="headerlink" title="命令列參數"></a>命令列參數</h1><p>程式在執行過程中，可以接受外在的參數來執行不同功能</p>
<p>例如在Windows底下的指令copy</p>
<pre><code>copy source.txt target.txt</code></pre>
<p>copy其實是一段程式，source.txt跟target.txt則是命令列參數</p>
<p>在之前的舉例中，main函數的括號總是空白的，而要使用命令列參數就要寫</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123; </span><br><span class="line">    .... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>argc是一個整數，紀錄有幾個參數，例如上面的copy程式的argc就是3</p>
<p>每個參數之間都用空白做區隔</p>
<p>而argv就是參數，argv[0]是”copy”，argv[1]是”source.txt”，argv[2]是”target.txt”</p>
<p>而如果你的參數中包含空白，就需要用雙引號””括起來，例如</p>
<pre><code>copy &quot;Hello World.txt&quot; target.txt</code></pre>
<p>這樣argv[0]就是是”copy”，argv[1]是”Hello World.txt”，argv[2]是”target.txt”了</p>
<p>以下舉檔案複製為範例程式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line">                                                                                </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(argc != <span class="number">3</span>) &#123; </span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;指令: copy &lt;來源檔案名稱&gt; &lt;目的檔案名稱&gt;&quot;</span>); </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">    &#125; </span><br><span class="line">                         </span><br><span class="line">    FILE *file1 = fopen(argv[<span class="number">1</span>], <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!file1) &#123; </span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;來源檔案開啟失敗&quot;</span>); </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    FILE *file2 = fopen(argv[<span class="number">2</span>], <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!file2) &#123; </span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;目的檔案開啟失敗&quot;</span>); </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">while</span>(fgets(str, <span class="number">50</span>, file1) != <span class="literal">NULL</span>) &#123; </span><br><span class="line">        <span class="built_in">fputs</span>(str, file2);</span><br><span class="line">    &#125; </span><br><span class="line">          </span><br><span class="line">    fclose(file1);</span><br><span class="line">    fclose(file2);</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="inline"><a href="#inline" class="headerlink" title="#inline"></a>#inline</h1><p>呼叫函數的時候，會因為需要分配記憶體空間，而產生一些效率上的負擔</p>
<p>為了提高效率，一些小函數可以建議編譯器像巨集一樣展開</p>
<p>這時候就需要用到inline保留字了</p>
<p>在宣告函數原型的時候加上inline，表示建議編譯器展開</p>
<p>如果編譯器判斷採納的話，才會展開程式碼</p>
<p>而判斷的標準視編譯器而定</p>
<p>以下是範例程式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line">             </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">square</span><span class="params">(<span class="keyword">int</span>)</span></span>; </span><br><span class="line">                                                                               </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d 的平方為 %d\n&quot;</span>,num,square(num));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">square</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num * num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>5 的平方為 25</code></pre>
<h1 id="static"><a href="#static" class="headerlink" title="static"></a>static</h1><p>當變數宣告的時候加上static時，該變數就會一直存在記憶體中直到程式結束</p>
<p>不管離開區塊還是區域都是一樣，以下是範例程式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">count</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        count();     </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">count</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> c = <span class="number">1</span>; </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, c); </span><br><span class="line">    c++; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果</p>
<pre><code>1
2
3
4
5
6
7
8
9
10</code></pre>
<p>static修飾之後表示只有該區域可以看到，例如修飾全域變數或者函數</p>
<p>這樣該變數或該函數只有那個檔案可以使用</p>
<p>使用時機在於此變數或函數不想被其他檔案所使用</p>
<p>或者不同檔案間可以使用相同名字的變數而不衝突</p>
<p>如果修飾在函數裡面，表示只有那個函數可以使用</p>
<p>很適合用來統計函數被呼叫了幾次</p>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><ol>
<li><a href="http://openhome.cc/Gossip/CGossip/Variable-lengthArgument.html">不定長度引數（Variable-length argument）</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/CommandArg.html">命令列引數</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/InlineFunction.html">行內函式（Inline function）</a></li>
<li><a href="http://openhome.cc/Gossip/CGossip/Scope.html">變數、函式可視範圍（static 與 extern）</a></li>
</ol>
]]></content>
      <categories>
        <category>C語言</category>
      </categories>
      <tags>
        <tag>C語言</tag>
      </tags>
  </entry>
  <entry>
    <title>初試語音辨識-聲音遙控車</title>
    <url>/2015/11/04/%E5%88%9D%E8%A9%A6%E8%AA%9E%E9%9F%B3%E8%BE%A8%E8%AD%98-%E8%81%B2%E9%9F%B3%E9%81%99%E6%8E%A7%E8%BB%8A/</url>
    <content><![CDATA[<p>本程式同步發表在github上面</p>
<h1 id="實作架構"><a href="#實作架構" class="headerlink" title="實作架構"></a>實作架構</h1><p>器材</p>
<ol>
<li>藍芽耳麥</li>
<li>藍芽接收器</li>
<li>Raspberry Pi 2 Model B</li>
<li>三輪自走車</li>
<li>L298N 馬達驅動板</li>
</ol>
<h1 id="藍芽接收器與raspberry-pi的連接"><a href="#藍芽接收器與raspberry-pi的連接" class="headerlink" title="藍芽接收器與raspberry pi的連接"></a>藍芽接收器與raspberry pi的連接</h1><p>Raspberry Pi 2的OS採用官方的OS：Raspbian</p>
<p>將從藍芽傳來的指令經由錄音串流到語音辨識進行處理。</p>
<h1 id="語音辨識簡介與流程"><a href="#語音辨識簡介與流程" class="headerlink" title="語音辨識簡介與流程"></a>語音辨識簡介與流程</h1><h2 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h2><p>CMU Sphinx是一個開放原始碼的語音辨識系統</p>
<p>架構上使用隱馬可夫模型(HMM)作為語音辨認的核心</p>
<p>利用n-gram構成的語言模型(LM)限制辦認的可能詞彙</p>
<p>以及所有詞彙所對應發音的字典檔。</p>
<p>本程式的語言模型限制只辨認前進、左轉、右轉、後退及停止等五個指令。</p>
<h2 id="程式碼架構"><a href="#程式碼架構" class="headerlink" title="程式碼架構"></a>程式碼架構</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">import</span> pyaudio</span><br><span class="line"><span class="keyword">import</span> wave</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> Popen</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep </span><br><span class="line"><span class="keyword">from</span> sphinxbase <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pocketsphinx <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> array <span class="keyword">import</span> array</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> byteorder</span><br><span class="line"><span class="keyword">from</span> array <span class="keyword">import</span> array</span><br><span class="line"><span class="keyword">from</span> Queue <span class="keyword">import</span> Queue, Full</span><br><span class="line"></span><br><span class="line">THRESHOLD = <span class="number">5000</span>  <span class="comment"># audio levels not normalised.</span></span><br><span class="line">CHUNK_SIZE = <span class="number">1024</span></span><br><span class="line">BUF_MAX_SIZE = CHUNK_SIZE * <span class="number">10</span></span><br><span class="line">SILENT_CHUNKS = <span class="number">1</span> * <span class="number">16000</span> / <span class="number">1024</span>  <span class="comment"># about 1sec</span></span><br><span class="line">FORMAT = pyaudio.paInt16</span><br><span class="line">FRAME_MAX_VALUE = <span class="number">2</span> ** <span class="number">15</span> - <span class="number">1</span></span><br><span class="line">NORMALIZE_MINUS_ONE_dB = <span class="number">10</span> ** (<span class="number">-1.0</span> / <span class="number">20</span>)</span><br><span class="line">RATE = <span class="number">16000</span></span><br><span class="line">CHANNELS = <span class="number">1</span></span><br><span class="line">TRIM_APPEND = RATE / <span class="number">4</span></span><br><span class="line"></span><br><span class="line">GPIO.setmode(GPIO.BOARD)</span><br><span class="line"></span><br><span class="line">Motor1A = <span class="number">16</span></span><br><span class="line">Motor1B = <span class="number">18</span></span><br><span class="line"><span class="comment">#Motor1E = 22</span></span><br><span class="line"> </span><br><span class="line">Motor2A = <span class="number">23</span></span><br><span class="line">Motor2B = <span class="number">21</span></span><br><span class="line"><span class="comment">#Motor2E = 19</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initGPIO</span>():</span></span><br><span class="line">    GPIO.setup(Motor1A,GPIO.OUT)</span><br><span class="line">    GPIO.setup(Motor1B,GPIO.OUT)</span><br><span class="line">    <span class="comment">#GPIO.setup(Motor1E,GPIO.OUT)</span></span><br><span class="line"> </span><br><span class="line">    GPIO.setup(Motor2A,GPIO.OUT)</span><br><span class="line">    GPIO.setup(Motor2B,GPIO.OUT)</span><br><span class="line">    <span class="comment">#GPIO.setup(Motor2E,GPIO.OUT)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initConfig</span>():</span></span><br><span class="line"></span><br><span class="line">    config = Decoder.default_config()</span><br><span class="line">    config.set_string(<span class="string">&#x27;-hmm&#x27;</span>, <span class="string">&quot;tdt_sc_8kadapt&quot;</span>)</span><br><span class="line">    config.set_string(<span class="string">&#x27;-lm&#x27;</span>, <span class="string">&quot;cmd.lm&quot;</span>)</span><br><span class="line">    config.set_string(<span class="string">&#x27;-dict&#x27;</span>, <span class="string">&quot;cmd.dic&quot;</span>)</span><br><span class="line">    config.set_string(<span class="string">&#x27;-logfn&#x27;</span>, <span class="string">&quot;/tmp/log.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_silent</span>(<span class="params">data_chunk</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns &#x27;True&#x27; if below the &#x27;silent&#x27; threshold&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(data_chunk) &lt; THRESHOLD</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize</span>(<span class="params">data_all</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Amplify the volume out to max -1dB&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># MAXIMUM = 16384</span></span><br><span class="line">    normalize_factor = (<span class="built_in">float</span>(NORMALIZE_MINUS_ONE_dB * FRAME_MAX_VALUE)</span><br><span class="line">                        / <span class="built_in">max</span>(<span class="built_in">abs</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> data_all))</span><br><span class="line"></span><br><span class="line">    r = array(<span class="string">&#x27;h&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data_all:</span><br><span class="line">        r.append(<span class="built_in">int</span>(i * normalize_factor))</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trim</span>(<span class="params">data_all</span>):</span></span><br><span class="line">    _from = <span class="number">0</span></span><br><span class="line">    _to = <span class="built_in">len</span>(data_all) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i, b <span class="keyword">in</span> <span class="built_in">enumerate</span>(data_all):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">abs</span>(b) &gt; THRESHOLD:</span><br><span class="line">            _from = <span class="built_in">max</span>(<span class="number">0</span>, i - TRIM_APPEND)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, b <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">reversed</span>(data_all)):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">abs</span>(b) &gt; THRESHOLD:</span><br><span class="line">            _to = <span class="built_in">min</span>(<span class="built_in">len</span>(data_all) - <span class="number">1</span>, <span class="built_in">len</span>(data_all) - <span class="number">1</span> - i + TRIM_APPEND)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line">    <span class="keyword">return</span> copy.deepcopy(data_all[_from:(_to + <span class="number">1</span>)])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recordContent</span>(<span class="params">stopped</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Record a word or words from the microphone and </span></span><br><span class="line"><span class="string">    return the data as an array of signed shorts.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    p = pyaudio.PyAudio()</span><br><span class="line">    stream = p.<span class="built_in">open</span>(<span class="built_in">format</span>=FORMAT, channels=CHANNELS, rate=RATE, <span class="built_in">input</span>=<span class="literal">True</span>, output=<span class="literal">True</span>, frames_per_buffer=CHUNK_SIZE)</span><br><span class="line"></span><br><span class="line">    silent_chunks = <span class="number">0</span></span><br><span class="line">    audio_started = <span class="literal">False</span></span><br><span class="line">    data_all = array(<span class="string">&#x27;h&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    count=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> stopped.wait(timeout=<span class="number">0</span>):</span><br><span class="line">        <span class="comment"># little endian, signed short</span></span><br><span class="line">        data_chunk = array(<span class="string">&#x27;h&#x27;</span>, stream.read(CHUNK_SIZE))</span><br><span class="line">        <span class="keyword">if</span> byteorder == <span class="string">&#x27;big&#x27;</span>:</span><br><span class="line">            data_chunk.byteswap()</span><br><span class="line">        data_all.extend(data_chunk)</span><br><span class="line">        silent = is_silent(data_chunk)</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> audio_started:</span><br><span class="line">            <span class="keyword">if</span> silent:</span><br><span class="line">                silent_chunks += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> silent_chunks &gt; SILENT_CHUNKS:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>: </span><br><span class="line">                silent_chunks = <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> silent:</span><br><span class="line">            audio_started = <span class="literal">True</span>       </span><br><span class="line"></span><br><span class="line">    sample_width = p.get_sample_size(FORMAT)</span><br><span class="line">    stream.stop_stream()</span><br><span class="line">    stream.close()</span><br><span class="line">    p.terminate()</span><br><span class="line"></span><br><span class="line">    data_all = trim(data_all)  <span class="comment"># we trim before normalize as threshhold applies to un-normalized wave (as well as is_silent() function)</span></span><br><span class="line">    data_all = normalize(data_all)</span><br><span class="line">    <span class="keyword">return</span> sample_width, pack(<span class="string">&#x27;&lt;&#x27;</span> + (<span class="string">&#x27;h&#x27;</span> * <span class="built_in">len</span>(data_all)), *data_all)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">driveMotor</span>(<span class="params">cmd</span>):</span></span><br><span class="line">    <span class="keyword">if</span> cmd == <span class="string">&#x27;前進&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;前進&#x27;</span></span><br><span class="line">        GPIO.output(Motor1A,GPIO.LOW)</span><br><span class="line">        GPIO.output(Motor1B,GPIO.HIGH)</span><br><span class="line">        <span class="comment">#GPIO.output(Motor1E,GPIO.HIGH)</span></span><br><span class="line"> </span><br><span class="line">        GPIO.output(Motor2A,GPIO.HIGH)</span><br><span class="line">        GPIO.output(Motor2B,GPIO.LOW)</span><br><span class="line">        <span class="comment">#GPIO.output(Motor2E,GPIO.HIGH)</span></span><br><span class="line">    <span class="keyword">elif</span> cmd == <span class="string">&#x27;後退&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;後退&#x27;</span></span><br><span class="line">        GPIO.output(Motor1A,GPIO.HIGH)</span><br><span class="line">        GPIO.output(Motor1B,GPIO.LOW)</span><br><span class="line">        <span class="comment">#GPIO.output(Motor1E,GPIO.HIGH)</span></span><br><span class="line"> </span><br><span class="line">        GPIO.output(Motor2A,GPIO.LOW)</span><br><span class="line">        GPIO.output(Motor2B,GPIO.HIGH)</span><br><span class="line">        <span class="comment">#GPIO.output(Motor2E,GPIO.HIGH)</span></span><br><span class="line">    <span class="keyword">elif</span> cmd == <span class="string">&#x27;右轉&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;右轉&#x27;</span></span><br><span class="line">        GPIO.output(Motor1A,GPIO.LOW)</span><br><span class="line">        GPIO.output(Motor1B,GPIO.HIGH)</span><br><span class="line">        <span class="comment">#GPIO.output(Motor1E,GPIO.HIGH)</span></span><br><span class="line">        </span><br><span class="line">        GPIO.output(Motor2A,GPIO.LOW)</span><br><span class="line">        GPIO.output(Motor2B,GPIO.HIGH)</span><br><span class="line">        <span class="comment">#GPIO.output(Motor2E,GPIO.HIGH)</span></span><br><span class="line">    <span class="keyword">elif</span> cmd == <span class="string">&#x27;左轉&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;左轉&#x27;</span></span><br><span class="line">        GPIO.output(Motor1A,GPIO.HIGH)</span><br><span class="line">        GPIO.output(Motor1B,GPIO.LOW)</span><br><span class="line">        <span class="comment">#GPIO.output(Motor1E,GPIO.HIGH)</span></span><br><span class="line">        </span><br><span class="line">        GPIO.output(Motor2A,GPIO.HIGH)</span><br><span class="line">        GPIO.output(Motor2B,GPIO.LOW)</span><br><span class="line">        <span class="comment">#GPIO.output(Motor2E,GPIO.HIGH)</span></span><br><span class="line">    <span class="keyword">elif</span> cmd == <span class="string">&#x27;停止&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;停止&#x27;</span></span><br><span class="line">        GPIO.output(Motor1A,GPIO.LOW)</span><br><span class="line">        GPIO.output(Motor1B,GPIO.LOW)</span><br><span class="line">        </span><br><span class="line">        GPIO.output(Motor2A,GPIO.LOW)</span><br><span class="line">        GPIO.output(Motor2B,GPIO.LOW)</span><br><span class="line">        </span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recognize</span>(<span class="params">stopped, q, config</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> stopped.wait(timeout=<span class="number">0</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        content = q.get()</span><br><span class="line">        <span class="keyword">if</span> content <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            decoder = Decoder(config)</span><br><span class="line">            decoder.start_utt()</span><br><span class="line">            decoder.process_raw(content,<span class="literal">False</span>,<span class="literal">True</span>)</span><br><span class="line">            decoder.end_utt()</span><br><span class="line">            cmds = decoder.hyp().hypstr.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            <span class="keyword">for</span> cmd <span class="keyword">in</span> cmds:</span><br><span class="line">                driveMotor(cmd)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;WTF!!&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listen</span>(<span class="params">stopped, q</span>):</span></span><br><span class="line">    stream = pyaudio.PyAudio().<span class="built_in">open</span>(</span><br><span class="line">        <span class="built_in">format</span>=pyaudio.paInt16,</span><br><span class="line">        channels=<span class="number">2</span>,</span><br><span class="line">        rate=<span class="number">44100</span>,</span><br><span class="line">        <span class="built_in">input</span>=<span class="literal">True</span>,</span><br><span class="line">        frames_per_buffer=<span class="number">1024</span>,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> stopped.wait(timeout=<span class="number">0</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            sample_width, data = recordContent(stopped)</span><br><span class="line">            q.put(data)</span><br><span class="line">        <span class="keyword">except</span> Full:</span><br><span class="line">            <span class="keyword">pass</span>  <span class="comment"># discard</span></span><br><span class="line">            </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    stopped = threading.Event()</span><br><span class="line">    q = Queue(maxsize=<span class="built_in">int</span>(<span class="built_in">round</span>(BUF_MAX_SIZE / CHUNK_SIZE)))</span><br><span class="line"></span><br><span class="line">    config = initConfig()</span><br><span class="line">    initGPIO()</span><br><span class="line">    </span><br><span class="line">    listen_t = threading.Thread(target=listen, args=(stopped, q))</span><br><span class="line">    listen_t.start()</span><br><span class="line">    recognize_t = threading.Thread(target=recognize, args=(stopped, q, config))</span><br><span class="line">    recognize_t.start()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            listen_t.join(<span class="number">0.1</span>)</span><br><span class="line">            recognize_t.join(<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        stopped.<span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="控制說明"><a href="#控制說明" class="headerlink" title="控制說明"></a>控制說明</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Motor1A = <span class="number">16</span></span><br><span class="line">Motor1B = <span class="number">18</span></span><br><span class="line"></span><br><span class="line">Motor2A = <span class="number">23</span></span><br><span class="line">Motor2B = <span class="number">21</span></span><br></pre></td></tr></table></figure>

<p>以上是指定控制腳位，對應到下圖的16、18、21及23</p>
<p><img src="/2015/11/04/%E5%88%9D%E8%A9%A6%E8%AA%9E%E9%9F%B3%E8%BE%A8%E8%AD%98-%E8%81%B2%E9%9F%B3%E9%81%99%E6%8E%A7%E8%BB%8A/%E5%88%9D%E8%A9%A6%E8%AA%9E%E9%9F%B3%E8%BE%A8%E8%AD%98-%E8%81%B2%E9%9F%B3%E9%81%99%E6%8E%A7%E8%BB%8A-1.png" alt="腳位圖1"></p>
<p>16、18、21及23腳位請參考下面兩張圖</p>
<p><img src="/2015/11/04/%E5%88%9D%E8%A9%A6%E8%AA%9E%E9%9F%B3%E8%BE%A8%E8%AD%98-%E8%81%B2%E9%9F%B3%E9%81%99%E6%8E%A7%E8%BB%8A/%E5%88%9D%E8%A9%A6%E8%AA%9E%E9%9F%B3%E8%BE%A8%E8%AD%98-%E8%81%B2%E9%9F%B3%E9%81%99%E6%8E%A7%E8%BB%8A-2.png" alt="腳位圖2"></p>
<p><img src="/2015/11/04/%E5%88%9D%E8%A9%A6%E8%AA%9E%E9%9F%B3%E8%BE%A8%E8%AD%98-%E8%81%B2%E9%9F%B3%E9%81%99%E6%8E%A7%E8%BB%8A/%E5%88%9D%E8%A9%A6%E8%AA%9E%E9%9F%B3%E8%BE%A8%E8%AD%98-%E8%81%B2%E9%9F%B3%E9%81%99%E6%8E%A7%E8%BB%8A-3.png" alt="腳位圖3"></p>
<p>以下為IC說明圖</p>
<p><img src="/2015/11/04/%E5%88%9D%E8%A9%A6%E8%AA%9E%E9%9F%B3%E8%BE%A8%E8%AD%98-%E8%81%B2%E9%9F%B3%E9%81%99%E6%8E%A7%E8%BB%8A/%E5%88%9D%E8%A9%A6%E8%AA%9E%E9%9F%B3%E8%BE%A8%E8%AD%98-%E8%81%B2%E9%9F%B3%E9%81%99%E6%8E%A7%E8%BB%8A-4.png" alt="IC說明圖"></p>
<p>下表是腳位電壓與動作說明</p>
<table>
<thead>
<tr>
<th>In1(In3)</th>
<th>In2(In4)</th>
<th>Out1(out3)</th>
<th>out2(out4)</th>
<th>馬達狀態</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>0</td>
<td></td>
<td></td>
<td>停止</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>前進</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>後退</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td></td>
<td></td>
<td>停止</td>
</tr>
</tbody></table>
<p>若以上面圖的自走車圖片而言</p>
<p>黑線為OUT1對應到pin 16(motor1A)、紅線為pin 18(motor1B)</p>
<p>motor2黑線為OUT4(IN4)為pin 23(motor2A)、紅線為pin 21(motor2B)</p>
<p>當右轉時，motor1為前進、motor2為後退，所以程式碼為</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">elif</span> cmd == <span class="string">&#x27;右轉&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;右轉&#x27;</span></span><br><span class="line">    GPIO.output(Motor1A,GPIO.LOW)</span><br><span class="line">    GPIO.output(Motor1B,GPIO.HIGH)</span><br><span class="line">    </span><br><span class="line">    GPIO.output(Motor2A,GPIO.LOW)</span><br><span class="line">    GPIO.output(Motor2B,GPIO.HIGH)</span><br></pre></td></tr></table></figure>

<h1 id="demo影片"><a href="#demo影片" class="headerlink" title="demo影片"></a>demo影片</h1><div class="video-container"><iframe src="https://www.youtube.com/embed/ZJntNTvb_g8" frameborder="0" loading="lazy" allowfullscreen></iframe></div>

<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><ol>
<li><a href="http://stackoverflow.com/questions/892199/detect-record-audio-in-python">Detect &amp; Record Audio in Python</a></li>
<li><a href="http://computers.tutsplus.com/tutorials/controlling-dc-motors-using-python-with-a-raspberry-pi--cms-20051">Controlling DC Motors Using Python With a Raspberry Pi</a></li>
<li><a href="http://cmusphinx.sourceforge.net/wiki/tutorialconcepts">Basic concepts of speech</a></li>
<li><a href="http://blog.csdn.net/zouxy09/article/details/7941585">语音识别的基础知识与CMUsphinx介绍</a></li>
<li><a href="http://unix.stackexchange.com/questions/161820/bluetooth-manager-window-wont-open">Bluetooth manager window won’t open</a></li>
<li>   <a href="http://www.dotblogs.com.tw/bowwowxx/archive/2014/04/17/144774.aspx">Raspberry pi 記錄2-設定wifi、藍芽</a></li>
<li>   <a href="https://www.raspberrypi.org/documentation/configuration/audio-config.md">AUDIO CONFIGURATION</a></li>
<li>   <a href="http://ruten-proteus.blogspot.tw/2014/02/L298NGuide.html">L298N 馬達驅動板接線說明與正反轉程式測試</a></li>
<li>   <a href="http://computers.tutsplus.com/tutorials/controlling-dc-motors-using-python-with-a-raspberry-pi--cms-20051">Controlling DC Motors Using Python With a Raspberry Pi</a></li>
<li>   <a href="http://blog.csdn.net/zouxy09/article/details/7942784">PocketSphinx語音辨識系統的編譯、安裝和使用</a></li>
<li>   <a href="http://blog.csdn.net/zouxy09/article/details/7949126">PocketSphinx語音辨識系統語言模型的訓練和聲學模型的改進</a></li>
<li>   <a href="http://blog.csdn.net/zouxy09/article/details/7962382">PocketSphinx語音辨識系統聲學模型的訓練與使用</a></li>
<li>   <a href="https://sites.google.com/site/raspberypishare0918/home/di-yi-ci-qi-dong/1-7-hdmi-zhuan-vga">HDMI轉VGA</a></li>
<li>   <a href="https://www.raspberrypi.org/downloads/">OS(NOOBS)下載</a></li>
</ol>
]]></content>
      <categories>
        <category>語音辨識</category>
      </categories>
      <tags>
        <tag>語音辨識</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>第一次玩 Android NDK+openCV 就上手</title>
    <url>/2015/11/13/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%8E%A9-Android-NDK-openCV-%E5%B0%B1%E4%B8%8A%E6%89%8B/</url>
    <content><![CDATA[<p>因為最近工作在移植前人寫的code，將C++程式碼重寫成Java程式碼似乎有點不實際</p>
<p>而且我又不太想認真看懂所有程式(眼神死)XD</p>
<p>所以就想試試看很潮的 NDK</p>
<h1 id="安裝-NDK"><a href="#安裝-NDK" class="headerlink" title="安裝 NDK"></a>安裝 NDK</h1><p>首先到<a href="http://developer.android.com/intl/zh-tw/ndk/downloads/index.html">下載頁面</a>下載 NDK 套件，並且解壓縮到適合的資料夾</p>
<p>打開local.properties，設定 NDK 的路徑，如下圖</p>
<p><img src="/2015/11/13/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%8E%A9-Android-NDK-openCV-%E5%B0%B1%E4%B8%8A%E6%89%8B/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%8E%A9AndroidNDK+openCV%E5%B0%B1%E4%B8%8A%E6%89%8B-1.PNG" alt="設定NDK路徑"></p>
<p>打開</p>
<p><img src="/2015/11/13/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%8E%A9-Android-NDK-openCV-%E5%B0%B1%E4%B8%8A%E6%89%8B/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%8E%A9AndroidNDK+openCV%E5%B0%B1%E4%B8%8A%E6%89%8B-2.PNG" alt="設定 useDeprecatedNdk"></p>
<p>然後在 main 資料夾下建立 JNI Folder，如下圖</p>
<p><img src="/2015/11/13/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%8E%A9-Android-NDK-openCV-%E5%B0%B1%E4%B8%8A%E6%89%8B/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%8E%A9AndroidNDK+openCV%E5%B0%B1%E4%B8%8A%E6%89%8B-3.PNG" alt="建立 JNI Folder"></p>
<p>在 JNI 資料夾裡面建立 Android.mk 檔案</p>
<p><img src="/2015/11/13/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%8E%A9-Android-NDK-openCV-%E5%B0%B1%E4%B8%8A%E6%89%8B/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%8E%A9AndroidNDK+openCV%E5%B0%B1%E4%B8%8A%E6%89%8B-4.PNG" alt="建立 JNI Folder"></p>
<p>在裡面輸入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LOCAL_PATH :&#x3D; $(call my-dir)</span><br><span class="line"></span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line"></span><br><span class="line">LOCAL_MODULE :&#x3D; MyLib</span><br><span class="line">LOCAL_SRC_FILES :&#x3D; main.c</span><br><span class="line"></span><br><span class="line">include $(BUILD_SHARED_LIBRARY)</span><br></pre></td></tr></table></figure>

<p>其中 LOCAL_MODULE 是要在 Java code 裡面使用的名稱</p>
<p>LOCAL_SRC_FILES是要編譯的檔案</p>
<p>如果有多個檔案要編譯</p>
<p>第一個檔案要用 “:=”</p>
<p>後面的檔案都要用 “+=”</p>
<p>接著在 JNI 資料夾裡面建立 Application.mk 檔案</p>
<p>在裡面輸入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">APP_ABI :&#x3D; armeabi-v7a</span><br></pre></td></tr></table></figure>

<p>接著打開 build.gradle 檔案</p>
<p><img src="/2015/11/13/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%8E%A9-Android-NDK-openCV-%E5%B0%B1%E4%B8%8A%E6%89%8B/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%8E%A9AndroidNDK+openCV%E5%B0%B1%E4%B8%8A%E6%89%8B-5.PNG" alt="建立 JNI Folder"></p>
<p>在 defaultConfig 裡面輸入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ndk&#123;</span><br><span class="line">    moduleName &quot;MyLib&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接著在 JNI 資料夾裡面建立 main.c 檔案</p>
<p>並在裡面輸入</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">Java_com_example_name_test_MainActivity_HelloFromJni(JNIEnv *env,jobject thiz)&#123;</span><br><span class="line">    <span class="keyword">return</span> (*env)-&gt;NewStringUTF(env,<span class="string">&quot;Hello From JNI&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這段意思是回傳”Hello From JNI”字串</p>
<p>接著回到專案的 MainActivity.java 檔</p>
<p>在裡面指定 lib 路徑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">    System.loadLibrary(<span class="string">&quot;MyLib&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接著宣告 public native String HelloFromJni();</p>
<p>以下是 MainActivity.java 的程式碼</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;MyLib&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">HelloFromJni</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Log.v(<span class="string">&quot;MainActivity&quot;</span>,<span class="string">&quot;Log from Jni = &quot;</span> + HelloFromJni());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以下是執行結果</p>
<p><img src="/2015/11/13/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%8E%A9-Android-NDK-openCV-%E5%B0%B1%E4%B8%8A%E6%89%8B/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%8E%A9AndroidNDK+openCV%E5%B0%B1%E4%B8%8A%E6%89%8B-6.PNG" alt="執行結果"></p>
<h1 id="安裝-openCV"><a href="#安裝-openCV" class="headerlink" title="安裝 openCV"></a>安裝 openCV</h1><p>安裝完 NDK 後，接著是安裝 openCV</p>
<p>首先先去<a href="http://opencv.org/downloads.html">下載頁面</a>下載 OpenCV for Android，並且解壓縮到適合的資料夾</p>
<p>接著到 File -&gt; New -&gt; Import Module 引入 sdk\java，命名為 opencv-java</p>
<p><img src="/2015/11/13/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%8E%A9-Android-NDK-openCV-%E5%B0%B1%E4%B8%8A%E6%89%8B/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%8E%A9AndroidNDK+openCV%E5%B0%B1%E4%B8%8A%E6%89%8B-7.PNG" alt="Import Module"></p>
<p>接著到 opencv-java 裡面打開 build.gradle 檔案</p>
<p>修改裡面的 sdk version，不然編譯會有問題</p>
<p><img src="/2015/11/13/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%8E%A9-Android-NDK-openCV-%E5%B0%B1%E4%B8%8A%E6%89%8B/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%8E%A9AndroidNDK+openCV%E5%B0%B1%E4%B8%8A%E6%89%8B-8.PNG" alt="修改 sdk version"></p>
<p>打開在 build.gradle 檔案，在裡面加入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sourceSets.main &#123;</span><br><span class="line">    jni.srcDirs &#x3D; [] &#x2F;&#x2F;disable automatic ndk-build call</span><br><span class="line">&#125;</span><br><span class="line">task ndkBuild(type: Exec, description: &#39;Compile JNI source via NDK&#39;) &#123;</span><br><span class="line">    commandLine &quot;C:\\android-ndk-r10e\\ndk-build.cmd&quot;,</span><br><span class="line">            &#39;NDK_PROJECT_PATH&#x3D;build\\intermediates\\ndk&#39;,</span><br><span class="line">            &#39;NDK_LIBS_OUT&#x3D;src\\main\\jniLibs&#39;,</span><br><span class="line">            &#39;APP_BUILD_SCRIPT&#x3D;src\\main\\jni\\Android.mk&#39;,</span><br><span class="line">            &#39;NDK_APPLICATION_MK&#x3D;src\\main\\jni\\Application.mk&#39;</span><br><span class="line">&#125;</span><br><span class="line">tasks.withType(JavaCompile) &#123;</span><br><span class="line">    compileTask -&gt; compileTask.dependsOn ndkBuild</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2015/11/13/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%8E%A9-Android-NDK-openCV-%E5%B0%B1%E4%B8%8A%E6%89%8B/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%8E%A9AndroidNDK+openCV%E5%B0%B1%E4%B8%8A%E6%89%8B-9.PNG" alt="修改 build.gradle"></p>
<p>接著到剛剛的 Android.mk 檔案加入以下指令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">OPENCVROOT :&#x3D; C:\OpenCV-2.4.9-android-sdk</span><br><span class="line">OPENCV_INSTALL_MODULES :&#x3D; on</span><br><span class="line">OPENCV_LIB_TYPE :&#x3D; SHARED</span><br><span class="line">include $&#123;OPENCVROOT&#125;\sdk\native\jni\OpenCV.mk</span><br><span class="line"></span><br><span class="line">LOCAL_LDLIBS +&#x3D; -llog</span><br></pre></td></tr></table></figure>

<p>打開 Application.mk 檔案加入以下指令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">APP_STL :&#x3D; gnustl_static</span><br><span class="line">APP_CPPFLAGS :&#x3D; -frtti -fexceptions</span><br><span class="line">APP_PLATFORM :&#x3D; android-23</span><br></pre></td></tr></table></figure>

<p>接著就可以編譯 opencv 的檔案了</p>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><ol>
<li><a href="http://rx1226.pixnet.net/blog/post/290556217-%5Bandroid%5D-4-4-%E5%9C%A8android-studio%E4%BD%BF%E7%94%A8jni">[Android] 4-4 在Android Studio使用JNI</a></li>
<li><a href="https://github.com/quanhua92/NDK_OpenCV_AndroidStudio">NDK_OpenCV_AndroidStudio</a></li>
</ol>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>openCV</tag>
      </tags>
  </entry>
  <entry>
    <title>第一次用 C++ 寫 DLL 就上手</title>
    <url>/2015/12/01/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%94%A8-C-%E5%AF%AB-DLL-%E5%B0%B1%E4%B8%8A%E6%89%8B/</url>
    <content><![CDATA[<h1 id="DLL-簡介"><a href="#DLL-簡介" class="headerlink" title="DLL 簡介"></a>DLL 簡介</h1><p>動態連結函式庫（英語：Dynamic-link library，縮寫為DLL）是微軟公司在微軟視窗作業系統中實作共享函式庫概念的一種實作方式。這些函式庫函式的副檔名是.DLL、.OCX（包含ActiveX控制的函式庫）或者.DRV（舊式的系統驅動程式)。</p>
<p>所謂動態連結，就是把一些經常會共用的程式碼（靜態連結的OBJ程式庫）製作成DLL檔，當執行檔呼叫到DLL檔內的函式時，Windows作業系統才會把DLL檔載入記憶體內，DLL檔本身的結構就是可執行檔，當程式需求函式才進行連結。透過動態連結方式，記憶體浪費的情形將可大幅降低。靜態連結函式庫則是直接連結到執行檔。</p>
<p>DLL的文件格式與視窗EXE文件一樣——也就是說，等同於32位元視窗的可移植執行文件（PE）和16位元視窗的New Executable（NE）。作為EXE格式，DLL可以包括原始碼、資料和資源的多種組合。</p>
<p>在更廣泛的意義上說，任何同樣文件格式的電腦檔案都可以稱作資源DLL。這樣的DLL的例子有副檔名為ICL的圖示函式庫、副檔名為FON和FOT的字型文件。</p>
<h1 id="DLL-的撰寫"><a href="#DLL-的撰寫" class="headerlink" title="DLL 的撰寫"></a>DLL 的撰寫</h1><p>本文件是用 Visual Studio 2012 來做 DLL 開發示範</p>
<p>首先開新專案 TestDLL2012</p>
<p><img src="/2015/12/01/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%94%A8-C-%E5%AF%AB-DLL-%E5%B0%B1%E4%B8%8A%E6%89%8B/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%94%A8C++%E5%AF%ABDLL%E5%B0%B1%E4%B8%8A%E6%89%8B-1.png" alt="開新專案1"></p>
<p><img src="/2015/12/01/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%94%A8-C-%E5%AF%AB-DLL-%E5%B0%B1%E4%B8%8A%E6%89%8B/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%94%A8C++%E5%AF%ABDLL%E5%B0%B1%E4%B8%8A%E6%89%8B-2.png" alt="開新專案2"></p>
<p>選擇應用程式類型 DLL</p>
<p><img src="/2015/12/01/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%94%A8-C-%E5%AF%AB-DLL-%E5%B0%B1%E4%B8%8A%E6%89%8B/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%94%A8C++%E5%AF%ABDLL%E5%B0%B1%E4%B8%8A%E6%89%8B-3.png" alt="選擇DLL"></p>
<p>然後 Visual Studio 會產生 TestDLL2012.h 跟 TestDLL2012.cpp</p>
<p>TestDLL2012.h</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下列 ifdef 區塊是建立巨集以協助從 DLL 匯出的標準方式。</span></span><br><span class="line"><span class="comment">// 這個 DLL 中的所有檔案都是使用命令列中所定義 TESTDLL2012_EXPORTS 符號編譯的。</span></span><br><span class="line"><span class="comment">// 在命令列定義的符號。任何專案都不應定義這個符號</span></span><br><span class="line"><span class="comment">// 這樣一來，原始程式檔中包含這檔案的任何其他專案</span></span><br><span class="line"><span class="comment">// 會將 TESTDLL2012_API 函式視為從 DLL 匯入的，而這個 DLL 則會將這些符號視為</span></span><br><span class="line"><span class="comment">// 匯出的。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> TESTDLL2012_EXPORTS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TESTDLL2012_API __declspec(dllexport)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TESTDLL2012_API __declspec(dllimport)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 這個類別是從 TestDLL2012.dll 匯出的</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TESTDLL2012_API</span> <span class="title">CTestDLL2012</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    CTestDLL2012(<span class="keyword">void</span>);</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 在此加入您的方法。</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> TESTDLL2012_API <span class="keyword">int</span> nTestDLL2012;</span><br><span class="line"></span><br><span class="line"><span class="function">TESTDLL2012_API <span class="keyword">int</span> <span class="title">fnTestDLL2012</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure>

<p>TestDLL2012.cpp</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TestDLL2012.cpp : 定義 DLL 應用程式的匯出函式。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;TestDLL2012.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 這是匯出變數的範例</span></span><br><span class="line">TESTDLL2012_API <span class="keyword">int</span> nTestDLL2012=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 這是匯出函式的範例。</span></span><br><span class="line"><span class="function">TESTDLL2012_API <span class="keyword">int</span> <span class="title">fnTestDLL2012</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">42</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 這是已匯出的類別建構函式。</span></span><br><span class="line"><span class="comment">// 請參閱 TestDLL2012.h 中的類別定義</span></span><br><span class="line">CTestDLL2012::CTestDLL2012()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下來就按照 Visual Studio 的範例來寫函式吧~</p>
<p>首先在標頭檔加入 </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">TESTDLL2012_API <span class="keyword">int</span> __stdcall <span class="title">fnTestDll</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br></pre></td></tr></table></figure>

<p>然後在實作檔加入</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">TESTDLL2012_API <span class="keyword">int</span> __stdcall <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>為什麼加入 __stdcall 可以參考<a href="http://lionrex.pixnet.net/blog/post/63853531-%5Bc%2B%2B%5D-__stdcall-,__cdecl">這篇</a></p>
<p>之後加入 .def 檔案</p>
<p><img src="/2015/12/01/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%94%A8-C-%E5%AF%AB-DLL-%E5%B0%B1%E4%B8%8A%E6%89%8B/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%94%A8C++%E5%AF%ABDLL%E5%B0%B1%E4%B8%8A%E6%89%8B-4.png" alt="加入.def檔案"></p>
<p>在裡面加入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LIBRARY	&quot;TestDLL2012&quot;</span><br><span class="line"></span><br><span class="line">EXPORTS </span><br><span class="line">add @1</span><br></pre></td></tr></table></figure>

<p>之後在專案-&gt;屬性-&gt;連結器-&gt;輸入-&gt;模型定義檔</p>
<p>輸入 TestDLL2012.def </p>
<p>建置專案就行了</p>
<h1 id="VB-Net呼叫DLL"><a href="#VB-Net呼叫DLL" class="headerlink" title="VB.Net呼叫DLL"></a>VB.Net呼叫DLL</h1><p>將建置好的 .dll 檔跟複製到預設執行檔底下的資料夾</p>
<p>然後宣告 DLL 函式</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Public</span> <span class="keyword">Declare</span> <span class="keyword">Auto</span> <span class="keyword">Function</span> add <span class="keyword">Lib</span> <span class="string">&quot;TestDLL2012.dll&quot;</span> (<span class="keyword">ByVal</span> a <span class="keyword">As</span> <span class="built_in">Integer</span>, <span class="keyword">ByVal</span> b <span class="keyword">As</span> <span class="built_in">Integer</span>) <span class="keyword">As</span> <span class="built_in">Integer</span></span><br></pre></td></tr></table></figure>

<p>就可以在VB裡面呼叫這個函式囉&gt;.^</p>
<h1 id="C-呼叫DLL"><a href="#C-呼叫DLL" class="headerlink" title="C++呼叫DLL"></a>C++呼叫DLL</h1><p>將建置好的 .dll 檔跟 .lib 複製到跟 main.cpp 底下的資料夾</p>
<p>在 main.cpp 加入</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;TestDLL2012.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">3</span>, b = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> c = add(a,b);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;a + b = &quot;</span>&lt;&lt;c&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然後到專案-&gt;屬性-&gt;連結器-&gt;輸入-&gt;其他相依性</p>
<p>加入 TestDLL2012.lib</p>
<p>建置之後就可以執行了</p>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><ol>
<li><a href="https://zh.wikipedia.org/wiki/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93">動態連結函式庫</a></li>
</ol>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>DLL</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB 服務啟動失敗</title>
    <url>/2019/10/01/MongoDB-%E6%9C%8D%E5%8B%99%E5%95%9F%E5%8B%95%E5%A4%B1%E6%95%97/</url>
    <content><![CDATA[<p>MongoDB 安裝過程中，將 <code>data/log</code> 資料夾設定在預設值以外的地方，導致安裝完成後服務啟動失敗</p>
<a id="more"></a>

<h2 id="問題描述"><a href="#問題描述" class="headerlink" title="問題描述"></a>問題描述</h2><p>MongoDB Server 4.2 Community 安裝過程中，如果要把 <code>data/log</code> 資料夾設定在預設值以外的地方，安裝程式不會主動新增 <code>log</code> 檔案跟建立資料夾，導致服務啟動失敗。</p>
<h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><p>OS: Windows10</p>
<h2 id="排除過程"><a href="#排除過程" class="headerlink" title="排除過程"></a>排除過程</h2><ol>
<li><p>安裝畫面中 <code>Ignore</code> 錯誤後完成安裝程序</p>
</li>
<li><p>到安裝路徑下找到 <code>mongod.cfg</code> 檔案</p>
</li>
<li><p>建立路徑</p>
<p> 例如：</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">systemLog:</span></span><br><span class="line">    <span class="attr">destination:</span> <span class="string">file</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">D:\MongoDB\log\mongod.log</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">    <span class="attr">dbPath:</span> <span class="string">D:\MongoDB\data</span></span><br></pre></td></tr></table></figure>

<ol>
<li>建立 <code>D:\MongoDB\log\mongod.log</code> 檔案</li>
<li>建立 <code>D:\MongoDB\data</code> 資料夾</li>
</ol>
</li>
<li><p>重新啟動 MongoDB 服務</p>
</li>
<li><p>Done</p>
</li>
</ol>
]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>從 Azure DevOps 推送 source code 到 Gitlab Ci</title>
    <url>/2019/10/09/%E5%BE%9E-Azure-DevOps-%E6%8E%A8%E9%80%81-source-code-%E5%88%B0-Gitlab-Ci/</url>
    <content><![CDATA[<p>在 GitLab CI 上弄 ASP.NET Core 真的會搞到自己，來試試看 GitLab 能不能把 source code 推送到 Azure DevPps 上後再做 Build 跟 Test</p>
<a id="more"></a>

<h2 id="目標"><a href="#目標" class="headerlink" title="目標"></a>目標</h2><ol>
<li>透過 merge request events觸發 gitlab ci</li>
<li>讓事先寫好的 script 執行</li>
<li>將程式碼 push 到 Azure DevOps Repo 上</li>
</ol>
<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h3 id="產生-ssh-key"><a href="#產生-ssh-key" class="headerlink" title="產生 ssh key"></a>產生 ssh key</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -C <span class="string">&quot;user@example.com&quot;</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/c/Users/user/.ssh/id_rsa):</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /c/Users/user/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /c/Users/user/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:******************************************* user@example.com</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|+.   +yX*o .     |</span></span><br><span class="line"><span class="string">|... ..E+*=o      |</span></span><br><span class="line"><span class="string">|  ..o.=E=.o      |</span></span><br><span class="line"><span class="string">|   . * =.o .     |</span></span><br><span class="line"><span class="string">|    . S o o..    |</span></span><br><span class="line"><span class="string">|       + .oo     |</span></span><br><span class="line"><span class="string">|        S+.  .   |</span></span><br><span class="line"><span class="string">|        ..+.+    |</span></span><br><span class="line"><span class="string">|          o*..   |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure>

<h3 id="在-Azure-DevOps-Services-加入-public-key"><a href="#在-Azure-DevOps-Services-加入-public-key" class="headerlink" title="在 Azure DevOps Services 加入 public key"></a>在 Azure DevOps Services 加入 public key</h3><p><a href="https://docs.microsoft.com/en-us/azure/devops/repos/git/use-ssh-keys-to-authenticate?view=azure-devops#step-2--add-the-public-key-to-azure-devops-servicestfs">Connect to your Git repos with SSH - Azure Repos</a></p>
<h3 id="Create-gitlab-ci-yml"><a href="#Create-gitlab-ci-yml" class="headerlink" title="Create .gitlab-ci.yml"></a>Create <code>.gitlab-ci.yml</code></h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">microsoft/dotnet:latest</span></span><br><span class="line"></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">    <span class="attr">AZURE_URL:</span> <span class="string">git@ssh.dev.azure.com:v3/Oragnization/Project/gitlab-ci-test</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">    <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">    <span class="attr">script:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">chmod</span> <span class="string">+x</span> <span class="string">Script/*</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./Script/git-push</span> <span class="string">$AZURE_URL</span> <span class="string">$CI_COMMIT_REF_NAME</span></span><br><span class="line">    <span class="attr">only:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">merge_requests</span></span><br></pre></td></tr></table></figure>

<h3 id="GitLab-gt-Project-gt-Settings-gt-CI-CD-gt-Variables，加入變數-SSH-PRIVATE-KEY"><a href="#GitLab-gt-Project-gt-Settings-gt-CI-CD-gt-Variables，加入變數-SSH-PRIVATE-KEY" class="headerlink" title="GitLab &gt; Project &gt; Settings &gt; CI/CD &gt; Variables，加入變數 SSH_PRIVATE_KEY"></a>GitLab &gt; Project &gt; Settings &gt; CI/CD &gt; Variables，加入變數 <code>SSH_PRIVATE_KEY</code></h3><h2 id="參考連結"><a href="#參考連結" class="headerlink" title="參考連結"></a>參考連結</h2><ol>
<li><p><a href="https://github.com/IlyaSemenov/gitlab-ci-git-push">IlyaSemenov/gitlab-ci-git-push</a></p>
</li>
<li><p><a href="https://docs.microsoft.com/en-us/azure/devops/repos/git/use-ssh-keys-to-authenticate?view=azure-devops">Connect to your Git repos with SSH - Azure Repos</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>GitLab CI</tag>
        <tag>Azure DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>Azure Devops REST Api</title>
    <url>/2019/10/15/Azure-Devops-REST-Api/</url>
    <content><![CDATA[<p>呼叫 Azure Devops REST Api 過程中遇到的問題</p>
<a id="more"></a>

<h2 id="問題描述"><a href="#問題描述" class="headerlink" title="問題描述"></a>問題描述</h2><p>呼叫 5.1 版的 Azure Devops REST Api 會一直跳 <code>400 Bad Request</code></p>
<h2 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h2><p>Http Request 的 header.Accept 要加上 api version</p>
<p>例如: <code>$header.Accept = &quot;application/json;api-version=5.1&quot;</code></p>
<h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>官方文件研究很久都找不到問題，最後突然靈光一閃想到該不會某個欄位要傳版本但是文件沒寫吧。然後問題就莫名解決了WTF???</p>
]]></content>
  </entry>
  <entry>
    <title>AR.js 自訂 marker 注意事項</title>
    <url>/2019/10/30/AR-js-%E8%87%AA%E8%A8%82-marker-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A0%85/</url>
    <content><![CDATA[<p>AR.js 使用自訂 marker 卻一直抓不到，開 debug 模式也發現 ArToolkitContext 根本抓不到 pattern</p>
<a id="more"></a>

<p>Marker 中間的圖片，周邊最好填滿 RGB(240, 240, 240) 的顏色，不然 Detector 會抓不到 pattern</p>
<p>簡單的說，你眼中的白不是白(幹)</p>
<h2 id="參考連結"><a href="#參考連結" class="headerlink" title="參考連結"></a>參考連結</h2><ol>
<li><p><a href="https://jeromeetienne.github.io/AR.js/three.js/examples/marker-training/examples/generator.html">AR.js Marker Training</a></p>
</li>
<li><p><a href="https://github.com/jeromeetienne/AR.js/issues/437">Unable to create marker for custom marker using AR.js Marker Traning · Issue #437 · jeromeetienne/AR.js</a></p>
</li>
<li><p><a href="https://medium.com/chialab-open-source/ar-js-the-simpliest-way-to-get-cross-browser-ar-on-the-web-8f670dd45462">AR.js - The Simplest Way to get Cross-Browser Augmented Reality on the Web</a></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>AR.js</tag>
      </tags>
  </entry>
  <entry>
    <title>AR.js + QRCode 是否搞錯了什麼</title>
    <url>/2019/11/01/AR-js-QRCode-%E6%98%AF%E5%90%A6%E6%90%9E%E9%8C%AF%E4%BA%86%E4%BB%80%E9%BA%BC/</url>
    <content><![CDATA[<p>想要在 QRCode 中間的圖案加上 AR.js 的 Marker，然後實驗後被光速打臉</p>
<a id="more"></a>

<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ol>
<li>先到 <a href="https://jeromeetienne.github.io/AR.js/three.js/examples/marker-training/examples/generator.html">AR.js Marker Training</a> 網站做好 marker</li>
<li>製作 QRCode，並將中間的 Logo 設為 marker</li>
<li>然後被光速打臉</li>
</ol>
<h2 id="打臉原因"><a href="#打臉原因" class="headerlink" title="打臉原因"></a>打臉原因</h2><ol>
<li>marker 占用的是 QRCode 的容錯空間，想讓 AR.js 好辨識就要犧牲 QRCode 的容錯</li>
<li>想要讓 QRCode 可以掃到就需要容錯，就要縮小 marker</li>
</ol>
<h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>皮諾可，這個需求直接電死</p>
<p><img src="/2019/11/01/AR-js-QRCode-%E6%98%AF%E5%90%A6%E6%90%9E%E9%8C%AF%E4%BA%86%E4%BB%80%E9%BA%BC/%E7%9A%AE%E8%AB%BE%E5%8F%AF%E9%80%99%E5%80%8B%E7%9B%B4%E6%8E%A5%E9%9B%BB%E6%AD%BB.jpg" alt="皮諾可，這個需求直接電死"></p>
<h2 id="參考連結"><a href="#參考連結" class="headerlink" title="參考連結"></a>參考連結</h2><ol>
<li><p><a href="https://jeromeetienne.github.io/AR.js/three.js/examples/marker-training/examples/generator.html">AR.js Marker Training</a></p>
</li>
<li><p><a href="https://medium.com/chialab-open-source/how-to-deliver-ar-on-the-web-only-with-a-qr-code-e24b7b61f8cb">How to deliver AR on the web only with a QR Code</a></p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>改寫 SignalR 在 Azure Functions 上的 Demo 時遇到的問題</title>
    <url>/2020/02/04/%E6%94%B9%E5%AF%AB-SignalR-%E5%9C%A8-Azure-Functions-%E4%B8%8A%E7%9A%84-Demo-%E6%99%82%E9%81%87%E5%88%B0%E7%9A%84%E5%95%8F%E9%A1%8C/</url>
    <content><![CDATA[<p>在改寫官方的 <a href="https://github.com/Azure-Samples/signalr-service-quickstart-serverless-chat">demo</a> 時，遇到問題</p>
<a id="more"></a>

<h2 id="錯誤訊息"><a href="#錯誤訊息" class="headerlink" title="錯誤訊息"></a>錯誤訊息</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Metadata generation failed. Exit code: &#39;-2146232797&#39; Error: &#39;Assert FailureExpression: [Recursive resource lookup bug]Description: Infinite recursion during resource lookup within System.Private.CoreLib.  This may be a bug in System.Private.CoreLib, or potentially in certain extensibility points such as assembly resolve events or CultureInfo names.  Resource name: IO_FileLoadStack Trace:</span><br><span class="line">at System.SR.InternalGetResourceString(String key)</span><br><span class="line">at System.SR.GetResourceString(String resourceKey, String defaultString)</span><br><span class="line">at System.Runtime.Loader.AssemblyLoadContext.ResolveUsingEvent(AssemblyName assemblyName)</span><br><span class="line">at System.Runtime.Loader.AssemblyLoadContext.ResolveUsingResolvingEvent(IntPtr gchManagedAssemblyLoadContext, AssemblyName assemblyName)</span><br><span class="line">at System.Reflection.RuntimeAssembly._nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark&amp; stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks, IntPtr ptrLoadContextBinder)</span><br><span class="line">at System.Reflection.RuntimeAssembly.InternalLoadAssemblyName(AssemblyName assemblyRef, Evidence assemblySecurity, RuntimeAssembly reqAssembly, StackCrawlMark&amp; stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, IntPtr ptrLoadContextBinder)</span><br><span class="line">at System.Reflection.RuntimeAssembly.InternalLoad(String assemblyString, Evidence assemblySecurity, StackCrawlMark&amp; stackMark, IntPtr pPrivHostBinder, Boolean forIntrospection)</span><br><span class="line">at System.Reflection.RuntimeAssembly.InternalLoad(String assemblyString, Evidence assemblySecurity, StackCrawlMark&amp; stackMark, Boolean forIntrospection)</span><br><span class="line">at System.Reflection.Assembly.Load(String assemblyString)</span><br><span class="line">at ExtensionsMetadataGenerator.Console.Program.AssemblyLoader.&lt;&gt;c__DisplayClass1_0.&lt;Initialize&gt;b__0(Object sender, ResolveEventArgs args) in C:\azure-webjobs-sdk-script\tools\ExtensionsMetadataGenerator\src\ExtensionsMetadataGenerator.Console\Program.cs:line 78</span><br><span class="line">at System.AppDomain.OnAssemblyResolveEvent(RuntimeAssembly assembly, String assemblyFullName)</span><br><span class="line">at System.Reflection.RuntimeAssembly._nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark&amp; stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks, IntPtr ptrLoadContextBinder)</span><br><span class="line">at System.Reflection.RuntimeAssembly.InternalGetSatelliteAssembly(String name, CultureInfo culture, Version version, Boolean throwOnFileNotFound, StackCrawlMark&amp; stackMark)</span><br><span class="line">at System.Resources.ManifestBasedResourceGroveler.GetSatelliteAssembly(CultureInfo lookForCulture, StackCrawlMark&amp; stackMark)</span><br><span class="line">at System.Resources.ManifestBasedResourceGroveler.GrovelForResourceSet(CultureInfo culture, Dictionary&#96;2 localResourceSets, Boolean tryParents, Boolean createIfNotExists, StackCrawlMark&amp; stackMark)</span><br><span class="line">at System.Resources.ResourceManager.InternalGetResourceSet(CultureInfo requestedCulture, Boolean createIfNotExists, Boolean tryParents, StackCrawlMark&amp; stackMark)</span><br><span class="line">at System.Resources.ResourceManager.InternalGetResourceSet(CultureInfo culture, Boolean createIfNotExists, Boolean tryParents)</span><br><span class="line">at System.Resources.ResourceManager.GetString(String name, CultureInfo culture)</span><br><span class="line">at System.SR.InternalGetResourceString(String key)</span><br><span class="line">at System.SR.GetResourceString(String resourceKey, String defaultString)</span><br><span class="line">at System.Runtime.Loader.AssemblyLoadContext.ResolveUsingEvent(AssemblyName assemblyName)</span><br><span class="line">at System.Runtime.Loader.AssemblyLoadContext.ResolveUsingResolvingEvent(IntPtr gchManagedAssemblyLoadContext, AssemblyName assemblyName)</span><br><span class="line">at System.ModuleHandle.ResolveType(RuntimeModule module, Int32 typeToken, IntPtr* typeInstArgs, Int32 typeInstCount, IntPtr* methodInstArgs, Int32 methodInstCount, ObjectHandleOnStack type)</span><br><span class="line">at System.ModuleHandle.ResolveType(RuntimeModule module, Int32 typeToken, IntPtr* typeInstArgs, Int32 typeInstCount, IntPtr* methodInstArgs, Int32 methodInstCount, ObjectHandleOnStack type)</span><br><span class="line">at System.ModuleHandle.ResolveTypeHandleInternal(RuntimeModule module, Int32 typeToken, RuntimeTypeHandle[] typeInstantiationContext, RuntimeTypeHandle[] methodInstantiationContext)</span><br><span class="line">at System.Reflection.RuntimeModule.ResolveType(Int32 metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)</span><br><span class="line">at System.Reflection.CustomAttribute.FilterCustomAttributeRecord(CustomAttributeRecord caRecord, MetadataImport scope, Assembly&amp; lastAptcaOkAssembly, RuntimeModule decoratedModule, MetadataToken decoratedToken, RuntimeType attributeFilterType, Boolean mustBeInheritable, Object[] attributes, IList derivedAttributes, RuntimeType&amp; attributeType, IRuntimeMethodInfo&amp; ctor, Boolean&amp; ctorHasParameters, Boolean&amp; isVarArg)</span><br><span class="line">at System.Reflection.CustomAttribute.GetCustomAttributes(RuntimeModule decoratedModule, Int32 decoratedMetadataToken, Int32 pcaCount, RuntimeType attributeFilterType, Boolean mustBeInheritable, IList derivedAttributes, Boolean isDecoratedTargetSecurityTransparent)</span><br><span class="line">at System.Reflection.CustomAttribute.GetCustomAttributes(RuntimeAssembly assembly, RuntimeType caType)</span><br><span class="line">at System.Attribute.GetCustomAttributes(Assembly element, Boolean inherit)</span><br><span class="line">at ExtensionsMetadataGenerator.ExtensionsMetadataGenerator.GenerateExtensionReferences(Assembly assembly) in C:\azure-webjobs-sdk-script\tools\ExtensionsMetadataGenerator\src\ExtensionsMetadataGenerator.Console\ExtensionsMetadataGenerator.cs:line 103</span><br><span class="line">at ExtensionsMetadataGenerator.ExtensionsMetadataGenerator.Generate(String sourcePath, String outputPath, ConsoleLogger logger) in C:\azure-webjobs-sdk-script\tools\ExtensionsMetadataGenerator\src\ExtensionsMetadataGenerator.Console\ExtensionsMetadataGenerator.cs:line 46</span><br><span class="line">at ExtensionsMetadataGenerator.Console.Program.Main(String[] args) in C:\azure-webjobs-sdk-script\tools\ExtensionsMetadataGenerator\src\ExtensionsMetadataGenerator.Console\Program.cs:line 32&#39;</span><br></pre></td></tr></table></figure>

<h2 id="排除過程"><a href="#排除過程" class="headerlink" title="排除過程"></a>排除過程</h2><ol>
<li><p>剛開始以為是 Nuget 套件版本太舊</p>
<ul>
<li>結果無效</li>
</ul>
</li>
<li><p>更新了以下開發環境都無效</p>
<ul>
<li><p>Visual Studio 2019</p>
</li>
<li><p>ASP.NET Core 3.1</p>
</li>
<li><p>結果無效</p>
</li>
</ul>
</li>
<li><p>後來覺得是開發工具有 Bug 但官方還沒修</p>
<ul>
<li><p>嘗試用 Visual Studio Code 的 <a href="https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurefunctions">Azure Functions Extension</a></p>
</li>
<li><p>結果無效</p>
</li>
</ul>
</li>
<li><p>推測是某個套件版本不對，但目前找不到哪裡出問題</p>
<ol>
<li><p>從其他 issue 回報推測，這應該是 dot net core 已知的 bug，而且應該早修掉了，但還是遇到了</p>
</li>
<li><p>其他人回報的應急方法都沒用，只能自己通靈</p>
</li>
<li><p>目前自己測出來的應急方法是：</p>
<ul>
<li><p>清掉 nuget 快取</p>
</li>
<li><p>遇到建置失敗就清</p>
</li>
<li><p>Visual Studio 重開就需要再清一次</p>
<p><img src="/2020/02/04/%E6%94%B9%E5%AF%AB-SignalR-%E5%9C%A8-Azure-Functions-%E4%B8%8A%E7%9A%84-Demo-%E6%99%82%E9%81%87%E5%88%B0%E7%9A%84%E5%95%8F%E9%A1%8C/01.png" alt="清掉 nuget 快取"></p>
</li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="2020-02-21更新"><a href="#2020-02-21更新" class="headerlink" title="2020/02/21更新"></a>2020/02/21更新</h2><p>後來找到這個 issue</p>
<p><a href="https://github.com/aspnet/Announcements/issues/401">Known issue in 3.0.2 and 3.1.1 for ASP.NET Core · Issue #401 · aspnet/Announcements</a></p>
<h2 id="參考連結"><a href="#參考連結" class="headerlink" title="參考連結"></a>參考連結</h2><ol>
<li><p><a href="https://github.com/Azure-Samples/signalr-service-quickstart-serverless-chat">Azure-Samples/signalr-service-quickstart-serverless-chat</a></p>
</li>
<li><p><a href="https://github.com/NLog/NLog.Web/issues/210">Recursive resource lookup bug - Infinite recursion during resource lookup within System.Private.CoreLib. · Issue #210 · NLog/NLog.Web</a></p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Hexo版本升級</title>
    <url>/2020/10/24/Hexo%E7%89%88%E6%9C%AC%E5%8D%87%E7%B4%9A/</url>
    <content><![CDATA[<p>最近發現 Hexo 從當初使用的 3.1 升級到 5.2 了。想到本站很久沒更新了，所以來發個升級的廢文(大誤)</p>
<a id="more"></a>

<h2 id="環境設定"><a href="#環境設定" class="headerlink" title="環境設定"></a>環境設定</h2><p>因為電腦經歷重灌，所以等於重新設定環境</p>
<ol>
<li><p>將 <code>_post</code> 資料夾的舊文章備份</p>
<p> 幹大事之前總要先備份</p>
<p> (其實原本想寫成第 0 步，但是懶得調裝 plugin)</p>
</li>
<li><p>安裝 nodejs</p>
<ul>
<li><p>Windows</p>
<p>  到 <a href="https://nodejs.org/en/download/">Download</a> 下載最近的 LTS 版本來安裝</p>
</li>
<li><p>Linux</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Using Ubuntu</span></span><br><span class="line">curl -sL https://deb.nodesource.com/setup_lts.x | sudo -E bash -</span><br><span class="line">sudo apt-get install -y nodejs</span><br><span class="line"></span><br><span class="line"><span class="comment"># Using Debian, as root</span></span><br><span class="line">curl -sL https://deb.nodesource.com/setup_lts.x | bash -</span><br><span class="line">apt-get install -y nodejs</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h2 id="安裝-hexo"><a href="#安裝-hexo" class="headerlink" title="安裝 hexo"></a>安裝 hexo</h2><ol>
<li><p>安裝 hexo</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
</li>
<li><p>遷移舊文</p>
<p> 把之前放在 <code>_post</code> 資料夾的 markdown 檔案搬到新的，收工(誤)</p>
</li>
</ol>
<h2 id="設定-plugin"><a href="#設定-plugin" class="headerlink" title="設定 plugin"></a>設定 plugin</h2><ol>
<li><p>設定數學插件</p>
<p> 因為照舊使用 <a href="https://theme-next.js.org/">NexT</a> 主題，所以就直接用底下的 mathjax</p>
<p> 這邊就直接參考 <a href="https://theme-next.js.org/docs/third-party-services/math-equations.html">官方文件 - Math Equations</a> 將設定調為 <code>true</code></p>
 <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Math Formulas Render Support</span></span><br><span class="line"><span class="attr">math:</span></span><br><span class="line">    <span class="comment"># Default (false) will load mathjax / katex script on demand.</span></span><br><span class="line">    <span class="comment"># That is it only render those page which has `mathjax: true` in front-matter.</span></span><br><span class="line">    <span class="comment"># If you set it to true, it will load mathjax / katex srcipt EVERY PAGE.</span></span><br><span class="line">    <span class="attr">every_page:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">katex:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex</span></span><br><span class="line">    <span class="attr">copy_tex:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>搜尋功能</p>
<p> 翻文件的時候發現好用，夭壽讚</p>
<p> 直接參考 <a href="https://theme-next.js.org/docs/third-party-services/search-services.html#Local-Search">官方文件 - Search Services</a> 來設定</p>
</li>
<li><p>設定 RSS</p>
<p> 這邊使用 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> Plugin</p>
<ol>
<li><p>安裝</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed</span><br></pre></td></tr></table></figure>
</li>
<li><p>設定</p>
 <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">plugin:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">hexo-generator-feed</span></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>發佈</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo部署(GitHub Actions)</title>
    <url>/2020/10/24/Hexo%E9%83%A8%E7%BD%B2-GitHub-Actions/</url>
    <content><![CDATA[<p>之前的文章都只儲存在本機，現在想想以前怎麼這麼蠢，藉著這次更新就順便設定 Private Repository 跟 GitHub Workflow 吧</p>
<a id="more"></a>

<h2 id="產生-SSH-Key"><a href="#產生-SSH-Key" class="headerlink" title="產生 SSH Key"></a>產生 SSH Key</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;gundambox.shi@gmail.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>產生過程中出現 <code>Enter passphrase (empty for no passphrase):</code> 的時候</p>
<p>不要輸入，直接按 <code>enter</code> 跳過</p>
<h2 id="在-Private-Repository-加入-Private-Key"><a href="#在-Private-Repository-加入-Private-Key" class="headerlink" title="在 Private Repository 加入 Private Key"></a>在 Private Repository 加入 Private Key</h2><p>Private Repository -&gt; Settings -&gt; Secrets -&gt; New Secret</p>
<p>將剛剛產生的私鑰複製貼上，並將名稱命名為 <code>hexo</code></p>
<p><img src="/2020/10/24/Hexo%E9%83%A8%E7%BD%B2-GitHub-Actions/pasted-0.png" alt="加入Private Key"></p>
<h2 id="在-Public-Repository-加入-Public-Key"><a href="#在-Public-Repository-加入-Public-Key" class="headerlink" title="在 Public Repository 加入 Public Key"></a>在 Public Repository 加入 Public Key</h2><p>Public Repository -&gt; Settings -&gt; Deploy keys -&gt; Add deploy key</p>
<p>將剛剛產生的公鑰複製貼上，並將名稱命名為 <code>hexo</code></p>
<p>記得勾選 “Allow write access”，不然會炸掉XD</p>
<p><img src="/2020/10/24/Hexo%E9%83%A8%E7%BD%B2-GitHub-Actions/pasted-1.png" alt="加入 Public Key"></p>
<h2 id="建立-GitHub-Actions"><a href="#建立-GitHub-Actions" class="headerlink" title="建立 GitHub Actions"></a>建立 GitHub Actions</h2><ol>
<li><p>建立 .github/workflows/hexoActions.yml</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir .github&#x2F;workflows</span><br><span class="line">vim hexoActions.yml</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 action</p>
 <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">&#x27;hexo deploy&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line"><span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">    <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="number">12.</span><span class="string">x</span></span><br><span class="line">    <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">    <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">&quot;12.x&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init)init</span> <span class="string">ssh</span></span><br><span class="line">    <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">~/.ssh/</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;$<span class="template-variable">&#123;&#123;secrets.HEXO&#125;&#125;</span>&quot;</span> <span class="string">&gt;</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">        <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">        <span class="string">ssh-keyscan</span> <span class="string">github.com</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&quot;YOUR_USERNAME&quot;</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&quot;YOUR_EMAIL&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">A)npm</span> <span class="string">install</span></span><br><span class="line">    <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">B)npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo-cli</span></span><br><span class="line">    <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo-cli</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">C)</span> <span class="string">hexo</span> <span class="string">d</span> <span class="string">-g</span></span><br><span class="line">    <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">d</span> <span class="string">-g</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="設定-hexo-config-yml"><a href="#設定-hexo-config-yml" class="headerlink" title="設定 hexo/_config.yml"></a>設定 hexo/_config.yml</h2><p>原本的 <code>_config.yml</code> 設定</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> </span><br><span class="line">        <span class="attr">github:</span> <span class="string">https://github.com/GundamBox/gundambox.github.io.git</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<p>改成</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">git@github.com:GundamBox/gundambox.github.io.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<h2 id="確認-Actions-執行結果"><a href="#確認-Actions-執行結果" class="headerlink" title="確認 Actions 執行結果"></a>確認 Actions 執行結果</h2><p><img src="/2020/10/24/Hexo%E9%83%A8%E7%BD%B2-GitHub-Actions/pasted-2.png" alt="確認執行結果"></p>
<p>確認無誤後，以後寫好文章在 Local 端預覽完就可以歡樂的 push 到 Private Repository</p>
<h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>寫好文章跑一次部署大約花 1 分鐘，GitHub 每個月給 2000 分鐘的免費額度真的佛心</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://ithelp.ithome.com.tw/articles/10251504">(27) 試著學 Hexo - 奇淫技巧 - 自動化部屬(GitHub Actions)</a></li>
<li><a href="https://docs.github.com/en/free-pro-team@latest/github/setting-up-and-managing-billing-and-payments-on-github/about-billing-for-github-actions">About billing for GitHub Actions</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub Actions</tag>
      </tags>
  </entry>
  <entry>
    <title>棄坑 Notion 及尋找替代方案</title>
    <url>/2020/10/28/%E6%A3%84%E5%9D%91-Notion-%E5%8F%8A%E5%B0%8B%E6%89%BE%E6%9B%BF%E4%BB%A3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>雖然 Notion 筆記軟體不錯用，但中間遇到一些問題，讓我重新檢視是否需要這軟體</p>
<a id="more"></a>

<h2 id="棄坑動機"><a href="#棄坑動機" class="headerlink" title="棄坑動機"></a>棄坑動機</h2><ol>
<li><p>窮 (誤)</p>
</li>
<li><p>大部分網頁 Notion Web Clipper 都可以解析，但少部分還是會出問題，做額外的處理容易打斷思考</p>
</li>
<li><p>Notion 的權限設定麻煩 (懶)</p>
</li>
<li><p>Notion 很難備份</p>
</li>
<li><p>Notion 表格計算功能用在筆記上雖然方便，但真的要做大型表格計算還是 Microsoft Excel 或 LibreOffice Calc 比較實際</p>
</li>
<li><p>使用時機多數為消化之前擷取的網頁，用來寫筆記的時間較少。</p>
</li>
</ol>
<h2 id="替代方案"><a href="#替代方案" class="headerlink" title="替代方案"></a>替代方案</h2><h3 id="Web-Clipper-替代方案-MaoXian-Web-Clipper"><a href="#Web-Clipper-替代方案-MaoXian-Web-Clipper" class="headerlink" title="Web Clipper 替代方案 - MaoXian Web Clipper"></a>Web Clipper 替代方案 - <a href="https://mika-cn.github.io/maoxian-web-clipper/index.html">MaoXian Web Clipper</a></h3><h4 id="優點"><a href="#優點" class="headerlink" title="優點"></a>優點</h4><ol>
<li><p>Open Source</p>
</li>
<li><p>可以在擷取網頁的時候選擇 HTML DOM 元素，可以避開解析網頁的問題<br> (將 HTML DOM 、Js、Css 及 Font 檔案全部存起來哪會出問題XD)</p>
</li>
<li><p>輕便，不用登入帳號</p>
</li>
</ol>
<h4 id="缺點"><a href="#缺點" class="headerlink" title="缺點"></a>缺點</h4><ol>
<li><p>預設下載位置是瀏覽器的下載資料夾。如果瀏覽器設定每次下載都詢問的話，擷取網頁的過程中所有檔案都會詢問一次要下載到哪裡 (擷取方式是優點也是缺點XD)</p>
</li>
<li><p>沒辦法同步 (還是可以拐彎解決)</p>
</li>
</ol>
<h4 id="缺點改善"><a href="#缺點改善" class="headerlink" title="缺點改善"></a>缺點改善</h4><ol>
<li><p>瀏覽器每次下載都詢問改成固定下載位置就好，而且從任何軟體下載的東西都存到固定的資料夾也比較方便找檔案</p>
</li>
<li><p>同步問題可以靠雲端硬碟或 NAS 資料夾解決，但還是會遇到資料夾結構的問題，這時候建一個 Symbolic link 就可以搞定</p>
<ul>
<li><p>Windows</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mklink /d <span class="string">&quot;&#123;Download Directory&#125;\WebClipper&quot;</span> <span class="string">&quot;&#123;NAS or Cloud Storage Directory&#125;\WebClipper&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Ubuntu</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ln -s <span class="string">&quot;&#123;NAS or Cloud Storage Directory&#125;\WebClipper&quot;</span> <span class="string">&quot;&#123;Download Directory&#125;\WebClipper&quot;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h3 id="筆記軟體替代方案-Joplin"><a href="#筆記軟體替代方案-Joplin" class="headerlink" title="筆記軟體替代方案 - Joplin"></a>筆記軟體替代方案 - <a href="https://github.com/laurent22/joplin">Joplin</a></h3><p>選用的原因不外乎</p>
<ol>
<li><p>Open Source</p>
</li>
<li><p>筆記功能與 Notion 無異</p>
</li>
<li><p>同步問題可以靠前面說的雲端硬碟或 NAS 資料夾解決</p>
</li>
<li><p>不用擔心權限。公開的筆記就放到 <a href="http://gundambox.github.io/">github.io</a> 上，私人的就備份在 NAS</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>VS Code 整合 WSL</title>
    <url>/2020/11/02/VS-Code-%E6%95%B4%E5%90%88-WSL/</url>
    <content><![CDATA[<p>之前都是用 <a href="https://www.virtualbox.org/">VirtualBox</a> 裝 Ubuntu 當做寫 C/C++ 的環境，趁著整理系統的機會來玩玩 WSL</p>
<a id="more"></a>

<h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><h3 id="安裝-WSL"><a href="#安裝-WSL" class="headerlink" title="安裝 WSL"></a>安裝 WSL</h3><p>可以參考<a href="http://gundambox.github.io/2020/11/02/%E5%9C%A8-Windows10-%E4%BD%BF%E7%94%A8-WSL-GCC/">上一篇</a></p>
<h3 id="安裝-VS-Code"><a href="#安裝-VS-Code" class="headerlink" title="安裝 VS Code"></a>安裝 VS Code</h3><p>到官方網站下載 <a href="https://code.visualstudio.com/download">VS Code</a></p>
<h3 id="安裝-Extension"><a href="#安裝-Extension" class="headerlink" title="安裝 Extension"></a>安裝 Extension</h3><p>下載 <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl">Remote - WSL</a> extension 並安裝到 VS Code</p>
<h3 id="安裝-VS-Code-Server"><a href="#安裝-VS-Code-Server" class="headerlink" title="安裝 VS Code Server"></a>安裝 VS Code Server</h3><ol>
<li>啟動 WSL <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">bash</span><br></pre></td></tr></table></figure></li>
<li>在 wsl 的環境下使用 VS Code 開啟資料夾 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /mnt/d/Repository    <span class="comment"># source code 習慣放在 D:\Repository</span></span><br><span class="line">mkdir HelloWorld        <span class="comment"># 建立 project 資料夾</span></span><br><span class="line"><span class="built_in">cd</span> HelloWorld           </span><br><span class="line">code .</span><br></pre></td></tr></table></figure></li>
<li>這時候 VS Code 就會詢問安裝 <code>VS Code Server</code> 了<br> 安裝完成並成功開啟資料夾後<br> 可以看到資料夾後面帶有 <code>[WSL:UBUNTU]</code>，<br> <img src="/2020/11/02/VS-Code-%E6%95%B4%E5%90%88-WSL/file-explorer-wsl.png"><br> 可以注意到左下角的狀態列變成 <code>WSL:Ubuntu</code><br> <img src="/2020/11/02/VS-Code-%E6%95%B4%E5%90%88-WSL/wsl-status-bar.png"></li>
</ol>
<h3 id="在-WSL-整合環境安裝-Extension"><a href="#在-WSL-整合環境安裝-Extension" class="headerlink" title="在 WSL 整合環境安裝 Extension"></a>在 WSL 整合環境安裝 Extension</h3><p>在剛剛打開的 VS Code 裡面，按下 <code>Ctrl+Shift+X</code> 即可打開延伸模組，搜尋安裝 <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools">C/C++</a> extension</p>
<h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><ol>
<li><p>main.cpp</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; msg &#123;<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;C++&quot;</span>, <span class="string">&quot;World&quot;</span>, <span class="string">&quot;from&quot;</span>, <span class="string">&quot;VS Code&quot;</span>, <span class="string">&quot;and the C++ extension!&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="built_in">string</span>&amp; word : msg)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; word &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>編譯<br> 可以直接按 F5，直接使用預設產生的設定值<br> <img src="/2020/11/02/VS-Code-%E6%95%B4%E5%90%88-WSL/build-and-debug-active-file.png"></p>
</li>
<li><p>執行<br> 在終端機執行剛剛編譯出來的檔案</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./main</span><br></pre></td></tr></table></figure>
<p> <img src="/2020/11/02/VS-Code-%E6%95%B4%E5%90%88-WSL/wsl-execution-result.png" alt="執行結果"></p>
</li>
</ol>
<h2 id="參考連結"><a href="#參考連結" class="headerlink" title="參考連結"></a>參考連結</h2><ol>
<li><a href="https://code.visualstudio.com/docs/cpp/config-wsl">Using C++ and WSL in VS Code</a></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>在 Windows10 使用 WSL + GCC</title>
    <url>/2020/11/02/%E5%9C%A8-Windows10-%E4%BD%BF%E7%94%A8-WSL-GCC/</url>
    <content><![CDATA[<p>雖然安裝過程肯定可以從 Google 找到，但為了避免遇到新系統臨時失憶，還是做筆記比較好</p>
<a id="more"></a>

<h2 id="安裝過程"><a href="#安裝過程" class="headerlink" title="安裝過程"></a>安裝過程</h2><h3 id="安裝-WSL"><a href="#安裝-WSL" class="headerlink" title="安裝 WSL"></a>安裝 WSL</h3><p>參考 <a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10">Windows Subsystem for Linux Installation Guide for Windows 10</a> 官方文件安裝</p>
<ol>
<li>啟用 WSL <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:Microsoft<span class="literal">-Windows</span><span class="literal">-Subsystem</span><span class="literal">-Linux</span> /all /norestart</span><br></pre></td></tr></table></figure></li>
<li>更新至 WSL 2<ul>
<li>x64 架構，必須是 <strong>Windows10, version 1903</strong> 或更新版本，建置編號為 <strong>18362</strong> 或更新編號</li>
<li>arm64 架構，必須是 <strong>Windows10, version 2004</strong> 或更新版本，建置編號為 <strong>19041</strong> 或更新編號<br>簡單的說，給我更新到最新版</li>
</ul>
</li>
<li>啟用虛擬機器功能 <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure></li>
<li>安裝 Linux kernel 更新套件<ul>
<li><a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">X64 package</a></li>
<li><a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_arm64.msi">ARM64 package</a></li>
</ul>
</li>
<li>將 WSL 2 設為預設版本 <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl -<span class="literal">-set</span><span class="literal">-default</span><span class="literal">-version</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></li>
<li>安裝 Linux<br> 這邊就是看個人喜好了，我習慣使用 Ubuntu 上一個 LTS 版本<br> 因為常被最新的 LTS 雷，所以這邊選用 <a href="https://www.microsoft.com/store/apps/9N9TNGVNDL3Q">Ubuntu 18.04 LTS</a><br> 安裝完後直接啟用，會直接跳出視窗讓你設定 username 及 password<br> <img src="/2020/11/02/%E5%9C%A8-Windows10-%E4%BD%BF%E7%94%A8-WSL-GCC/ubuntuinstall.png" alt="Ubuntu安裝畫面"></li>
</ol>
<h3 id="安裝-Windows-Terminal-optional"><a href="#安裝-Windows-Terminal-optional" class="headerlink" title="安裝 Windows Terminal (optional)"></a>安裝 Windows Terminal (optional)</h3><p>直接到 <a href="https://docs.microsoft.com/zh-tw/windows/terminal/get-started">Microsoft Store</a> 下載安裝</p>
<p>詳細 Config 文件直接看<a href="https://aka.ms/terminal">官方文件</a></p>
<h3 id="安裝-GCC"><a href="#安裝-GCC" class="headerlink" title="安裝 GCC"></a>安裝 GCC</h3><ol>
<li>啟動 WSL <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">bash</span><br></pre></td></tr></table></figure></li>
<li>安裝編譯環境 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install build-essential gcc g++ gdb</span><br></pre></td></tr></table></figure></li>
<li>測試 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">whereis g++</span><br><span class="line">whereis gdb</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="參考連結"><a href="#參考連結" class="headerlink" title="參考連結"></a>參考連結</h2><ol>
<li><a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10">Windows Subsystem for Linux Installation Guide for Windows 10</a></li>
<li><a href="https://docs.microsoft.com/zh-tw/windows/terminal/get-started">Using C++ and WSL in VS Code</a></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>WSL 安裝 zsh</title>
    <url>/2020/11/04/WSL-%E5%AE%89%E8%A3%9D-zsh/</url>
    <content><![CDATA[<p>用 WSL 寫 code 當然是要用華麗的 oh-my-zsh 啊(誤)</p>
<a id="more"></a>

<h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><h3 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install zsh</span><br><span class="line">$ <span class="built_in">which</span> zsh</span><br><span class="line">/usr/bin/zsh</span><br><span class="line">$ chsh -s /usr/bin/zsh</span><br></pre></td></tr></table></figure>
<h3 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="theme"><a href="#theme" class="headerlink" title="theme"></a>theme</h3><ol>
<li>Powerline <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install fonts-powerline</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;⮀ ± ⭠ ➦ ✔ ✘ ⚡&quot;</span> <span class="comment"># Test</span></span><br><span class="line">⮀ ± ⭠ ➦ ✔ ✘ ⚡</span><br></pre></td></tr></table></figure></li>
<li>Theme <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$ZSH_CUSTOM</span>/themes</span><br><span class="line">wget https://raw.githubusercontent.com/caiogondim/bullet-train-oh-my-zsh-theme/master/bullet-train.zsh-theme</span><br><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure>
 修改 ZSH_THEME <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Find and change this</span><br><span class="line">ZSH_THEME&#x3D;&quot;robbyrussell&quot;</span><br><span class="line"></span><br><span class="line"># To this</span><br><span class="line">ZSH_THEME&#x3D;&quot;bullet-train&quot;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="參考連結"><a href="#參考連結" class="headerlink" title="參考連結"></a>參考連結</h2><ol>
<li><a href="https://hackmd.io/@billsun/BJByCIUHf?type=view#22-%E5%AE%89%E8%A3%9D-zsh">Windows Subsystem for Linux (WSL) 環境設定</a></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>在 Azure DevOps 執行 NuGet Pack 遇到 401(Unauthorized)</title>
    <url>/2020/11/09/%E5%9C%A8-Azure-DevOps-%E5%9F%B7%E8%A1%8C-NuGet-Pack-%E9%81%87%E5%88%B0-401-Unauthorized/</url>
    <content><![CDATA[<p>打包 NuGet Package 到公司的 Azure DevOps Services feeds 的時候遇到的神奇問題</p>
<a id="more"></a>

<h2 id="問題描述"><a href="#問題描述" class="headerlink" title="問題描述"></a>問題描述</h2><p>Azure DevOps 上執行 <code>dotnet pack</code> 遇到這個問題</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Build FAILED.</span><br><span class="line"></span><br><span class="line">&quot;D:\a\1\s\src\***********.csproj\***********.csproj&quot; (Restore target) (1) -&gt;</span><br><span class="line">(Restore target) -&gt; </span><br><span class="line">C:\hostedtoolcache\windows\dotnet\sdk\3.1.403\NuGet.targets(128,5): error : Unable to load the service index for source https:&#x2F;&#x2F;pkgs.dev.azure.com&#x2F;***********&#x2F;_packaging&#x2F;***********&#x2F;nuget&#x2F;v3&#x2F;index.json. [D:\a\1\s\src\***********\***********.csproj]</span><br><span class="line">C:\hostedtoolcache\windows\dotnet\sdk\3.1.403\NuGet.targets(128,5): error :   Response status code does not indicate success: 401 (Unauthorized). [D:\a\1\s\src\***********\***********.csproj]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>起初以為是 <strong>Azure DevOps Services feeds</strong> 設定有問題，但仔細一想，那也應該是在 <code>dotnet push</code> 的時候出問題。</p>
<p>跟公司同事討論了很久才注意到 <strong>Restore</strong> 這個字，於是試著在 pack 之前加上 <code>dotnet restore</code>，然後就解決了(WTF)。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">DotNetCoreCLI@2</span></span><br><span class="line">    <span class="attr">displayName:</span> <span class="string">Restore</span> <span class="string">source</span> <span class="string">project&#x27;s</span> <span class="string">NuGet</span> <span class="string">package(s)</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">        <span class="attr">command:</span> <span class="string">restore</span></span><br><span class="line">        <span class="attr">projects:</span> <span class="string">$(sourceProject)</span></span><br><span class="line">        <span class="attr">feedsToUse:</span> <span class="string">select</span></span><br></pre></td></tr></table></figure>

<h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p><code>Response status code does not indicate success: 401 (Unauthorized).</code> 這個錯誤訊息太不明顯了，超容易被誤導</p>
<p>而且我到現在還是不明白中間發生什麼事，哪天在官方文件找到解答再補上來</p>
]]></content>
      <categories>
        <category>Azure DevOps</category>
      </categories>
      <tags>
        <tag>Azure DevOps</tag>
        <tag>工程師的通靈日常</tag>
      </tags>
  </entry>
  <entry>
    <title>ASP.NET Web.Config 連線字串加密</title>
    <url>/2020/12/03/ASP-NET-Web-Config-%E9%80%A3%E7%B7%9A%E5%AD%97%E4%B8%B2%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<p>最近在整理以前練習的官方範例，想到 Web.Config 的連線字串應該要做保護。查了下資料寫個筆記，避免之後遇到上古時代的專案手忙腳亂。</p>
<a id="more"></a>

<h2 id="aspnet-regiis-位置"><a href="#aspnet-regiis-位置" class="headerlink" title="aspnet_regiis 位置"></a>aspnet_regiis 位置</h2><p>預設在 <code>%systemroot%\Microsoft.NET\Framework\&#123;versionNumber&#125;</code> 底下可以找到 <code>aspnet_regiis.exe</code></p>
<h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><ul>
<li><p>加密前</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">connectionStrings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;NorthwindEntities&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">connectionString</span>=<span class="string">&quot;metadata=res://*/NorthwindModels.csdl|res://*/NorthwindModels.ssdl|res://*/NorthwindModels.msl;provider=System.Data.SqlClient;provider connection string=&#x27;data source=<span class="symbol">&amp;quot;</span>localhost, 1433<span class="symbol">&amp;quot;</span>;initial catalog=Northwind;persist security info=True;user id=********;password=**********;pooling=False;multipleactiveresultsets=False;connect timeout=60;trustservercertificate=False;App=EntityFramework&#x27;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">providerName</span>=<span class="string">&quot;System.Data.EntityClient&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">connectionStrings</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>加密指令</p>
  <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># aspnet_regiis -pef [section] [path]</span></span><br><span class="line">.\aspnet_regiis.exe <span class="literal">-pef</span> <span class="string">&quot;connectionStrings&quot;</span> <span class="string">&quot;D:\Repository\SampleApplication&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>加密後</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">connectionStrings</span> <span class="attr">configProtectionProvider</span>=<span class="string">&quot;RsaProtectedConfigurationProvider&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">EncryptedData</span> <span class="attr">Type</span>=<span class="string">&quot;http://www.w3.org/2001/04/xmlenc#Element&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2001/04/xmlenc#&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EncryptionMethod</span> <span class="attr">Algorithm</span>=<span class="string">&quot;http://www.w3.org/2001/04/xmlenc#aes256-cbc&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">KeyInfo</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/09/xmldsig#&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EncryptedKey</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2001/04/xmlenc#&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">EncryptionMethod</span> <span class="attr">Algorithm</span>=<span class="string">&quot;http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">KeyInfo</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/09/xmldsig#&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">KeyName</span>&gt;</span>Rsa Key<span class="tag">&lt;/<span class="name">KeyName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">KeyInfo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">CipherData</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">CipherValue</span>&gt;</span>.....<span class="tag">&lt;/<span class="name">CipherValue</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">CipherData</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">EncryptedKey</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">KeyInfo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">CipherData</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">CipherValue</span>&gt;</span>......<span class="tag">&lt;/<span class="name">CipherValue</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">CipherData</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">EncryptedData</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">connectionStrings</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># aspnet_regiis -pdf [section] [path]</span></span><br><span class="line">.\aspnet_regiis.exe <span class="literal">-pdf</span> <span class="string">&quot;connectionStrings&quot;</span> <span class="string">&quot;D:\Repository\SampleApplication&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><p><a href="https://blog.darkthread.net/blog/web-config-connstr-encryptor-v09-cht/">web.config連線字串加密工具</a></p>
<h2 id="參考連結"><a href="#參考連結" class="headerlink" title="參考連結"></a>參考連結</h2><ol>
<li><a href="https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-3.0/dx0f3cf2(v=vs.85)?redirectedfrom=MSDN">How to: Secure Connection Strings When Using Data Source Controls</a></li>
</ol>
]]></content>
      <categories>
        <category>ASP.NET</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>ASP.NET</tag>
      </tags>
  </entry>
  <entry>
    <title>RSS 訂閱 Blogger 教學</title>
    <url>/2021/01/11/RSS-%E8%A8%82%E9%96%B1-Blogger-%E6%95%99%E5%AD%B8/</url>
    <content><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p><img src="/2021/01/11/RSS-%E8%A8%82%E9%96%B1-Blogger-%E6%95%99%E5%AD%B8/01.%E8%B5%B7%E5%9B%A0.png" alt="起因"></p>
<p>雖然教學很多隨便查都有，不過還是寫一篇騙讚好了(大誤)</p>
<a id="more"></a>

<h2 id="什麼是-RSS"><a href="#什麼是-RSS" class="headerlink" title="什麼是 RSS"></a>什麼是 RSS</h2><p>摘自<a href="https://zh.wikipedia.org/zh-tw/RSS">維基百科</a>:</p>
<blockquote>
<p>RSS（全稱：RDF Site Summary；Really Simple Syndication），中文譯作簡易資訊聚合，也稱聚合內容，是一種訊息來源格式規範，用以聚合經常發布更新資料的網站，例如部落格文章、新聞、音訊或視訊的網摘。RSS檔案（或稱做摘要、網路摘要、或頻更新，提供到頻道）包含全文或是節錄的文字，再加上發布者所訂閱之網摘資料和授權的元資料。簡單來說 RSS 能夠讓使用者訂閱個人網站個人部落格，當訂閱的網站有新文章是能夠獲得通知。</p>
</blockquote>
<h2 id="為什麼要用-RSS"><a href="#為什麼要用-RSS" class="headerlink" title="為什麼要用 RSS"></a>為什麼要用 RSS</h2><p>你不能控制平台的演算法，但 RSS 可以。因為你的喜好就是演算法，你可以自己掌控資訊來源。當然「<a href="https://twblg.dict.edu.tw/holodict_new/result_detail.jsp?n_no=60157&curpage=1&sample=%E5%85%A9&radiobutton=1&querytarget=1&limit=100000&pagenum=1&rowcount=21">    Ū tsi̍t hó, bô nn̄g hó.(有一好，無兩好。)</a>」，想要拿回資訊的主導權，自己就要承擔義務，建議訂閱幾個異溫層的資訊來源作為平衡，避免像社群平台演算法一樣落入同溫層的陷阱。</p>
<p>以<a href="https://hornydragon.blogspot.com/">好色龍</a>的粉絲專頁為例，因為作者有經營 Blogger 網誌，<del>Fakebook</del>Facebook 的演算法又常降觸及。使用 RSS 就不用擔心 <del>ChiNa 審核人員</del>演算法發瘋了。而且使用 RSS 平台也可以設定通知，不用擔心搶不到頭香(誤)</p>
<h2 id="如何取得-RSS-連結-以Blogger為例"><a href="#如何取得-RSS-連結-以Blogger為例" class="headerlink" title="如何取得 RSS 連結(以Blogger為例)"></a>如何取得 RSS 連結(以Blogger為例)</h2><p>一般 Blogger 底下都會有 <code>訂閱： 文章 (Atom)</code> 出現，點進去就是 RSS 連結<br><img src="/2021/01/11/RSS-%E8%A8%82%E9%96%B1-Blogger-%E6%95%99%E5%AD%B8/02.%E5%A6%82%E4%BD%95%E5%8F%96%E5%BE%97RSS%E9%80%A3%E7%B5%90.png" alt="如何取得RSS連結"></p>
<h2 id="RSS-閱讀器"><a href="#RSS-閱讀器" class="headerlink" title="RSS 閱讀器"></a>RSS 閱讀器</h2><ol>
<li><a href="https://feedly.com/">Feedly</a><br> 2008 到現在的老牌閱讀器，讀取速度跟介面算不錯。專業版價格偏貴，值不值得看個人使用程度了。</li>
<li><a href="https://www.inoreader.com/">Inoreader</a><br> 2013 年推出的閱讀器，速度稍慢，專業版相對 Feedly 便宜。有廣告，升級專業版去除廣告體驗會比較好，介面稍微難用，習慣後覺得分類功能比 Feedly 強大。</li>
<li><a href="https://moztw.org/thunderbird/">Thunderbird</a><br> 跨平台電子郵件客戶端、新聞閱讀器、聚合器以及即時通訊軟體。不受到平台限制，但學習成本也最高，如果本身習慣 Linux 的人推薦使用(習慣 Linux 的人理論上應該都會使用 RSS 了 XD)</li>
<li><del>Flipboard 有推出中國特色的版本(踩到我的地雷)，所以就不附連結了</del></li>
</ol>
<h3 id="如何訂閱-以Feedly為例"><a href="#如何訂閱-以Feedly為例" class="headerlink" title="如何訂閱(以Feedly為例)"></a>如何訂閱(以Feedly為例)</h3><ul>
<li><p>訂閱<br>  到 <a href="https://feedly.com/">Feedly</a> 註冊帳號後</p>
<ol>
<li><p>側邊欄有個 <code>Follow New Sources</code></p>
<p><img src="/2021/01/11/RSS-%E8%A8%82%E9%96%B1-Blogger-%E6%95%99%E5%AD%B8/03.%E7%94%A8Feedly%E8%A8%82%E9%96%B1_1.png" alt="用Feedly訂閱1"></p>
</li>
<li><p>貼上前面取得的 RSS 連結<br><img src="/2021/01/11/RSS-%E8%A8%82%E9%96%B1-Blogger-%E6%95%99%E5%AD%B8/04.%E7%94%A8Feedly%E8%A8%82%E9%96%B1_2.png" alt="用Feedly訂閱2"></p>
</li>
<li><p>按下 Follow 即可</p>
</li>
</ol>
</li>
<li><p>閱讀</p>
<ul>
<li>網頁板畫面<br>  <img src="/2021/01/11/RSS-%E8%A8%82%E9%96%B1-Blogger-%E6%95%99%E5%AD%B8/05.%E7%94%A8Feedly%E8%A8%82%E9%96%B1_3.png" alt="用Feedly訂閱2"></li>
<li>App<br>  <a href="https://play.google.com/store/apps/details?id=com.devhd.feedly">Google Play</a><br>  <a href="https://apps.apple.com/tw/app/feedly-smart-news-reader/id396069556">App Store</a></li>
</ul>
</li>
</ul>
<h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><ol>
<li>Feedly<ul>
<li><a href="https://www.playpcesor.com/2013/03/feedly-google-reader.html">Feedly 完全上手教學，延續 Google Reader 閱讀器體驗</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10210983">Feedly – 超好用的 RSS 免費訂閱服務完整攻略，讓你隨時接收訂閱網站的最新消息</a></li>
</ul>
</li>
<li>Inoreader<ul>
<li><a href="https://www.playpcesor.com/2018/01/inoreader-15.html">用 Inoreader 開始為自己閱讀作主：15步上手指南與訂閱包分享</a></li>
<li><a href="https://free.com.tw/inoreader/">Inoreader 輕巧、快速線上 RSS 閱讀器，訂閱網路新文章不漏接</a></li>
</ul>
</li>
<li>Thunderbird<ul>
<li><a href="https://ithelp.illinoisstate.edu/knowledge/880-using-thunderbird-to-read-and-manage-rss-feeds/">Using Thunderbird to read and manage RSS feeds</a></li>
</ul>
</li>
</ol>
<h2 id="結尾"><a href="#結尾" class="headerlink" title="結尾"></a>結尾</h2><p><del>又生出一篇廢文了</del></p>
<p>寫完這篇剛好想到</p>
<ol>
<li>把網誌的 Html 內容嵌入 Markdown</li>
<li>自架 Gitea 保存 Markdown 文章</li>
<li>同步 Gitea Repo 到 GitHub</li>
<li>在 GitHub 開 Page，找 open source 自幹評論區上去</li>
</ol>
<p>這樣是不是就可以無痛轉移了(?)<br>如果 Microsoft 哪天也發瘋，強迫 GitHub 下架 Repo<br>這樣舊文章跟評論也不用想辦法撈回來<br>頂多就是自架主機(?)<br>不過這種異想天開的想法等哪天有空再實驗</p>
]]></content>
  </entry>
  <entry>
    <title>第一次寫Makefile就...放棄(誤)</title>
    <url>/2021/04/11/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AF%ABMakefile%E5%B0%B1-%E6%94%BE%E6%A3%84-%E8%AA%A4/</url>
    <content><![CDATA[<p>太久沒寫Makefile，寫一篇廢文把複習過程記錄下來</p>
<a id="more"></a>

<h2 id="目標"><a href="#目標" class="headerlink" title="目標"></a>目標</h2><ol>
<li>obj 資料夾要保持 src 的結構</li>
<li>每個 source code 要編譯成獨立的 object 檔案</li>
</ol>
<h2 id="過程"><a href="#過程" class="headerlink" title="過程"></a>過程</h2><h3 id="實作之前"><a href="#實作之前" class="headerlink" title="實作之前"></a>實作之前</h3><p>Makefile 基礎語法為:</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">tagret: prerequires</span></span><br><span class="line">    command</span><br></pre></td></tr></table></figure>

<p>用樹的 Postorder Traversal 來理解就是，每個 target 都是 node，prerequires 則是要往下拜訪的 node，command 則是拜訪 child node 完之後要執行的動作，例如:</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">all: compile</span></span><br><span class="line">    gcc -o main main.o helloworld.o</span><br><span class="line"><span class="section">compile:</span></span><br><span class="line">    gcc -c helloworld.c</span><br><span class="line">    gcc -c main.c</span><br></pre></td></tr></table></figure>

<p>執行 <code>make</code> 指令後，makefile 在沒有指定的情況下，預設從第一個 target 作展開。</p>
<ol>
<li><p><code>all</code> 底下還有 <code>compile</code> 節點，往下拜訪 <code>compile</code></p>
</li>
<li><p><code>compile</code> 底下沒有節點，執行 <code>compile</code> 裡的 command。</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -c helloworld.c</span><br><span class="line">gcc -c main.c</span><br></pre></td></tr></table></figure>
</li>
<li><p>底下的節點都拜訪並執行完 command 了，回到上一層節點 <code>all</code> ，執行 command</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -o main main.o helloworld.o</span><br></pre></td></tr></table></figure>
</li>
<li><p>輸出大概長這樣</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -c helloworld.c</span><br><span class="line">gcc -c main.c</span><br><span class="line">gcc -o main main.o helloworld.o</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="其他語法"><a href="#其他語法" class="headerlink" title="其他語法"></a>其他語法</h3><p>因為要展開整個專案底下的 source code，編譯階段如果是手動加入每個檔案不如直接寫腳本，還有寫死參數會造成日後維護困難，所以要用上其他語法</p>
<ol>
<li><p>變數</p>
<p> 指定編譯器，之後要替換可以不用一個一個改，也不用擔心漏改或改錯等問題</p>
 <figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">COMPILER := gcc</span><br></pre></td></tr></table></figure>
</li>
<li><p>字串操作</p>
<ol>
<li><p>列出 src 資料夾以下所有 *.c 檔案</p>
<p> 執行 <code>shell find</code> 來尋找檔案</p>
 <figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">SRCDIR := src</span><br><span class="line">SRCEXT := c</span><br><span class="line">SOURCES := <span class="variable">$(<span class="built_in">shell</span> find <span class="variable">$(SRCDIR)</span> -type f -name *.<span class="variable">$(SRCEXT)</span>)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>替換 *.c 檔案的路徑作為 *.o 檔案的路徑</p>
<ol>
<li><p>將含 *.c 結尾的字串都轉換成 *.o 結尾</p>
 <figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">$(SOURCES:.<span class="variable">$(SRCEXT)</span>=.<span class="variable">$(OBJEXT)</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>替換資料夾</p>
<p> 語法為 <code>$(patsubst pattern,replacement,text)</code>，將 <code>test</code> 中符合 <code>pattern</code> 的字串用 <code>replacement</code> 取代。下列語法的意思是將 <code>$(SOURCES:.$(SRCEXT)=.$(OBJEXT)</code> 內含 <code>src</code> 的字串都替換成 <code>obj</code></p>
 <figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">SRCDIR := src</span><br><span class="line">BUILDDIR := obj</span><br><span class="line">SRCEXT := c</span><br><span class="line">OBJEXT := o</span><br><span class="line">OBJECTS := <span class="variable">$(<span class="built_in">patsubst</span> <span class="variable">$(SRCDIR)</span>/%, <span class="variable">$(BUILDDIR)</span>/%, $(SOURCES:.<span class="variable">$(SRCEXT)</span>=.<span class="variable">$(OBJEXT)</span>)</span>)</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h3><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Compiler and Linker</span></span><br><span class="line">CC          := gcc</span><br><span class="line"></span><br><span class="line"><span class="comment">#The Target Binary Program</span></span><br><span class="line">TARGET      := main</span><br><span class="line"></span><br><span class="line"><span class="comment">#The Directories, Source, Includes, Objects, Binary and Resources</span></span><br><span class="line">SRCDIR      := src</span><br><span class="line">BUILDDIR    := obj</span><br><span class="line">TARGETDIR   := bin</span><br><span class="line">SRCEXT      := c</span><br><span class="line">OBJEXT      := o</span><br><span class="line"></span><br><span class="line"><span class="comment">#Flags, Libraries and Includes</span></span><br><span class="line">CFLAGS      := -Wall -O3 -g</span><br><span class="line">LIB         := </span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">#DO NOT EDIT BELOW THIS LINE</span></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------------------</span></span><br><span class="line">SOURCES     := <span class="variable">$(<span class="built_in">shell</span> find <span class="variable">$(SRCDIR)</span> -type f -name *.<span class="variable">$(SRCEXT)</span>)</span></span><br><span class="line">OBJECTS     := <span class="variable">$(<span class="built_in">patsubst</span> <span class="variable">$(SRCDIR)</span>/%,<span class="variable">$(BUILDDIR)</span>/%,$(SOURCES:.<span class="variable">$(SRCEXT)</span>=.<span class="variable">$(OBJEXT)</span>)</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Defauilt Make</span></span><br><span class="line"><span class="section">all: directories <span class="variable">$(TARGET)</span></span></span><br><span class="line"></span><br><span class="line"><span class="section">directories:</span></span><br><span class="line">    @mkdir -p <span class="variable">$(TARGETDIR)</span></span><br><span class="line">    @mkdir -p <span class="variable">$(BUILDDIR)</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">    @<span class="variable">$(RM)</span> -rf <span class="variable">$(TARGETDIR)</span></span><br><span class="line">    @<span class="variable">$(RM)</span> -rf <span class="variable">$(BUILDDIR)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Link</span></span><br><span class="line"><span class="variable">$(TARGET)</span>: <span class="variable">$(OBJECTS)</span></span><br><span class="line">    <span class="variable">$(CC)</span> -o <span class="variable">$(TARGETDIR)</span>/<span class="variable">$(TARGET)</span> <span class="variable">$^</span> <span class="variable">$(LIB)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Compile</span></span><br><span class="line"><span class="variable">$(BUILDDIR)</span>/%.<span class="variable">$(OBJEXT)</span>: <span class="variable">$(SRCDIR)</span>/%.<span class="variable">$(SRCEXT)</span></span><br><span class="line">    <span class="comment"># 建立對應的資料夾</span></span><br><span class="line">    @mkdir -p <span class="variable">$(<span class="built_in">dir</span> <span class="variable">$@</span>)</span></span><br><span class="line">    <span class="comment"># 編譯為 object 檔案</span></span><br><span class="line">    <span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> -c <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Non-File Targets</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: all clean</span></span><br></pre></td></tr></table></figure>

<h2 id="參考連結"><a href="#參考連結" class="headerlink" title="參考連結"></a>參考連結</h2><ol>
<li><a href="https://stackoverflow.com/a/27794283">How to place object files in separate subdirectory</a></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Linux header在哪裡？絕對難不倒你</title>
    <url>/2021/07/22/Linux-header%E5%9C%A8%E5%93%AA%E8%A3%A1%EF%BC%9F%E7%B5%95%E5%B0%8D%E9%9B%A3%E4%B8%8D%E5%80%92%E4%BD%A0/</url>
    <content><![CDATA[<p>實作<a href="https://hackmd.io/@sysprog/linux2021-summer">暑期Linux 核心課程</a>的前置遇到問題，記錄一下</p>
<a id="more"></a>

<h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><p>目前習慣用 WSL 開發，在建立環境的第一步就遇到 WSL 環境找不到 linux-headers 的問題</p>
<h2 id="如何解"><a href="#如何解" class="headerlink" title="如何解"></a>如何解</h2><p>apt-cache 找不到就只能到官方 <a href="https://github.com/microsoft/WSL2-Linux-Kernel">Repo</a> 找</p>
<ol>
<li><p>git clone &amp; check</p>
<ol>
<li><p>clone</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/microsoft/WSL2-Linux-Kernel.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>確認自己 WSL 的 kernel</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uname -r</span><br><span class="line"><span class="comment"># 4.19.128-microsoft-standard</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>checkout 版本</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> WSL2-Linux-Kernel</span><br><span class="line">git checkout 4.19.128-microsoft-standard</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>不想 Clone 也可以抓對應版本的 Release 下來 (optional)</p>
<ol>
<li><p>uname</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uname -r</span><br><span class="line"><span class="comment"># 4.19.128-microsoft-standard</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>抓 release</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/microsoft/WSL2-Linux-Kernel/archive/refs/tags/4.19.128-microsoft-standard.tar.gz</span><br></pre></td></tr></table></figure>
</li>
<li><p>解壓縮</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar zxvf 4.19.128-microsoft-standard.tar.gz</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>安裝必要套件</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install build-essential</span><br></pre></td></tr></table></figure>
</li>
<li><p>安裝 linux header</p>
<p> 從 google 上找到兩種安裝過程</p>
<ol>
<li><p><a href="https://www.programmersought.com/article/72858348551/">LINUX kernel module under WSL2</a></p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo zcat /proc/config.gz &gt; .config</span><br><span class="line">make -j $(nproc)</span><br><span class="line">sudo make -j $(nproc) modules_install</span><br></pre></td></tr></table></figure></li>
<li><p><a href="https://oftime.net/2021/01/16/win-bpf/">在 WSL2 环境下安装 BPF 工具链</a> </p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp Microsoft/config-wsl .config</span><br><span class="line">make oldconfig &amp;&amp; make prepare</span><br><span class="line">make scripts</span><br><span class="line">make modules</span><br><span class="line">make modules_install</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p> <strong>注</strong>: 缺少套件就用 <code>apt-get install</code> 解決，權限不夠就 <code>sudo</code> 解決(誤)</p>
</li>
</ol>
<h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>兩種安裝方法看不出有什麼差別，之後弄懂了再補上</p>
<h2 id="參考連結"><a href="#參考連結" class="headerlink" title="參考連結"></a>參考連結</h2><ol>
<li><a href="https://oftime.net/2021/01/16/win-bpf/">在 WSL2 环境下安装 BPF 工具链</a> </li>
<li><a href="https://www.programmersought.com/article/72858348551/">LINUX kernel module under WSL2</a></li>
<li><a href="https://github.com/microsoft/WSL2-Linux-Kernel">WSL2 GitHub Repo</a></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>安裝 Ubuntu-20.04 過程遇到的小問題</title>
    <url>/2021/07/28/%E5%AE%89%E8%A3%9D-Ubuntu-20-04-%E9%81%8E%E7%A8%8B%E9%81%87%E5%88%B0%E7%9A%84%E5%B0%8F%E5%95%8F%E9%A1%8C/</url>
    <content><![CDATA[<p>實作<a href="https://hackmd.io/@sysprog/linux2021-summer">暑期Linux 核心課程</a>的作業遇到太多WSL的問題，找台舊主機裝原生 ubuntu-20.04 壓壓驚，順便把過程中碰到的問題與解法記錄下來</p>
<a id="more"></a>

<h2 id="安裝完成重新開機後沒有進登入畫面而是停在-grub"><a href="#安裝完成重新開機後沒有進登入畫面而是停在-grub" class="headerlink" title="安裝完成重新開機後沒有進登入畫面而是停在 grub"></a>安裝完成重新開機後沒有進登入畫面而是停在 grub</h2><ol>
<li>列出所有裝置</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls</span><br><span class="line"><span class="comment"># (hd0), (hd0,xxx), (hd1), (hd1,xxx), .....</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>找出開機磁區</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls (hd0)/</span><br><span class="line">ls (hd0,xxx)/</span><br><span class="line">ls (hd1)/</span><br><span class="line">ls (hd1,xxx)/</span><br><span class="line"><span class="comment"># 直到找出 (hd0,1)/boot/grub 或者 (hd0,1)/grub</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>設定參數並開機</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> root=(hd0,xxx)</span><br><span class="line"><span class="built_in">set</span> prefix=(hd0,xxx)/boot/grub</span><br><span class="line">normal</span><br></pre></td></tr></table></figure>

<h2 id="整合-vscode-Remote-SSH"><a href="#整合-vscode-Remote-SSH" class="headerlink" title="整合 vscode Remote-SSH"></a>整合 vscode Remote-SSH</h2><p>照以往經驗，Ubuntu 可以驅動 Intel 內顯，不用額外設定。這次 Ubuntu 20.04 只抓到 1024x768 的解析度，色彩設定慘到不忍直視，調了半小時還是無法解決。於是想到在遠端用 vscode 開發</p>
<ol>
<li>在 Ubuntu 安裝 openssh-server <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install openssh-server</span><br></pre></td></tr></table></figure></li>
<li>在 Windows10 產生 ssh key <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ssh<span class="literal">-keygen</span></span><br></pre></td></tr></table></figure></li>
<li>在 Windows10 的 vscode 安裝 <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh">Remote-SSH 擴充功能</a></li>
<li>安裝擴充功能後，按下 <code>F1</code> 或 <code>Ctrl+Shift+P</code> 開啟命令選擇區並輸入 remote-ssh<br> <img src="/2021/07/28/%E5%AE%89%E8%A3%9D-Ubuntu-20-04-%E9%81%8E%E7%A8%8B%E9%81%87%E5%88%B0%E7%9A%84%E5%B0%8F%E5%95%8F%E9%A1%8C/01.png"></li>
<li>擴充功能接著會提示輸入要連線的目標，輸入完成後即可連線</li>
<li>設定 Ubuntu 的 authorized_keys <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/.ssh</span><br><span class="line">touch ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>
 接者把剛剛在 Windows10 產生的 ssh public key 加到 <code>~/.ssh/authorized_keys</code> 檔案中</li>
</ol>
<h2 id="參考連結"><a href="#參考連結" class="headerlink" title="參考連結"></a>參考連結</h2><ol>
<li><a href="https://unix.stackexchange.com/a/330852">GRUB starts in command line after reboot</a></li>
<li><a href="https://code.visualstudio.com/docs/remote/ssh-tutorial#_remote-ssh">Remote development over SSH</a> </li>
<li><a href="https://medium.com/@williamkwao/how-to-add-ssh-keys-to-an-ubuntu-server-6a3a5b1bee26">How to add ssh keys to an ubuntu server</a></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>BoyerMoore majority vote algorithm</title>
    <url>/2021/10/04/BoyerMoore-majority-vote-algorithm/</url>
    <content><![CDATA[<p>刷題的時候遇到 <code>BoyerMoore majority vote algorithm</code> 相關問題，特別寫一篇記錄</p>
<a id="more"></a>

<h2 id="問題描述"><a href="#問題描述" class="headerlink" title="問題描述"></a>問題描述</h2><p><a href="https://leetcode.com/problems/majority-element/">leetcode 題目</a></p>
<p>給 N 個數字，找出出現次數超過 <code>⌊n / 2⌋</code> 的數字</p>
<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>因為題目要求超過 <code>⌊n / 2⌋</code></p>
<p>所以 [1,1,2,2] 這個 case，<code>⌊n / 2⌋</code> 為 2，沒有任何一個數字超過 2，所以沒有答案</p>
<p>但題目保證一定有 <code>majority element</code>，所以不用擔心這種狀況</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, num = <span class="number">0</span>, count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; numsSize; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">            num = nums[i];</span><br><span class="line">            count = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nums[i] == num) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            count--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="變形"><a href="#變形" class="headerlink" title="變形"></a>變形</h2><p><a href="https://leetcode.com/problems/majority-element-ii/">leetcode 題目</a></p>
<p>給 N 個數字，找出出現次數超過 <code>⌊n / 3⌋</code> 的數字</p>
<p>同理，因為題目要求超過 <code>⌊n / 3⌋</code></p>
<p>所以 [1,1,2,2,3,3] 這個 case，<code>⌊n / 3⌋</code> 為 2，沒有任何一個數字超過 2，所以沒有答案</p>
<p>但這次題目沒有保證一定有 <code>majority element</code>，所以最後要檢查 count 有沒有滿足條件</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize, <span class="keyword">int</span>* returnSize)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, count1 = <span class="number">0</span>, count2 = <span class="number">0</span>, num1 = <span class="number">0</span>, num2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; numsSize; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] == num1) &#123;</span><br><span class="line">            count1++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nums[i] == num2) &#123;</span><br><span class="line">            count2++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(count1 == <span class="number">0</span>) &#123;</span><br><span class="line">            num1 = nums[i];</span><br><span class="line">            count1 = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(count2 == <span class="number">0</span>) &#123;</span><br><span class="line">            num2 = nums[i];</span><br><span class="line">            count2 = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            count1--;</span><br><span class="line">            count2--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    count1 = <span class="number">0</span>, count2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; numsSize; i++) &#123; </span><br><span class="line">        <span class="keyword">if</span>(nums[i] == num1) &#123;</span><br><span class="line">            count1++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nums[i] == num2) &#123;</span><br><span class="line">            count2++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> *ans = <span class="built_in">calloc</span>(<span class="number">2</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    (*returnSize) = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(count1 &gt; numsSize / <span class="number">3</span>) &#123;</span><br><span class="line">        ans[(*returnSize)++] = num1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(count2 &gt; numsSize / <span class="number">3</span>) &#123;</span><br><span class="line">        ans[(*returnSize)++] = num2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="參考連結"><a href="#參考連結" class="headerlink" title="參考連結"></a>參考連結</h2><ol>
<li><a href="https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm">Boyer–Moore majority vote algorithm</a></li>
</ol>
]]></content>
  </entry>
</search>
